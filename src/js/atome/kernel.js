Opal.modules["fileutils"] = Opal.return_val(Opal.nil); /* Generated by Opal 1.8.2 */

Opal.modules["corelib/random/formatter"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $module = Opal.module, $def = Opal.def, $range = Opal.range, $send = Opal.send, $rb_divide = Opal.rb_divide, $Kernel = Opal.Kernel, $Opal = Opal.Opal, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('_verify_count,bytes,encode,strict_encode64,random_bytes,urlsafe_encode64,split,hex,[]=,[],map,to_proc,join,times,<<,|,ord,/,abs,random_float,raise,coerce_to!,flatten,new,random_number,length,include,extend');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Random');

    var $nesting = [self].concat($parent_nesting);

    
    (function($base, $parent_nesting) {
      var self = $module($base, 'Formatter');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$hex', function $$hex(count) {
        var self = this;

        
        if (count == null) count = nil;
        count = $$$('Random').$_verify_count(count);
        
        var bytes = self.$bytes(count);
        var out = "";
        for (var i = 0; i < count; i++) {
          out += bytes.charCodeAt(i).toString(16).padStart(2, '0');
        }
        return (out).$encode("US-ASCII");
      ;
      }, -1);
      
      $def(self, '$random_bytes', function $$random_bytes(count) {
        var self = this;

        
        if (count == null) count = nil;
        return self.$bytes(count);
      }, -1);
      
      $def(self, '$base64', function $$base64(count) {
        var self = this;

        
        if (count == null) count = nil;
        return $$$('Base64').$strict_encode64(self.$random_bytes(count)).$encode("US-ASCII");
      }, -1);
      
      $def(self, '$urlsafe_base64', function $$urlsafe_base64(count, padding) {
        var self = this;

        
        if (count == null) count = nil;
        if (padding == null) padding = false;
        return $$$('Base64').$urlsafe_encode64(self.$random_bytes(count), padding).$encode("US-ASCII");
      }, -1);
      
      $def(self, '$uuid', function $$uuid() {
        var self = this, str = nil;

        
        str = self.$hex(16).$split("");
        str['$[]='](12, "4");
        str['$[]='](16, (parseInt(str['$[]'](16), 16) & 3 | 8).toString(16));
        str = [str['$[]']($range(0, 8, true)), str['$[]']($range(8, 12, true)), str['$[]']($range(12, 16, true)), str['$[]']($range(16, 20, true)), str['$[]']($range(20, 32, true))];
        str = $send(str, 'map', [], "join".$to_proc());
        return str.$join("-");
      });
      
      $def(self, '$random_float', function $$random_float() {
        var self = this, bs = nil, num = nil;

        
        bs = self.$bytes(4);
        num = 0;
        $send((4), 'times', [], function $$1(i){
          
          if (i == null) i = nil;
          num = num['$<<'](8);
          return (num = num['$|'](bs['$[]'](i).$ord()));});
        return $rb_divide(num.$abs(), 2147483647);
      });
      
      $def(self, '$random_number', function $$random_number(limit) {
        var self = this;

        
        ;
        
        function randomFloat() {
          return self.$random_float();
        }

        function randomInt(max) {
          return Math.floor(randomFloat() * max);
        }

        function randomRange() {
          var min = limit.begin,
              max = limit.end;

          if (min === nil || max === nil) {
            return nil;
          }

          var length = max - min;

          if (length < 0) {
            return nil;
          }

          if (length === 0) {
            return min;
          }

          if (max % 1 === 0 && min % 1 === 0 && !limit.excl) {
            length++;
          }

          return randomInt(length) + min;
        }

        if (limit == null) {
          return randomFloat();
        } else if (limit.$$is_range) {
          return randomRange();
        } else if (limit.$$is_number) {
          if (limit <= 0) {
            $Kernel.$raise($$$('ArgumentError'), "invalid argument - " + (limit))
          }

          if (limit % 1 === 0) {
            // integer
            return randomInt(limit);
          } else {
            return randomFloat() * limit;
          }
        } else {
          limit = $Opal['$coerce_to!'](limit, $$$('Integer'), "to_int");

          if (limit <= 0) {
            $Kernel.$raise($$$('ArgumentError'), "invalid argument - " + (limit))
          }

          return randomInt(limit);
        }
      ;
      }, -1);
      return $def(self, '$alphanumeric', function $$alphanumeric(count) {
        var self = this, map = nil;

        
        if (count == null) count = nil;
        count = $$('Random').$_verify_count(count);
        map = $send([$range("0", "9", false), $range("a", "z", false), $range("A", "Z", false)], 'map', [], "to_a".$to_proc()).$flatten();
        return $send($$$('Array'), 'new', [count], function $$2(i){var self = $$2.$$s == null ? this : $$2.$$s;

          
          if (i == null) i = nil;
          return map['$[]'](self.$random_number(map.$length()));}, {$$s: self}).$join();
      }, -1);
    })(self, $nesting);
    self.$include($$$($$$('Random'), 'Formatter'));
    return self.$extend($$$($$$('Random'), 'Formatter'));
  })('::', null, $nesting)
};

Opal.modules["securerandom"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $defs = Opal.defs, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,extend,warn,rand,gen_random,_verify_count,encode');
  
  self.$require("corelib/random/formatter");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'SecureRandom');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$extend($$$($$('Random'), 'Formatter'));
    
    var gen_random_bytes;

    if ((Opal.global.crypto   && Opal.global.crypto.getRandomValues) ||
        (Opal.global.msCrypto && Opal.global.msCrypto.getRandomValues)) {
      // This method is available in all non-ancient web browsers.

      var crypto = Opal.global.crypto || Opal.global.msCrypto;
      gen_random_bytes = function(count) {
        var storage = new Uint8Array(count);
        crypto.getRandomValues(storage);
        return storage;
      };
    }
    else if (Opal.global.crypto && Opal.global.crypto.randomBytes) {
      // This method is available in Node.js

      gen_random_bytes = function(count) {
        return Opal.global.crypto.randomBytes(count);
      };
    }
    else {
      // Let's dangerously polyfill this interface with our MersenneTwister
      // xor native JS Math.random xor something about current time...
      // That's hardly secure, but the following warning should provide a person
      // deploying the code a good idea on what he should do to make his deployment
      // actually secure.
      // It's possible to interface other libraries by adding an else if above if
      // that's really desired.

      self.$warn("Can't get a Crypto.getRandomValues interface or Crypto.randomBytes." + "The random values generated with SecureRandom won't be " + "cryptographically secure")

      gen_random_bytes = function(count) {
        var storage = new Uint8Array(count);
        for (var i = 0; i < count; i++) {
          storage[i] = self.$rand(255) ^ Math.floor(Math.random() * 256);
          storage[i] ^= +(new Date())>>self.$rand(255)&0xff;
        }
        return storage;
      }
    }
  ;
    $defs(self, '$bytes', function $$bytes(bytes) {
      var self = this;

      
      if (bytes == null) bytes = nil;
      return self.$gen_random(bytes);
    }, -1);
    return $defs(self, '$gen_random', function $$gen_random(count) {
      var out = nil;

      
      if (count == null) count = nil;
      count = $$('Random').$_verify_count(count);
      out = "";
      
      var bytes = gen_random_bytes(count);
      for (var i = 0; i < count; i++) {
        out += String.fromCharCode(bytes[i]);
      }
    ;
      return out.$encode("ASCII-8BIT");
    }, -1);
  })($nesting[0], $nesting);
};

Opal.modules["atome/version"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $nesting = [], nil = Opal.nil;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting);

    return $const_set($nesting[0], 'VERSION', "0.5.6.9.4")
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/genesis/genesis"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $send = Opal.send, $def = Opal.def, $truthy = Opal.truthy, $hash_rehash = Opal.hash_rehash, $eqeq = Opal.eqeq, $not = Opal.not, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('define_method,particle_creation,to_proc,[],nil?,add_to_particle_list,auto_render_generator,new_particle,additional_particle_methods,add_to_atome_list,atome_method_for_object,default_params,new_default_params,new_atome,new_molecule,each,renderer_list,build_render,is_a?,instance_exec,add_sanitizer_method,to_sym,add_optional_method,[]=,write_auth,==,particle_sanitizer,create_particle,!,include?,collect,send,grab,read_auth,instance_variable_get,particle_read,atome_sanitizer,atome_processor,type,<<,attached,atomes,affect,new');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Genesis');

    var $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$create_particle', function $$create_particle(element, store, render) {
        var $yield = $$create_particle.$$p || nil, self = this;

        $$create_particle.$$p = null;
        return $send($$('Atome'), 'define_method', ["set_" + (element)], function $$1(params){var user_proc = $$1.$$p || nil, self = $$1.$$s == null ? this : $$1.$$s;

          $$1.$$p = null;
          
          ;
          if (params == null) params = nil;
          return $send(self, 'particle_creation', [element, params, store, render], user_proc.$to_proc());}, {$$s: self})
      });
      
      $def(self, '$build_particle', function $$build_particle(particle_name, options) {
        var particle_proc = $$build_particle.$$p || nil, self = this, type = nil, category = nil, store = nil, render = nil;

        $$build_particle.$$p = null;
        
        ;
        if (options == null) options = (new Map());
        type = options['$[]']("type");
        category = options['$[]']("category");
        if ($truthy(options['$[]']("type")['$nil?']())) {
          type = "string"
        };
        store = options['$[]']("store");
        if ($truthy(options['$[]']("store")['$nil?']())) {
          store = true
        };
        render = options['$[]']("render");
        if ($truthy(options['$[]']("render")['$nil?']())) {
          render = true
        };
        $$('Universe').$add_to_particle_list(particle_name, type, category);
        if ($truthy(render)) {
          self.$auto_render_generator(particle_name)
        };
        $send(self, 'new_particle', [particle_name, store, render], particle_proc.$to_proc());
        return $send(self, 'additional_particle_methods', [particle_name, store, render], particle_proc.$to_proc());
      }, -2);
      
      $def(self, '$build_atome', function $$build_atome(atome_name) {
        var atome_proc = $$build_atome.$$p || nil, self = this;

        $$build_atome.$$p = null;
        
        ;
        $$('Universe').$add_to_atome_list(atome_name);
        self.$atome_method_for_object(atome_name);
        if (!$truthy($$('Essentials').$default_params()['$[]'](atome_name))) {
          $$('Essentials').$new_default_params($hash_rehash(new Map([[atome_name, (new Map([["type", atome_name]]))]])))
        };
        self.$auto_render_generator(atome_name);
        return $send(self, 'new_atome', [atome_name], atome_proc.$to_proc());
      });
      
      $def(self, '$build_molecule', function $$build_molecule(molecule_name) {
        var molecule_proc = $$build_molecule.$$p || nil, self = this;

        $$build_molecule.$$p = null;
        
        ;
        return $send(self, 'new_molecule', [molecule_name], molecule_proc.$to_proc());
      });
      
      $def(self, '$auto_render_generator', function $$auto_render_generator(element) {
        var self = this;

        return $send($$('Universe').$renderer_list(), 'each', [], function $$2(render_engine){var self = $$2.$$s == null ? this : $$2.$$s;

          
          if (render_engine == null) render_engine = nil;
          return self.$build_render("" + (render_engine) + "_" + (element));}, {$$s: self})
      });
      
      $def(self, '$build_render', function $$build_render(renderer_name) {
        var method_proc = $$build_render.$$p || nil, self = this;

        $$build_render.$$p = null;
        
        ;
        return $send($$('Atome'), 'define_method', [renderer_name], function $$3(params){var user_proc = $$3.$$p || nil, self = $$3.$$s == null ? this : $$3.$$s;

          $$3.$$p = null;
          
          ;
          if (params == null) params = nil;
          if ($truthy(method_proc['$is_a?']($$('Proc')))) {
            return $send(self, 'instance_exec', [params, user_proc], method_proc.$to_proc())
          } else {
            return nil
          };}, {$$arity: -1, $$s: self});
      });
      
      $def(self, '$build_sanitizer', function $$build_sanitizer(method_name) {
        var method_proc = $$build_sanitizer.$$p || nil;

        $$build_sanitizer.$$p = null;
        
        ;
        return $send($$('Universe'), 'add_sanitizer_method', [method_name.$to_sym()], method_proc.$to_proc());
      });
      
      $def(self, '$build_option', function $$build_option(method_name, method_proc) {
        
        return $$('Universe').$add_optional_method(method_name.$to_sym(), method_proc)
      });
      
      $def(self, '$new_particle', function $$new_particle(element, store, render) {
        var _method_proc = $$new_particle.$$p || nil, self = this;

        $$new_particle.$$p = null;
        
        ;
        return $send($$('Atome'), 'define_method', [element], function $$4(params){var user_proc = $$4.$$p || nil, self = $$4.$$s == null ? this : $$4.$$s, $ret_or_1 = nil, computed_params = nil, value_found = nil;
          if (self.history == null) self.history = nil;
          if (self.type == null) self.type = nil;

          $$4.$$p = null;
          
          ;
          if (params == null) params = nil;
          if ($truthy(($ret_or_1 = self.history['$[]'](element)))) {
            $ret_or_1
          } else {
            self.history['$[]='](element, [])
          };
          if ((($truthy(params) || ($eqeq(params, false))) && ($truthy(self.$write_auth(element))))) {
            
            params = $send(self, 'particle_sanitizer', [element, params], user_proc.$to_proc());
            $$('Genesis').$create_particle(element, store, render);
            if (($eqeq(self.type, "group") && ($not(["type", "id", "collect", "layout"]['$include?'](element))))) {
              $send(self.$collect(), 'each', [], function $$5(collected_found){var self = $$5.$$s == null ? this : $$5.$$s;

                
                if (collected_found == null) collected_found = nil;
                return $send(self.$grab(collected_found), 'send', [element, params], user_proc.$to_proc());}, {$$s: self})
            };
            computed_params = $send(self, 'send', ["set_" + (element), params], user_proc.$to_proc());
            return computed_params;
          } else if (($truthy(params) || ($eqeq(params, false)))) {
            return "send a valid password to write " + (element) + " value"
          } else if ($truthy(self.$read_auth(element))) {
            
            value_found = self.$instance_variable_get("@" + (element));
            value_found = $send(self, 'particle_read', [element, value_found], user_proc.$to_proc());
            return value_found;
          } else {
            return "send a valid password to read " + (element) + " value"
          };}, {$$arity: -1, $$s: self});
      });
      
      $def(self, '$additional_particle_methods', function $$additional_particle_methods(element, store, rendering) {
        var method_proc = $$additional_particle_methods.$$p || nil, self = this;

        $$additional_particle_methods.$$p = null;
        
        ;
        return $send($$('Atome'), 'define_method', ["" + (element) + "="], function $$6(params){var user_proc = $$6.$$p || nil, self = $$6.$$s == null ? this : $$6.$$s;

          $$6.$$p = null;
          
          ;
          if (params == null) params = nil;
          if ($truthy(method_proc['$is_a?']($$('Proc')))) {
            $send(self, 'instance_exec', [params, user_proc], method_proc.$to_proc())
          };
          params = self.$particle_sanitizer(element, params);
          return $send(self, 'particle_creation', [element, params, store, rendering], user_proc.$to_proc());}, {$$arity: -1, $$s: self});
      });
      
      $def(self, '$new_atome', function $$new_atome(element) {
        var method_proc = $$new_atome.$$p || nil, self = this;

        $$new_atome.$$p = null;
        
        ;
        $send($$('Atome'), 'define_method', [element], function $$7(params){var user_proc = $$7.$$p || nil, self = $$7.$$s == null ? this : $$7.$$s, collected_atomes = nil;
          if (self.apply == null) self.apply = nil;

          $$7.$$p = null;
          
          ;
          if (params == null) params = nil;
          if ($truthy(method_proc['$is_a?']($$('Proc')))) {
            $send(self, 'instance_exec', [params, user_proc], method_proc.$to_proc())
          };
          if ($truthy(params)) {
            
            params = $send(self, 'atome_sanitizer', [element, params], user_proc.$to_proc());
            return $send(self, 'atome_processor', [element, params], user_proc.$to_proc());
          } else {
            
            collected_atomes = [];
            if ($truthy(["color", "shadow", "paint", "border"]['$include?'](element))) {
              $send(self.apply, 'each', [], function $$8(attached_atome){var self = $$8.$$s == null ? this : $$8.$$s;

                
                if (attached_atome == null) attached_atome = nil;
                if ($eqeq(self.$grab(attached_atome).$type().$to_sym(), element.$to_sym())) {
                  return collected_atomes['$<<'](attached_atome)
                } else {
                  return nil
                };}, {$$s: self})
            } else {
              $send(self.$attached(), 'each', [], function $$9(attached_atome){var self = $$9.$$s == null ? this : $$9.$$s;

                
                if (attached_atome == null) attached_atome = nil;
                if ($eqeq(self.$grab(attached_atome).$type().$to_sym(), element.$to_sym())) {
                  return collected_atomes['$<<'](attached_atome)
                } else {
                  return nil
                };}, {$$s: self})
            };
            return collected_atomes;
          };}, {$$arity: -1, $$s: self});
        return $send($$('Atome'), 'define_method', ["set_" + (element)], function $$10(params){var user_proc = $$10.$$p || nil, self = $$10.$$s == null ? this : $$10.$$s, previous_atome = nil;

          $$10.$$p = null;
          
          ;
          if (params == null) params = nil;
          if ($truthy($$('Universe').$atomes()['$[]'](params['$[]']("id")))) {
            
            previous_atome = self.$grab(params['$[]']("id"));
            previous_atome.$affect(params['$[]']("affect"));
            return previous_atome;
          } else {
            return $send($$('Atome'), 'new', [params], user_proc.$to_proc())
          };}, {$$s: self});
      });
      return $def(self, '$new_molecule', function $$new_molecule(molecule) {
        var method_proc = $$new_molecule.$$p || nil, self = this;

        $$new_molecule.$$p = null;
        
        ;
        return $send($$('Molecule'), 'define_method', [molecule], function $$11(params){var user_proc = $$11.$$p || nil, self = $$11.$$s == null ? this : $$11.$$s, m = nil;

          $$11.$$p = null;
          
          ;
          if (params == null) params = nil;
          if ($truthy(method_proc['$is_a?']($$('Proc')))) {
            m = $send(self, 'instance_exec', [params, user_proc], method_proc.$to_proc())
          };
          return m;}, {$$s: self});
      });
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/kernel/black_matter"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $def = Opal.def, $assign_ivar = Opal.assign_ivar, $return_ivar = Opal.return_ivar, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('sha256,global,to_s,encode,==');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Black_matter');

    var $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$encode', function $$encode(string) {
        
        return $$('JS').$global().$sha256(string.$to_s())
      });
      
      $def(self, '$check_password', function $$check_password(input_password, stored_hash) {
        var self = this, input_hash = nil;

        
        input_hash = self.$encode(input_password);
        return input_hash['$=='](stored_hash);
      });
      
      $def(self, '$set_password', $assign_ivar("password"));
      return $def(self, '$password', $return_ivar("password"));
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/kernel/universe"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $return_ivar = Opal.return_ivar, $def = Opal.def, $send = Opal.send, $slice = Opal.slice, $hash_rehash = Opal.hash_rehash, $rb_plus = Opal.rb_plus, $truthy = Opal.truthy, $eqeqeq = Opal.eqeqeq, $eqeq = Opal.eqeq, $assign_ivar = Opal.assign_ivar, $neqeq = Opal.neqeq, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('attr_reader,attr_accessor,[]=,[],delete,to_sym,merge!,push,+,each,tag,<<,id,gsub,uuid,strftime,now,generate_uuid,===,=~,last_match,downcase,==,to_s,global,include?,platform_type,current_machine_decision,!=,internet,html,grab,encode,password,connected,sync,%,puts,setItem,length');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Universe');

    var $nesting = [self].concat($parent_nesting);

    
    self.counter = 0;
    self.atomes = (new Map());
    self.atomes_ids = (new Map());
    self.atome_list = [];
    self.molecule_list = [];
    self.particle_list = (new Map());
    self.renderer_list = ["html", "browser", "headless", "server", "log"];
    self.sanitizers = (new Map());
    self.specificities = (new Map());
    self.messages = (new Map());
    self.increment = 0;
    self.categories = ["atome", "communication", "effect", "event", "geometry", "hierarchy", "identity", "material", "property", "security", "spatial", "time", "utility"];
    self.history = (new Map());
    self.users = (new Map());
    self.help = (new Map());
    self.example = (new Map());
    self.allow_localstorage = false;
    self.allow_sync = false;
    self.connected = false;
    self.database_ready = false;
    self.tools = (new Map());
    self.allow_tool_operations = false;
    self.active_tools = [];
    self.atome_preset = [];
    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      self.$attr_reader("atomes", "atomes_ids", "renderer_list", "molecule_list", "atome_list", "particle_list", "classes", "counter", "atomes_specificities");
      self.$attr_accessor("connected", "allow_sync", "allow_localstorage", "database_ready", "edit_mode", "tools", "allow_tool_operations", "active_tools", "atome_preset");
      
      $def(self, '$messages', $return_ivar("messages"));
      
      $def(self, '$store_messages', function $$store_messages(new_msg) {
        var $a, self = this;
        if (self.messages == null) self.messages = nil;

        return ($a = [new_msg['$[]']("msg_nb"), new_msg['$[]']("proc")], $send(self.messages, '[]=', $a), $a[$a.length - 1])
      });
      
      $def(self, '$delete_messages', function $$delete_messages(msg_to_del) {
        var self = this;
        if (self.messages == null) self.messages = nil;

        return self.messages.$delete(msg_to_del)
      });
      
      $def(self, '$set_help', function $$set_help(particle) {
        var doc = $$set_help.$$p || nil, $a, self = this;
        if (self.help == null) self.help = nil;

        $$set_help.$$p = null;
        
        ;
        return ($a = [particle, doc], $send(self.help, '[]=', $a), $a[$a.length - 1]);
      });
      
      $def(self, '$get_help', function $$get_help(particle) {
        var self = this;
        if (self.help == null) self.help = nil;

        return self.help['$[]'](particle)
      });
      
      $def(self, '$set_example', function $$set_example(particle) {
        var example = $$set_example.$$p || nil, $a, self = this;
        if (self.example == null) self.example = nil;

        $$set_example.$$p = null;
        
        ;
        return ($a = [particle, example], $send(self.example, '[]=', $a), $a[$a.length - 1]);
      });
      
      $def(self, '$get_example', function $$get_example(particle) {
        var self = this;
        if (self.example == null) self.example = nil;

        return self.example['$[]'](particle)
      });
      
      $def(self, '$categories', $return_ivar("categories"));
      
      $def(self, '$add_to_particle_list', function $$add_to_particle_list($a, $b, $c) {
        var $post_args, particle, type, category, $d, self = this;
        if (self.particle_list == null) self.particle_list = nil;

        
        $post_args = $slice(arguments);
        
        if ($post_args.length > 2) particle = $post_args.shift();if (particle == null) particle = nil;
        
        type = $post_args.shift();if (type == null) type = nil;
        
        category = $post_args.shift();if (category == null) category = nil;
        return ($d = [particle, (new Map([["type", type], ["category", category]]))], $send(self.particle_list, '[]=', $d), $d[$d.length - 1]);
      }, -3);
      
      $def(self, '$add_atomes_specificities', function $$add_atomes_specificities(atome_type_to_add) {
        var $a, self = this;
        if (self.specificities == null) self.specificities = nil;

        return ($a = [atome_type_to_add, (new Map())], $send(self.specificities, '[]=', $a), $a[$a.length - 1])
      });
      
      $def(self, '$set_atomes_specificities', function $$set_atomes_specificities(params) {
        var $a, self = this, particle_found = nil, specificity = nil;
        if (self.specificities == null) self.specificities = nil;

        
        particle_found = params['$[]']("method").$to_sym();
        specificity = (("" + (params['$[]']("specific"))) + "_").$to_sym();
        return ($a = [particle_found, specificity], $send(self.specificities['$[]'](params['$[]']("specific")), '[]=', $a), $a[$a.length - 1]);
      });
      
      $def(self, '$get_atomes_specificities', $return_ivar("specificities"));
      
      $def(self, '$add_sanitizer_method', function $$add_sanitizer_method(method_name) {
        var method_proc = $$add_sanitizer_method.$$p || nil, self = this;
        if (self.sanitizers == null) self.sanitizers = nil;

        $$add_sanitizer_method.$$p = null;
        
        ;
        return self.sanitizers['$merge!']($hash_rehash(new Map([[method_name, method_proc]])));
      });
      
      $def(self, '$get_sanitizer_method', function $$get_sanitizer_method(method_name) {
        var self = this;
        if (self.sanitizers == null) self.sanitizers = nil;

        return self.sanitizers['$[]'](method_name)
      });
      
      $def(self, '$add_to_atome_list', function $$add_to_atome_list(atome) {
        var self = this;
        if (self.atome_list == null) self.atome_list = nil;

        return self.atome_list.$push(atome)
      });
      
      $def(self, '$add_to_molecule_list', function $$add_to_molecule_list(molecule) {
        var self = this;
        if (self.molecule_list == null) self.molecule_list = nil;

        return self.molecule_list.$push(molecule)
      });
      
      $def(self, '$add_to_atomes', function $$add_to_atomes(aid, atome) {
        var self = this;
        if (self.atomes == null) self.atomes = nil;
        if (self.counter == null) self.counter = nil;

        
        self.atomes['$[]='](aid, atome);
        return (self.counter = $rb_plus(self.counter, 1));
      });
      
      $def(self, '$id_to_aid', function $$id_to_aid(id, aid) {
        var $a, self = this;
        if (self.atomes_ids == null) self.atomes_ids = nil;

        return ($a = [id, aid], $send(self.atomes_ids, '[]=', $a), $a[$a.length - 1])
      });
      
      $def(self, '$user_atomes', function $$user_atomes() {
        var self = this, collected_id = nil;
        if (self.atomes == null) self.atomes = nil;

        
        collected_id = [];
        $send(self.atomes, 'each', [], function $$1(id_found, atome_found){
          
          if (id_found == null) id_found = nil;
          if (atome_found == null) atome_found = nil;
          if (($truthy(atome_found.$tag()) && ($truthy(atome_found.$tag()['$[]']("system"))))) {
            return nil
          } else {
            return collected_id['$<<'](atome_found.$id())
          };});
        return collected_id;
      });
      
      $def(self, '$system_atomes', function $$system_atomes() {
        var self = this, collected_id = nil;
        if (self.atomes == null) self.atomes = nil;

        
        collected_id = [];
        $send(self.atomes, 'each', [], function $$2(id_found, atome_found){
          
          if (id_found == null) id_found = nil;
          if (atome_found == null) atome_found = nil;
          if (($truthy(atome_found.$tag()) && ($truthy(atome_found.$tag()['$[]']("system"))))) {
            return collected_id['$<<'](id_found)
          } else {
            return nil
          };});
        return collected_id;
      });
      
      $def(self, '$generate_uuid', function $$generate_uuid() {
        var uuid = nil, formatted_time = nil;

        
        uuid = $$('SecureRandom').$uuid().$gsub("-", "");
        formatted_time = $$('Time').$now().$strftime("%Y%m%d%H%M%S");
        return "" + (uuid) + (formatted_time);
      });
      
      $def(self, '$app_identity', function $$app_identity() {
        var self = this;

        return (self.app_identity = self.$generate_uuid())
      });
      
      $def(self, '$delete', function $delete$3(id) {
        var self = this;
        if (self.atomes == null) self.atomes = nil;

        return self.atomes.$delete(id)
      });
      
      $def(self, '$current_machine_decision', function $$current_machine_decision(platform, output) {
        var $ret_or_1 = nil;

        
        if ($eqeqeq(/darwin/, ($ret_or_1 = platform))) {
          if ($truthy(output['$=~'](/en1.*?(([A-F0-9]{2}:){5}[A-F0-9]{2})/im))) {
            $$$('Regexp').$last_match(1)
          }
        } else if ($eqeqeq(/win32/, $ret_or_1)) {
          if ($truthy(output['$=~'](/Physical Address.*?(([A-F0-9]{2}-){5}[A-F0-9]{2})/im))) {
            $$$('Regexp').$last_match(1)
          }
        } else {
          "unknown platform"
        };
        return platform;
      });
      
      $def(self, '$platform_type', function $$platform_type() {
        var $ret_or_1 = nil;

        if ($eqeqeq(/win/i, ($ret_or_1 = $$('RUBY_PLATFORM')))) {
          return "Windows"
        } else if ($eqeqeq(/darwin/i, $ret_or_1)) {
          return "macOS"
        } else if ($eqeqeq(/linux/i, $ret_or_1)) {
          return "Linux"
        } else if ($eqeqeq(/unix/i, $ret_or_1)) {
          return "Unix"
        } else {
          return "Plate-forme inconnue"
        }
      });
      
      $def(self, '$engine', function $$engine() {
        var self = this, platform = nil, output = nil;

        
        platform = $$('RUBY_PLATFORM').$downcase();
        output = ($eqeq(platform, "opal") ? (((platform = $$('JS').$global()['$[]']("navigator")['$[]']("userAgent").$to_s().$downcase()), ($truthy(platform['$include?']("win32")) ? ("ipconfig /all") : ("ifconfig")))) : ($eqeq(platform, "wasm32-wasi") ? ("ifconfig") : ($eqeq(self.$platform_type(), "windows") ? ("ipconfig") : ("ifconfig"))));
        return self.$current_machine_decision(platform, output);
      });
      
      $def(self, '$current_server', function $$current_server() {
        
        return $$('JS').$global()['$[]']("location")['$[]']("href").$to_s()
      });
      
      $def(self, '$current_user', $return_ivar("user"));
      
      $def(self, '$add_user=', function $add_user$eq$4(id) {
        var $a, self = this;
        if (self.users == null) self.users = nil;

        return ($a = [id, true], $send(self.users, '[]=', $a), $a[$a.length - 1])
      });
      
      $def(self, '$users', $return_ivar("users"));
      
      $def(self, '$current_user=', $assign_ivar("user"));
      
      $def(self, '$current_machine', $return_ivar("machine"));
      
      $def(self, '$current_machine=', $assign_ivar("machine"));
      
      $def(self, '$internet', function $$internet() {
        var self = this;

        if ($neqeq($$('RUBY_ENGINE').$downcase(), "native")) {
          return self.$grab("view").$html().$internet()
        } else {
          return nil
        }
      });
      
      $def(self, '$synchronised', function $$synchronised(action_nb, pass) {
        var $a, self = this;
        if (self.history == null) self.history = nil;

        
        if (!$eqeq($$('Black_matter').$encode(pass), $$('Black_matter').$password()['$[]']("read")['$[]']("atome"))) {
          return nil
        };
        return ($a = ["sync", true], $send(self.history['$[]'](action_nb), '[]=', $a), $a[$a.length - 1]);
      });
      
      $def(self, '$historicize', function $$historicize(id, operation, element, params) {
        var $a, self = this, operation_timing = nil;
        if (self.allow_sync == null) self.allow_sync = nil;
        if (self.allow_localstorage == null) self.allow_localstorage = nil;
        if (self.increment == null) self.increment = nil;
        if (self.history == null) self.history = nil;

        
        if (($truthy(self.allow_sync) && ($truthy($$('Universe').$connected())))) {
          $$('A').$sync((new Map([["action", "historicize"], ["data", (new Map([["table", "user"]]))]])))
        };
        if ($truthy(self.allow_localstorage)) {
          
          operation_timing = $rb_plus($$('Time').$now().$strftime("%Y%m%d%H%M%S%3N"), self.increment.$to_s());
          self.increment = $rb_plus(self.increment, 1);
          self.increment = self.increment['$%'](100);
          self.$puts("===> { " + (id) + " => { " + (operation) + " => { " + (element) + " => " + (params) + " } }, sync: false }");
          $$('JS').$global()['$[]']("localStorage").$setItem(operation_timing, "{ " + (id) + " => { " + (operation) + " => { " + (element) + " => " + (params) + " } }, sync: false }");
          return ($a = [self.history.$length(), $hash_rehash(new Map([[operation_timing, $hash_rehash(new Map([[id, $hash_rehash(new Map([[operation, $hash_rehash(new Map([[element, params]]))]]))], ["sync", false], ["time", $$('Time').$now()]]))]]))], $send(self.history, '[]=', $a), $a[$a.length - 1]);
        } else {
          return nil
        };
      });
      return $def(self, '$story', $return_ivar("history"));
    })(Opal.get_singleton_class(self), $nesting);
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/utilities/essentials"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $return_ivar = Opal.return_ivar, $defs = Opal.defs, $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('merge!,current_user,[]=,[],merge');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Essentials');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), corp = nil;

    
    corp = "<g transform=\"matrix(0.0267056,0,0,0.0267056,18.6376,20.2376)\">\n" + "    <g id=\"shapePath1\" transform=\"matrix(4.16667,0,0,4.16667,-377.307,105.632)\">\n" + "        <path d=\"M629.175,81.832C740.508,190.188 742.921,368.28 634.565,479.613C526.209,590.945 348.116,593.358 236.784,485.002C125.451,376.646 123.038,198.554 231.394,87.221C339.75,-24.111 517.843,-26.524 629.175,81.832Z\" style=\"fill:rgb(201,12,125);\"/>\n" + "    </g>\n" + "    <g id=\"shapePath2\" transform=\"matrix(4.16667,0,0,4.16667,-377.307,105.632)\">\n" + "        <path d=\"M1679.33,410.731C1503.98,413.882 1402.52,565.418 1402.72,691.803C1402.91,818.107 1486.13,846.234 1498.35,1056.78C1501.76,1313.32 1173.12,1490.47 987.025,1492.89C257.861,1502.39 73.275,904.061 71.639,735.381C70.841,653.675 1.164,647.648 2.788,737.449C12.787,1291.4 456.109,1712.79 989.247,1706.24C1570.67,1699.09 1982.31,1234 1965.76,683.236C1961.3,534.95 1835.31,407.931 1679.33,410.731Z\" style=\"fill:rgb(201,12,125);\"/>\n" + "    </g>\n" + "</g>\n";
    self.default_params = (new Map([["render_engines", ["html"]], ["image", (new Map([["type", "image"], ["left", 0], ["top", 0]]))], ["matrix", (new Map([["type", "matrix"], ["left", 0], ["top", 0], ["option", (new Map())]]))], ["video", (new Map([["type", "video"]]))], ["animation", (new Map([["type", "animation"], ["attach", "black_matter"]]))], ["element", (new Map([["type", "element"], ["renderers", []], ["attach", "black_matter"]]))], ["box", (new Map([["type", "shape"], ["width", 39], ["height", 39], ["apply", ["box_color"]], ["left", 0], ["top", 0], ["preset", "box"]]))], ["vector", (new Map([["type", "vector"], ["width", 39], ["height", 39], ["left", 0], ["top", 0], ["preset", "vector"], ["definition", corp]]))], ["circle", (new Map([["type", "shape"], ["width", 39], ["height", 39], ["smooth", "100%"], ["apply", ["circle_color"]], ["left", 0], ["top", 0], ["preset", "circle"]]))], ["shape", (new Map([["type", "shape"], ["width", 39], ["height", 39], ["apply", ["shape_color"]], ["left", 0], ["top", 0]]))], ["text", (new Map([["type", "text"], ["component", (new Map([["size", 12]]))], ["left", 0], ["top", 0], ["apply", ["text_color"]], ["width", "auto"], ["height", "auto"], ["language", "english"]]))], ["drm", (new Map([["type", "drm"], ["attach", "black_matter"]]))], ["shadow", (new Map([["type", "shadow"], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 1], ["blur", 3], ["left", 3], ["top", 3]]))], ["border", (new Map([["type", "border"], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0], ["pattern", "solid"], ["thickness", 6]]))], ["color", (new Map([["type", "color"], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 1]]))]]));
    $defs(self, '$default_params', $return_ivar("default_params"));
    $defs(self, '$new_default_params', function $$new_default_params(new_default) {
      var self = this;
      if (self.default_params == null) self.default_params = nil;

      return self.default_params['$merge!'](new_default)
    });
    
    $def(self, '$validation', function $$validation(atome_instance_var) {
      
      if ($truthy(atome_instance_var)) {
        return true
      } else {
        return nil
      }
    });
    return $def(self, '$add_essential_drm', function $$add_essential_drm(params) {
      var $a, essential_drm = nil;

      
      essential_drm = (new Map([["authorisation", (new Map([["read", [$$('Atome').$current_user()]], ["write", [$$('Atome').$current_user()]]]))], ["atome", (new Map([["read", ["all"]], ["write", ["me"]]]))]]));
      return ($a = ["drm", ($truthy(params['$[]']("drm")) ? (essential_drm.$merge(params['$[]']("drm"))) : (essential_drm))], $send(params, '[]=', $a), $a[$a.length - 1]);
    });
  })($nesting[0], $nesting)
};

Opal.modules["renderers/renderer"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $send = Opal.send, $def = Opal.def, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('each,[],get_atomes_specificities,type,send,to_proc');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.renderers = nil;
    return $def(self, '$render', function $$render(element, params) {
      var user_proc = $$render.$$p || nil, self = this, render_engines = nil;

      $$render.$$p = null;
      
      ;
      render_engines = self.renderers;
      return $send(render_engines, 'each', [], function $$1(render_engine){var self = $$1.$$s == null ? this : $$1.$$s, exception_found = nil;

        
        if (render_engine == null) render_engine = nil;
        exception_found = "" + ($$('Universe').$get_atomes_specificities()['$[]'](self.$type())['$[]'](element));
        return $send(self, 'send', ["" + (render_engine) + "_" + (exception_found) + (element), params], user_proc.$to_proc());}, {$$s: self});
    })
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/utilities/color_helper/color/rgb/metallic"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $module = Opal.module, $slice = Opal.slice, $send = Opal.send, $to_a = Opal.to_a, $def = Opal.def, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('private,__named_color,new,metallic');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RGB');

    var $nesting = [self].concat($parent_nesting);

    
    $module($nesting[0], 'Metallic');
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      self.$private();
      return $def(self, '$metallic', function $$metallic(rgb, $a) {
        var $post_args, names, self = this;

        
        $post_args = $slice(arguments, 1);
        names = $post_args;
        return $send(self, '__named_color', [$$('Metallic'), $send(self, 'new', $to_a(rgb))].concat($to_a(names)));
      }, -2);
    })(Opal.get_singleton_class(self), $nesting);
    self.$metallic([153, 153, 153], "Aluminum");
    self.$metallic([217, 135, 25], "CoolCopper");
    self.$metallic([184, 115, 51], "Copper");
    self.$metallic([76, 76, 76], "Iron");
    self.$metallic([25, 25, 25], "Lead");
    self.$metallic([179, 179, 179], "Magnesium");
    self.$metallic([230, 230, 230], "Mercury");
    self.$metallic([128, 128, 128], "Nickel");
    self.$metallic([96, 0, 0], "PolySilicon", "Poly");
    self.$metallic([204, 204, 204], "Silver");
    self.$metallic([102, 102, 102], "Steel");
    self.$metallic([127, 127, 127], "Tin");
    return self.$metallic([51, 51, 51], "Tungsten");
  })($$('Color'), null, $nesting)
};

Opal.modules["atome/utilities/color_helper/color/rgb/colors"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $slice = Opal.slice, $send = Opal.send, $to_a = Opal.to_a, $def = Opal.def, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('private,__named_color,new,named');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RGB');

    var $nesting = [self].concat($parent_nesting);

    
    (function(self, $parent_nesting) {
      
      
      self.$private();
      return $def(self, '$named', function $$named(rgb, $a) {
        var $post_args, names, self = this;

        
        $post_args = $slice(arguments, 1);
        names = $post_args;
        return $send(self, '__named_color', [self, $send(self, 'new', $to_a(rgb))].concat($to_a(names)));
      }, -2);
    })(Opal.get_singleton_class(self), $nesting);
    self.$named([240, 248, 255], "AliceBlue");
    self.$named([250, 235, 215], "AntiqueWhite");
    self.$named([0, 255, 255], "Aqua");
    self.$named([127, 255, 212], "Aquamarine");
    self.$named([240, 255, 255], "Azure");
    self.$named([245, 245, 220], "Beige");
    self.$named([255, 228, 196], "Bisque");
    self.$named([102, 51, 153], "RebeccaPurple", "BeccaPurple");
    self.$named([0, 0, 0], "Black");
    self.$named([255, 235, 205], "BlanchedAlmond");
    self.$named([0, 0, 255], "Blue");
    self.$named([138, 43, 226], "BlueViolet");
    self.$named([165, 42, 42], "Brown");
    self.$named([222, 184, 135], "BurlyWood", "Burlywood");
    self.$named([95, 158, 160], "CadetBlue");
    self.$named([255, 94, 208], "Carnation");
    self.$named([141, 0, 0], "Cayenne");
    self.$named([127, 255, 0], "Chartreuse");
    self.$named([210, 105, 30], "Chocolate");
    self.$named([255, 127, 80], "Coral");
    self.$named([100, 149, 237], "CornflowerBlue");
    self.$named([255, 248, 220], "Cornsilk");
    self.$named([220, 20, 60], "Crimson");
    self.$named([0, 255, 255], "Cyan");
    self.$named([0, 0, 139], "DarkBlue");
    self.$named([0, 139, 139], "DarkCyan");
    self.$named([184, 134, 11], "DarkGoldenRod", "DarkGoldenrod");
    self.$named([169, 169, 169], "DarkGray", "DarkGrey");
    self.$named([0, 100, 0], "DarkGreen");
    self.$named([189, 183, 107], "DarkKhaki");
    self.$named([139, 0, 139], "DarkMagenta");
    self.$named([85, 107, 47], "DarkOliveGreen", "DarkoliveGreen");
    self.$named([255, 140, 0], "DarkOrange");
    self.$named([153, 50, 204], "DarkOrchid");
    self.$named([139, 0, 0], "DarkRed");
    self.$named([233, 150, 122], "DarkSalmon", "Darksalmon");
    self.$named([143, 188, 143], "DarkSeaGreen");
    self.$named([72, 61, 139], "DarkSlateBlue");
    self.$named([47, 79, 79], "DarkSlateGray", "DarkSlateGrey");
    self.$named([0, 206, 209], "DarkTurquoise");
    self.$named([148, 0, 211], "DarkViolet");
    self.$named([255, 140, 0], "Darkorange");
    self.$named([255, 20, 147], "DeepPink");
    self.$named([0, 191, 191], "DeepSkyBlue");
    self.$named([105, 105, 105], "DimGray", "DimGrey");
    self.$named([30, 144, 255], "DodgerBlue");
    self.$named([209, 146, 117], "Feldspar");
    self.$named([178, 34, 34], "FireBrick", "Firebrick");
    self.$named([255, 250, 240], "FloralWhite");
    self.$named([34, 139, 34], "ForestGreen");
    self.$named([255, 0, 255], "Fuchsia");
    self.$named([220, 220, 220], "Gainsboro");
    self.$named([248, 248, 255], "GhostWhite");
    self.$named([255, 215, 0], "Gold");
    self.$named([218, 165, 32], "GoldenRod", "Goldenrod");
    self.$named([128, 128, 128], "Gray", "Grey");
    self.$named([10, 10, 10, 100.0], "Gray10", "Grey10");
    self.$named([20, 20, 20, 100.0], "Gray20", "Grey20");
    self.$named([30, 30, 30, 100.0], "Gray30", "Grey30");
    self.$named([40, 40, 40, 100.0], "Gray40", "Grey40");
    self.$named([50, 50, 50, 100.0], "Gray50", "Grey50");
    self.$named([60, 60, 60, 100.0], "Gray60", "Grey60");
    self.$named([70, 70, 70, 100.0], "Gray70", "Grey70");
    self.$named([80, 80, 80, 100.0], "Gray80", "Grey80");
    self.$named([90, 90, 90, 100.0], "Gray90", "Grey90");
    self.$named([0, 128, 0], "Green");
    self.$named([173, 255, 47], "GreenYellow");
    self.$named([240, 255, 240], "HoneyDew", "Honeydew");
    self.$named([255, 105, 180], "HotPink");
    self.$named([205, 92, 92], "IndianRed");
    self.$named([75, 0, 130], "Indigo");
    self.$named([255, 255, 240], "Ivory");
    self.$named([240, 230, 140], "Khaki");
    self.$named([230, 230, 250], "Lavender");
    self.$named([255, 240, 245], "LavenderBlush");
    self.$named([124, 252, 0], "LawnGreen");
    self.$named([255, 250, 205], "LemonChiffon");
    self.$named([173, 216, 230], "LightBlue");
    self.$named([240, 128, 128], "LightCoral");
    self.$named([224, 255, 255], "LightCyan");
    self.$named([250, 250, 210], "LightGoldenRodYellow", "LightGoldenrodYellow");
    self.$named([211, 211, 211], "LightGray", "LightGrey");
    self.$named([144, 238, 144], "LightGreen");
    self.$named([255, 182, 193], "LightPink");
    self.$named([255, 160, 122], "LightSalmon", "Lightsalmon");
    self.$named([32, 178, 170], "LightSeaGreen");
    self.$named([135, 206, 250], "LightSkyBlue");
    self.$named([132, 112, 255], "LightSlateBlue");
    self.$named([119, 136, 153], "LightSlateGray", "LightSlateGrey");
    self.$named([176, 196, 222], "LightSteelBlue", "LightsteelBlue");
    self.$named([255, 255, 224], "LightYellow");
    self.$named([0, 255, 0], "Lime");
    self.$named([50, 205, 50], "LimeGreen");
    self.$named([250, 240, 230], "Linen");
    self.$named([255, 0, 255], "Magenta");
    self.$named([128, 0, 0], "Maroon");
    self.$named([102, 205, 170], "MediumAquaMarine", "MediumAquamarine");
    self.$named([0, 0, 205], "MediumBlue");
    self.$named([186, 85, 211], "MediumOrchid");
    self.$named([147, 112, 219], "MediumPurple");
    self.$named([60, 179, 113], "MediumSeaGreen");
    self.$named([123, 104, 238], "MediumSlateBlue");
    self.$named([0, 250, 154], "MediumSpringGreen");
    self.$named([72, 209, 204], "MediumTurquoise");
    self.$named([199, 21, 133], "MediumVioletRed");
    self.$named([25, 25, 112], "MidnightBlue");
    self.$named([245, 255, 250], "MintCream");
    self.$named([255, 228, 225], "MistyRose");
    self.$named([255, 228, 181], "Moccasin");
    self.$named([255, 222, 173], "NavajoWhite");
    self.$named([0, 0, 128], "Navy");
    self.$named([253, 245, 230], "OldLace");
    self.$named([128, 128, 0], "Olive");
    self.$named([107, 142, 35], "OliveDrab", "Olivedrab");
    self.$named([255, 165, 0], "Orange");
    self.$named([255, 69, 0], "OrangeRed");
    self.$named([218, 112, 214], "Orchid");
    self.$named([238, 232, 170], "PaleGoldenRod", "PaleGoldenrod");
    self.$named([152, 251, 152], "PaleGreen");
    self.$named([175, 238, 238], "PaleTurquoise");
    self.$named([219, 112, 147], "PaleVioletRed");
    self.$named([255, 239, 213], "PapayaWhip");
    self.$named([255, 218, 185], "PeachPuff", "Peachpuff");
    self.$named([205, 133, 63], "Peru");
    self.$named([255, 192, 203], "Pink");
    self.$named([221, 160, 221], "Plum");
    self.$named([176, 224, 230], "PowderBlue");
    self.$named([128, 0, 128], "Purple");
    self.$named([255, 0, 0], "Red");
    self.$named([188, 143, 143], "RosyBrown");
    self.$named([65, 105, 225], "RoyalBlue");
    self.$named([139, 69, 19], "SaddleBrown");
    self.$named([250, 128, 114], "Salmon");
    self.$named([244, 164, 96], "SandyBrown");
    self.$named([46, 139, 87], "SeaGreen");
    self.$named([255, 245, 238], "SeaShell", "Seashell");
    self.$named([160, 82, 45], "Sienna");
    self.$named([192, 192, 192], "Silver");
    self.$named([135, 206, 235], "SkyBlue");
    self.$named([106, 90, 205], "SlateBlue");
    self.$named([112, 128, 144], "SlateGray", "SlateGrey");
    self.$named([255, 250, 250], "Snow");
    self.$named([0, 255, 127], "SpringGreen");
    self.$named([70, 130, 180], "SteelBlue");
    self.$named([210, 180, 140], "Tan");
    self.$named([0, 128, 128], "Teal");
    self.$named([216, 191, 216], "Thistle");
    self.$named([255, 99, 71], "Tomato");
    self.$named([64, 224, 208], "Turquoise");
    self.$named([238, 130, 238], "Violet");
    self.$named([208, 32, 144], "VioletRed");
    self.$named([245, 222, 179], "Wheat");
    self.$named([255, 255, 255], "White");
    self.$named([245, 245, 245], "WhiteSmoke");
    self.$named([255, 255, 0], "Yellow");
    return self.$named([154, 205, 50], "YellowGreen");
  })($$('Color'), null, $nesting);
  return self.$require("atome/utilities/color_helper/color/rgb/colors.rb"+ '/../' + "metallic");
};

Opal.modules["atome/utilities/color_helper/color/rgb"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def, $to_ary = Opal.to_ary, $send = Opal.send, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $rb_times = Opal.rb_times, $rb_gt = Opal.rb_gt, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, $eqeq = Opal.eqeq, $rb_lt = Opal.rb_lt, $alias = Opal.alias, $eqeqeq = Opal.eqeqeq, $return_ivar = Opal.return_ivar, $to_a = Opal.to_a, $slice = Opal.slice, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,to_rgb,map,normalize,/,call,%,round,*,>,hex,red_p,green_p,blue_p,css_hsl,to_hsl,css_hsla,-,to_f,min,brightness,max,from_fraction,+,near_zero?,near_zero_or_less?,==,<,downcase,to_s,raise,**,to_xyz,[],mix_with,dup,r=,r,g=,g,b=,b,y,to_yiq,l,to_grayscale,normalize_percent,l=,s=,s,h=,h,flatten,empty?,===,to_lab,each,delta_e94,values_at,sqrt,class,-@,max_rgb_as_grayscale,html,instance_variable_set,private,new,to_proc,alias_method,scan,size,to_i,each_slice,join,fetch,__by_hex,html_hexify,from_html,__by_name,by_name,by_hex,union,keys,by_css,constants,length,const_set,names=,names,[]=,freeze');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RGB');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.r = $proto.g = $proto.b = nil;
    
    self.$include($$('Color'));
    $const_set($nesting[0], 'PDF_FORMAT_STR', "%.3f %.3f %.3f %s");
    
    $def(self, '$coerce', function $$coerce(other) {
      
      return other.$to_rgb()
    });
    
    $def(self, '$initialize', function $$initialize(r, g, b, radix) {
      var block = $$initialize.$$p || nil, $a, $b, self = this;

      $$initialize.$$p = null;
      
      ;
      if (r == null) r = 0;
      if (g == null) g = 0;
      if (b == null) b = 0;
      if (radix == null) radix = 255.0;
      $b = $send([r, g, b], 'map', [], function $$1(v){
        
        if (v == null) v = nil;
        return $$('Color').$normalize($rb_divide(v, radix));}), $a = $to_ary($b), (self.r = ($a[0] == null ? nil : $a[0])), (self.g = ($a[1] == null ? nil : $a[1])), (self.b = ($a[2] == null ? nil : $a[2])), $b;
      if ($truthy(block)) {
        return block.$call(self)
      } else {
        return nil
      };
    }, -1);
    
    $def(self, '$pdf_fill', function $$pdf_fill() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.r, self.g, self.b, "rg"])
    });
    
    $def(self, '$pdf_stroke', function $$pdf_stroke() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.r, self.g, self.b, "RG"])
    });
    
    $def(self, '$hex', function $$hex() {
      var self = this, r = nil, g = nil, b = nil;

      
      r = $rb_times(self.r, 255).$round();
      if ($truthy($rb_gt(r, 255))) {
        r = 255
      };
      g = $rb_times(self.g, 255).$round();
      if ($truthy($rb_gt(g, 255))) {
        g = 255
      };
      b = $rb_times(self.b, 255).$round();
      if ($truthy($rb_gt(b, 255))) {
        b = 255
      };
      return "%02x%02x%02x"['$%']([r, g, b]);
    });
    
    $def(self, '$html', function $$html() {
      var self = this;

      return "#" + (self.$hex())
    });
    
    $def(self, '$css_rgb', function $$css_rgb() {
      var self = this;

      return "rgb(%3.2f%%, %3.2f%%, %3.2f%%)"['$%']([self.$red_p(), self.$green_p(), self.$blue_p()])
    });
    
    $def(self, '$css_rgba', function $$css_rgba(alpha) {
      var self = this;

      
      if (alpha == null) alpha = 1;
      return "rgba(%3.2f%%, %3.2f%%, %3.2f%%, %3.2f)"['$%']([self.$red_p(), self.$green_p(), self.$blue_p(), alpha]);
    }, -1);
    
    $def(self, '$css_hsl', function $$css_hsl() {
      var self = this;

      return self.$to_hsl().$css_hsl()
    });
    
    $def(self, '$css_hsla', function $$css_hsla() {
      var self = this;

      return self.$to_hsl().$css_hsla()
    });
    
    $def(self, '$to_cmyk', function $$to_cmyk() {
      var self = this, c = nil, m = nil, y = nil, k = nil;

      
      c = $rb_minus(1.0, self.r.$to_f());
      m = $rb_minus(1.0, self.g.$to_f());
      y = $rb_minus(1.0, self.b.$to_f());
      k = [c, m, y].$min();
      k = $rb_minus(k, $rb_times(k, self.$brightness()));
      c = [1.0, [0.0, $rb_minus(c, k)].$max()].$min();
      m = [1.0, [0.0, $rb_minus(m, k)].$max()].$min();
      y = [1.0, [0.0, $rb_minus(y, k)].$max()].$min();
      k = [1.0, [0.0, k].$max()].$min();
      return $$$($$('Color'), 'CMYK').$from_fraction(c, m, y, k);
    });
    
    $def(self, '$to_rgb', function $$to_rgb(ignored) {
      var self = this;

      
      if (ignored == null) ignored = nil;
      return self;
    }, -1);
    
    $def(self, '$to_yiq', function $$to_yiq() {
      var self = this, y = nil, i = nil, q = nil;

      
      y = $rb_plus($rb_plus($rb_times(self.r, 0.299), $rb_times(self.g, 0.587)), $rb_times(self.b, 0.114));
      i = $rb_plus($rb_plus($rb_times(self.r, 0.596), $rb_times(self.g, -0.275)), $rb_times(self.b, -0.321));
      q = $rb_plus($rb_plus($rb_times(self.r, 0.212), $rb_times(self.g, -0.523)), $rb_times(self.b, 0.311));
      return $$$($$('Color'), 'YIQ').$from_fraction(y, i, q);
    });
    
    $def(self, '$to_hsl', function $$to_hsl() {
      var self = this, min = nil, max = nil, delta = nil, lum = nil, hue = nil, sat = nil, sixth = nil;

      
      min = [self.r, self.g, self.b].$min();
      max = [self.r, self.g, self.b].$max();
      delta = $rb_minus(max, min).$to_f();
      lum = $rb_divide($rb_plus(max, min), 2.0);
      if ($truthy($$('Color')['$near_zero?'](delta))) {
        
        hue = 0;
        sat = 0;
      } else {
        
        if ($truthy($$('Color')['$near_zero_or_less?']($rb_minus(lum, 0.5)))) {
          sat = $rb_divide(delta, $rb_plus(max, min).$to_f())
        } else {
          sat = $rb_divide(delta, $rb_minus($rb_minus(2, max), min).$to_f())
        };
        sixth = $rb_divide(1, 6.0);
        if ($eqeq(self.r, max)) {
          
          hue = $rb_times(sixth, $rb_divide($rb_minus(self.g, self.b), delta));
          if ($truthy($rb_lt(self.g, self.b))) {
            hue = $rb_plus(hue, 1.0)
          };
        } else if ($eqeq(self.g, max)) {
          hue = $rb_plus($rb_times(sixth, $rb_divide($rb_minus(self.b, self.r), delta)), $rb_divide(1.0, 3.0))
        } else if ($eqeq(self.b, max)) {
          hue = $rb_plus($rb_times(sixth, $rb_divide($rb_minus(self.r, self.g), delta)), $rb_divide(2.0, 3.0))
        };
        if ($truthy($rb_lt(hue, 0))) {
          hue = $rb_plus(hue, 1)
        };
        if ($truthy($rb_gt(hue, 1))) {
          hue = $rb_minus(hue, 1)
        };
      };
      return $$$($$('Color'), 'HSL').$from_fraction(hue, sat, lum);
    });
    
    $def(self, '$to_xyz', function $$to_xyz(color_space) {
      var $a, $b, self = this, r = nil, g = nil, b = nil;

      
      if (color_space == null) color_space = "sRGB";
      if (!$eqeq(color_space.$to_s().$downcase(), "srgb")) {
        self.$raise($$('ArgumentError'), "Unsupported colour space " + (color_space) + ".")
      };
      $b = $send([self.r, self.g, self.b], 'map', [], function $$2(v){
        
        if (v == null) v = nil;
        if ($truthy($rb_gt(v, 0.04045))) {
          return $rb_times($rb_divide($rb_plus(v, 0.055), 1.055)['$**'](2.4), 100)
        } else {
          return $rb_times($rb_divide(v, 12.92), 100)
        };}), $a = $to_ary($b), (r = ($a[0] == null ? nil : $a[0])), (g = ($a[1] == null ? nil : $a[1])), (b = ($a[2] == null ? nil : $a[2])), $b;
      return (new Map([["x", $rb_plus($rb_plus($rb_times(r, 0.4124564), $rb_times(g, 0.3575761)), $rb_times(b, 0.1804375))], ["y", $rb_plus($rb_plus($rb_times(r, 0.2126729), $rb_times(g, 0.7151522)), $rb_times(b, 0.072175))], ["z", $rb_plus($rb_plus($rb_times(r, 0.0193339), $rb_times(g, 0.119192)), $rb_times(b, 0.9503041))]]));
    }, -1);
    
    $def(self, '$to_lab', function $$to_lab(color_space, reference_white) {
      var $a, $b, self = this, xyz = nil, xr = nil, yr = nil, zr = nil, epsilon = nil, kappa = nil, fx = nil, fy = nil, fz = nil;

      
      if (color_space == null) color_space = "sRGB";
      if (reference_white == null) reference_white = [95.047, 100.0, 108.883];
      xyz = self.$to_xyz();
      xr = $rb_divide(xyz['$[]']("x"), reference_white['$[]'](0));
      yr = $rb_divide(xyz['$[]']("y"), reference_white['$[]'](1));
      zr = $rb_divide(xyz['$[]']("z"), reference_white['$[]'](2));
      epsilon = $rb_divide(216, 24389.0);
      kappa = $rb_divide(24389, 27.0);
      $b = $send([xr, yr, zr], 'map', [], function $$3(t){
        
        if (t == null) t = nil;
        if ($truthy($rb_gt(t, epsilon))) {
          return t['$**']($rb_divide(1.0, 3))
        } else {
          return $rb_divide($rb_plus($rb_times(kappa, t), 16), 116.0)
        };}), $a = $to_ary($b), (fx = ($a[0] == null ? nil : $a[0])), (fy = ($a[1] == null ? nil : $a[1])), (fz = ($a[2] == null ? nil : $a[2])), $b;
      return (new Map([["L", $rb_minus($rb_times(116, fy), 16)], ["a", $rb_times(500, $rb_minus(fx, fy))], ["b", $rb_times(200, $rb_minus(fy, fz))]]));
    }, -1);
    
    $def(self, '$lighten_by', function $$lighten_by(percent) {
      var self = this;

      return self.$mix_with($$('White'), percent)
    });
    
    $def(self, '$darken_by', function $$darken_by(percent) {
      var self = this;

      return self.$mix_with($$('Black'), percent)
    });
    
    $def(self, '$mix_with', function $$mix_with(mask, opacity) {
      var self = this, rgb = nil;

      
      opacity = $rb_divide(opacity, 100.0);
      rgb = self.$dup();
      rgb['$r=']($rb_plus($rb_times(self.r, opacity), $rb_times(mask.$r(), $rb_minus(1, opacity))));
      rgb['$g=']($rb_plus($rb_times(self.g, opacity), $rb_times(mask.$g(), $rb_minus(1, opacity))));
      rgb['$b=']($rb_plus($rb_times(self.b, opacity), $rb_times(mask.$b(), $rb_minus(1, opacity))));
      return rgb;
    });
    
    $def(self, '$brightness', function $$brightness() {
      var self = this;

      return self.$to_yiq().$y()
    });
    
    $def(self, '$to_grayscale', function $$to_grayscale() {
      var self = this;

      return $$$($$('Color'), 'GrayScale').$from_fraction(self.$to_hsl().$l())
    });
    $alias(self, "to_greyscale", "to_grayscale");
    
    $def(self, '$adjust_brightness', function $$adjust_brightness(percent) {
      var self = this, hsl = nil;

      
      percent = self.$normalize_percent(percent);
      hsl = self.$to_hsl();
      hsl['$l=']($rb_times(hsl.$l(), percent));
      return hsl.$to_rgb();
    });
    
    $def(self, '$adjust_saturation', function $$adjust_saturation(percent) {
      var self = this, hsl = nil;

      
      percent = self.$normalize_percent(percent);
      hsl = self.$to_hsl();
      hsl['$s=']($rb_times(hsl.$s(), percent));
      return hsl.$to_rgb();
    });
    
    $def(self, '$adjust_hue', function $$adjust_hue(percent) {
      var self = this, hsl = nil;

      
      percent = self.$normalize_percent(percent);
      hsl = self.$to_hsl();
      hsl['$h=']($rb_times(hsl.$h(), percent));
      return hsl.$to_rgb();
    });
    
    $def(self, '$closest_match', function $$closest_match(color_list, threshold_distance) {
      var self = this, $ret_or_1 = nil, lab = nil, closest_distance = nil, best_match = nil;

      
      if (threshold_distance == null) threshold_distance = 1000.0;
      color_list = [color_list].$flatten(1);
      if ($truthy(color_list['$empty?']())) {
        return nil
      };
      threshold_distance = (($eqeqeq("jnd", ($ret_or_1 = threshold_distance)) || ($eqeqeq("just_noticeable", $ret_or_1))) ? (2.3) : (threshold_distance.$to_f()));
      lab = self.$to_lab();
      closest_distance = threshold_distance;
      best_match = nil;
      $send(color_list, 'each', [], function $$4(c){var self = $$4.$$s == null ? this : $$4.$$s, distance = nil;

        
        if (c == null) c = nil;
        distance = self.$delta_e94(lab, c.$to_lab());
        if ($truthy($rb_lt(distance, closest_distance))) {
          
          closest_distance = distance;
          return (best_match = c);
        } else {
          return nil
        };}, {$$s: self});
      return best_match;
    }, -2);
    
    $def(self, '$delta_e94', function $$delta_e94(color_1, color_2, weighting_type) {
      var $a, $b, self = this, k_1 = nil, k_2 = nil, k_L = nil, k_C = nil, k_H = nil, l_1 = nil, a_1 = nil, b_1 = nil, l_2 = nil, a_2 = nil, b_2 = nil, delta_a = nil, delta_b = nil, c_1 = nil, c_2 = nil, delta_L = nil, delta_C = nil, delta_H2 = nil, s_L = nil, s_C = nil, s_H = nil, composite_L = nil, composite_C = nil, composite_H = nil;

      
      if (weighting_type == null) weighting_type = "graphic_arts";
      
      switch (weighting_type.valueOf()) {
        case "graphic_arts":
          
          k_1 = 0.045;
          k_2 = 0.015;
          k_L = 1;
          break;
        case "textiles":
          
          k_1 = 0.048;
          k_2 = 0.014;
          k_L = 2;
          break;
        default:
          self.$raise($$('ArgumentError'), "Unsupported weighting type " + (weighting_type) + ".")
      };
      k_C = (k_H = 1);
      $b = color_1.$values_at("L", "a", "b"), $a = $to_ary($b), (l_1 = ($a[0] == null ? nil : $a[0])), (a_1 = ($a[1] == null ? nil : $a[1])), (b_1 = ($a[2] == null ? nil : $a[2])), $b;
      $b = color_2.$values_at("L", "a", "b"), $a = $to_ary($b), (l_2 = ($a[0] == null ? nil : $a[0])), (a_2 = ($a[1] == null ? nil : $a[1])), (b_2 = ($a[2] == null ? nil : $a[2])), $b;
      delta_a = $rb_minus(a_1, a_2);
      delta_b = $rb_minus(b_1, b_2);
      c_1 = $$('Math').$sqrt($rb_plus(a_1['$**'](2), b_1['$**'](2)));
      c_2 = $$('Math').$sqrt($rb_plus(a_2['$**'](2), b_2['$**'](2)));
      delta_L = $rb_minus(color_1['$[]']("L"), color_2['$[]']("L"));
      delta_C = $rb_minus(c_1, c_2);
      delta_H2 = $rb_minus($rb_plus(delta_a['$**'](2), delta_b['$**'](2)), delta_C['$**'](2));
      s_L = 1;
      s_C = $rb_plus(1, $rb_times(k_1, c_1));
      s_H = $rb_plus(1, $rb_times(k_2, c_1));
      composite_L = $rb_divide(delta_L, $rb_times(k_L, s_L))['$**'](2);
      composite_C = $rb_divide(delta_C, $rb_times(k_C, s_C))['$**'](2);
      composite_H = $rb_divide(delta_H2, $rb_times(k_H, s_H)['$**'](2));
      return $$('Math').$sqrt($rb_plus($rb_plus(composite_L, composite_C), composite_H));
    }, -3);
    
    $def(self, '$red', function $$red() {
      var self = this;

      return $rb_times(self.r, 255.0)
    });
    
    $def(self, '$red_p', function $$red_p() {
      var self = this;

      return $rb_times(self.r, 100.0)
    });
    
    $def(self, '$r', $return_ivar("r"));
    
    $def(self, '$red=', function $RGB_red$eq$5(rr) {
      var self = this;

      return (self.r = $$('Color').$normalize($rb_divide(rr, 255.0)))
    });
    
    $def(self, '$red_p=', function $RGB_red_p$eq$6(rr) {
      var self = this;

      return (self.r = $$('Color').$normalize($rb_divide(rr, 100.0)))
    });
    
    $def(self, '$r=', function $RGB_r$eq$7(rr) {
      var self = this;

      return (self.r = $$('Color').$normalize(rr))
    });
    
    $def(self, '$green', function $$green() {
      var self = this;

      return $rb_times(self.g, 255.0)
    });
    
    $def(self, '$green_p', function $$green_p() {
      var self = this;

      return $rb_times(self.g, 100.0)
    });
    
    $def(self, '$g', $return_ivar("g"));
    
    $def(self, '$green=', function $RGB_green$eq$8(gg) {
      var self = this;

      return (self.g = $$('Color').$normalize($rb_divide(gg, 255.0)))
    });
    
    $def(self, '$green_p=', function $RGB_green_p$eq$9(gg) {
      var self = this;

      return (self.g = $$('Color').$normalize($rb_divide(gg, 100.0)))
    });
    
    $def(self, '$g=', function $RGB_g$eq$10(gg) {
      var self = this;

      return (self.g = $$('Color').$normalize(gg))
    });
    
    $def(self, '$blue', function $$blue() {
      var self = this;

      return $rb_times(self.b, 255.0)
    });
    
    $def(self, '$blue_p', function $$blue_p() {
      var self = this;

      return $rb_times(self.b, 100.0)
    });
    
    $def(self, '$b', $return_ivar("b"));
    
    $def(self, '$blue=', function $RGB_blue$eq$11(bb) {
      var self = this;

      return (self.b = $$('Color').$normalize($rb_divide(bb, 255.0)))
    });
    
    $def(self, '$blue_p=', function $RGB_blue_p$eq$12(bb) {
      var self = this;

      return (self.b = $$('Color').$normalize($rb_divide(bb, 100.0)))
    });
    
    $def(self, '$b=', function $RGB_b$eq$13(bb) {
      var self = this;

      return (self.b = $$('Color').$normalize(bb))
    });
    
    $def(self, '$+', function $RGB_$plus$14(other) {
      var self = this;

      return self.$class().$from_fraction($rb_plus(self.$r(), other.$r()), $rb_plus(self.$g(), other.$g()), $rb_plus(self.$b(), other.$b()))
    });
    
    $def(self, '$-', function $RGB_$minus$15(other) {
      var self = this;

      return $rb_plus(self, other['$-@']())
    });
    
    $def(self, '$max_rgb_as_grayscale', function $$max_rgb_as_grayscale() {
      var self = this;

      return $$$($$('Color'), 'GrayScale').$from_fraction([self.r, self.g, self.b].$max())
    });
    $alias(self, "max_rgb_as_greyscale", "max_rgb_as_grayscale");
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "RGB [" + (self.$html()) + "]"
    });
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return [self.$r(), self.$g(), self.$b()]
    });
    
    $def(self, '$-@', function $RGB_$minus$$16() {
      var self = this, rgb = nil;

      
      rgb = self.$dup();
      rgb.$instance_variable_set("@r", rgb.$r()['$-@']());
      rgb.$instance_variable_set("@g", rgb.$g()['$-@']());
      rgb.$instance_variable_set("@b", rgb.$b()['$-@']());
      return rgb;
    });
    self.$private();
    return $def(self, '$normalize_percent', function $$normalize_percent(percent) {
      
      
      percent = $rb_divide(percent, 100.0);
      percent = $rb_plus(percent, 1.0);
      percent = [percent, 2.0].$min();
      return [0.0, percent].$max();
    });
  })($$('Color'), null, $nesting);
  (function(self, $parent_nesting) {
    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$from_percentage', function $$from_percentage(r, g, b) {
      var block = $$from_percentage.$$p || nil, self = this;

      $$from_percentage.$$p = null;
      
      ;
      if (r == null) r = 0;
      if (g == null) g = 0;
      if (b == null) b = 0;
      return $send(self, 'new', [r, g, b, 100.0], block.$to_proc());
    }, -1);
    
    $def(self, '$from_fraction', function $$from_fraction(r, g, b) {
      var block = $$from_fraction.$$p || nil, self = this;

      $$from_fraction.$$p = null;
      
      ;
      if (r == null) r = 0.0;
      if (g == null) g = 0.0;
      if (b == null) b = 0.0;
      return $send(self, 'new', [r, g, b, 1.0], block.$to_proc());
    }, -1);
    
    $def(self, '$from_grayscale_fraction', function $$from_grayscale_fraction(l) {
      var block = $$from_grayscale_fraction.$$p || nil, self = this;

      $$from_grayscale_fraction.$$p = null;
      
      ;
      if (l == null) l = 0.0;
      return $send(self, 'new', [l, l, l, 1.0], block.$to_proc());
    }, -1);
    self.$alias_method("from_greyscale_fraction", "from_grayscale_fraction");
    
    $def(self, '$from_html', function $$from_html(html_colour) {
      var block = $$from_html.$$p || nil, self = this, h = nil;

      $$from_html.$$p = null;
      
      ;
      h = html_colour.$scan(/[0-9a-f]/i);
      
      switch (h.$size().valueOf()) {
        case 3:
          return $send(self, 'new', $to_a($send(h, 'map', [], function $$17(v){
            
            if (v == null) v = nil;
            return $rb_times(v, 2).$to_i(16);})), block.$to_proc())
        case 6:
          return $send(self, 'new', $to_a($send(h.$each_slice(2), 'map', [], function $$18(v){
            
            if (v == null) v = nil;
            return v.$join().$to_i(16);})), block.$to_proc())
        default:
          return self.$raise($$('ArgumentError'), "Not a supported HTML colour type.")
      };
    });
    
    $def(self, '$by_hex', function $$by_hex(hex) {
      var block = $$by_hex.$$p || nil, self = this;

      $$by_hex.$$p = null;
      
      ;
      try {
        return $send(self.$__by_hex(), 'fetch', [self.$html_hexify(hex)], function $$19(){var self = $$19.$$s == null ? this : $$19.$$s;

          return self.$from_html(hex)}, {$$s: self})
      } catch ($err) {
        if (Opal.rescue($err, [$$('StandardError')])) {
          try {
            if ($truthy(block)) {
              return block.$call()
            } else {
              return self.$raise()
            }
          } finally { Opal.pop_exception($err); }
        } else { throw $err; }
      };
    });
    
    $def(self, '$by_name', function $$by_name(name) {
      var block = $$by_name.$$p || nil, self = this;

      $$by_name.$$p = null;
      
      ;
      return $send(self.$__by_name(), 'fetch', [name.$to_s().$downcase()], block.$to_proc());
    });
    
    $def(self, '$by_css', function $$by_css(name_or_hex) {
      var block = $$by_css.$$p || nil, self = this;

      $$by_css.$$p = null;
      
      ;
      return $send(self, 'by_name', [name_or_hex], function $$20(){var self = $$20.$$s == null ? this : $$20.$$s;

        return $send(self, 'by_hex', [name_or_hex], block.$to_proc())}, {$$s: self});
    });
    return $def(self, '$extract_colors', function $$extract_colors(text, mode) {
      var self = this, regex = nil, $ret_or_1 = nil;

      
      if (mode == null) mode = "both";
      text = text.$downcase();
      regex = ($eqeqeq("name", ($ret_or_1 = mode)) ? ($$('Regexp').$union(self.$__by_name().$keys())) : ($eqeqeq("hex", $ret_or_1) ? ($$('Regexp').$union(self.$__by_hex().$keys())) : ($eqeqeq("both", $ret_or_1) ? ($$('Regexp').$union($rb_plus(self.$__by_hex().$keys(), self.$__by_name().$keys()))) : (nil))));
      return $send(text.$scan(regex), 'map', [], function $$21(match){var self = $$21.$$s == null ? this : $$21.$$s;

        
        if (match == null) match = nil;
        
        switch (mode.valueOf()) {
          case "name":
            return self.$by_name(match)
          case "hex":
            return self.$by_hex(match)
          case "both":
            return self.$by_css(match)
          default:
            return nil
        };}, {$$s: self});
    }, -2);
  })(Opal.get_singleton_class($$$($$('Color'), 'RGB')), $nesting);
  (function(self, $parent_nesting) {
    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$private();
    
    $def(self, '$__named_color', function $$__named_color(mod, rgb, $a) {
      var $post_args, names, self = this, used = nil;

      
      $post_args = $slice(arguments, 2);
      names = $post_args;
      used = $rb_minus(names, $send(mod.$constants(), 'map', [], "to_sym".$to_proc()));
      if ($truthy($rb_lt(used.$length(), names.$length()))) {
        self.$raise($$('ArgumentError'), "" + (names.$join(", ")) + " already defined in " + (mod))
      };
      $send(names, 'each', [], function $$22(n){
        
        if (n == null) n = nil;
        return mod.$const_set(n, rgb);});
      rgb['$names='](names);
      $send(rgb.$names(), 'each', [], function $$23(n){var $b, self = $$23.$$s == null ? this : $$23.$$s;

        
        if (n == null) n = nil;
        return ($b = [n, rgb], $send(self.$__by_name(), '[]=', $b), $b[$b.length - 1]);}, {$$s: self});
      self.$__by_hex()['$[]='](rgb.$hex(), rgb);
      return rgb.$freeze();
    }, -3);
    
    $def(self, '$__by_hex', function $$__by_hex() {
      var self = this, $ret_or_1 = nil;
      if (self.__by_hex == null) self.__by_hex = nil;

      return (self.__by_hex = ($truthy(($ret_or_1 = self.__by_hex)) ? ($ret_or_1) : ((new Map()))))
    });
    
    $def(self, '$__by_name', function $$__by_name() {
      var self = this, $ret_or_1 = nil;
      if (self.__by_name == null) self.__by_name = nil;

      return (self.__by_name = ($truthy(($ret_or_1 = self.__by_name)) ? ($ret_or_1) : ((new Map()))))
    });
    return $def(self, '$html_hexify', function $$html_hexify(hex) {
      var self = this, h = nil;

      
      h = hex.$to_s().$downcase().$scan(/[0-9a-f]/);
      
      switch (h.$size().valueOf()) {
        case 3:
          return $send(h, 'map', [], function $$24(v){
            
            if (v == null) v = nil;
            return $rb_times(v, 2);}).$join()
        case 6:
          return h.$join()
        default:
          return self.$raise($$('ArgumentError'), "Not a supported HTML colour type.")
      };
    });
  })(Opal.get_singleton_class($$$($$('Color'), 'RGB')), $nesting);
  return self.$require("atome/utilities/color_helper/color/rgb.rb"+ '/../' + "rgb/colors");
};

Opal.modules["atome/utilities/color_helper/color/cmyk"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def, $send = Opal.send, $to_ary = Opal.to_ary, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $to_a = Opal.to_a, $rb_times = Opal.rb_times, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, $alias = Opal.alias, $return_self = Opal.return_self, $return_ivar = Opal.return_ivar, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,to_cmyk,new,to_proc,map,normalize,/,call,%,html,to_rgb,css_rgb,css_rgba,css_hsl,to_hsl,css_hsla,from_fraction,adobe_cmyk_rgb,standard_cmyk_rgb,*,to_f,-,min,+,to_grayscale,cyan,magenta,yellow,black,to_yiq,c,m,y,k,private');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'CMYK');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.c = $proto.m = $proto.y = $proto.k = nil;
    
    self.$include($$('Color'));
    $const_set($nesting[0], 'PDF_FORMAT_STR', "%.3f %.3f %.3f %.3f %s");
    
    $def(self, '$coerce', function $$coerce(other) {
      
      return other.$to_cmyk()
    });
    (function(self, $parent_nesting) {
      
      
      
      $def(self, '$from_fraction', function $$from_fraction(c, m, y, k) {
        var block = $$from_fraction.$$p || nil, self = this;

        $$from_fraction.$$p = null;
        
        ;
        if (c == null) c = 0;
        if (m == null) m = 0;
        if (y == null) y = 0;
        if (k == null) k = 0;
        return $send(self, 'new', [c, m, y, k, 1.0], block.$to_proc());
      }, -1);
      return $def(self, '$from_percent', function $$from_percent(c, m, y, k) {
        var block = $$from_percent.$$p || nil, self = this;

        $$from_percent.$$p = null;
        
        ;
        if (c == null) c = 0;
        if (m == null) m = 0;
        if (y == null) y = 0;
        if (k == null) k = 0;
        return $send(self, 'new', [c, m, y, k], block.$to_proc());
      }, -1);
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$initialize', function $$initialize(c, m, y, k, radix) {
      var block = $$initialize.$$p || nil, $a, $b, self = this;

      $$initialize.$$p = null;
      
      ;
      if (c == null) c = 0;
      if (m == null) m = 0;
      if (y == null) y = 0;
      if (k == null) k = 0;
      if (radix == null) radix = 100.0;
      $b = $send([c, m, y, k], 'map', [], function $$1(v){
        
        if (v == null) v = nil;
        return $$('Color').$normalize($rb_divide(v, radix));}), $a = $to_ary($b), (self.c = ($a[0] == null ? nil : $a[0])), (self.m = ($a[1] == null ? nil : $a[1])), (self.y = ($a[2] == null ? nil : $a[2])), (self.k = ($a[3] == null ? nil : $a[3])), $b;
      if ($truthy(block)) {
        return block.$call(self)
      } else {
        return nil
      };
    }, -1);
    
    $def(self, '$pdf_fill', function $$pdf_fill() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.c, self.m, self.y, self.k, "k"])
    });
    
    $def(self, '$pdf_stroke', function $$pdf_stroke() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.c, self.m, self.y, self.k, "K"])
    });
    
    $def(self, '$html', function $$html() {
      var self = this;

      return self.$to_rgb().$html()
    });
    
    $def(self, '$css_rgb', function $$css_rgb() {
      var self = this;

      return self.$to_rgb().$css_rgb()
    });
    
    $def(self, '$css_rgba', function $$css_rgba(alpha) {
      var self = this;

      
      if (alpha == null) alpha = 1;
      return self.$to_rgb().$css_rgba(alpha);
    }, -1);
    
    $def(self, '$css_hsl', function $$css_hsl() {
      var self = this;

      return self.$to_hsl().$css_hsl()
    });
    
    $def(self, '$css_hsla', function $$css_hsla() {
      var self = this;

      return self.$to_hsl().$css_hsla()
    });
    
    $def(self, '$to_rgb', function $$to_rgb(use_adobe_method) {
      var self = this;

      
      if (use_adobe_method == null) use_adobe_method = false;
      if ($truthy(use_adobe_method)) {
        return $send($$$($$('Color'), 'RGB'), 'from_fraction', $to_a(self.$adobe_cmyk_rgb()))
      } else {
        return $send($$$($$('Color'), 'RGB'), 'from_fraction', $to_a(self.$standard_cmyk_rgb()))
      };
    }, -1);
    
    $def(self, '$to_grayscale', function $$to_grayscale() {
      var self = this, c = nil, m = nil, y = nil, g = nil;

      
      c = $rb_times(0.299, self.c.$to_f());
      m = $rb_times(0.587, self.m.$to_f());
      y = $rb_times(0.114, self.y.$to_f());
      g = $rb_minus(1.0, [1.0, $rb_plus($rb_plus($rb_plus(c, m), y), self.k)].$min());
      return $$$($$('Color'), 'GrayScale').$from_fraction(g);
    });
    $alias(self, "to_greyscale", "to_grayscale");
    
    $def(self, '$to_cmyk', $return_self);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "CMYK [%.2f%%, %.2f%%, %.2f%%, %.2f%%]"['$%']([self.$cyan(), self.$magenta(), self.$yellow(), self.$black()])
    });
    
    $def(self, '$to_yiq', function $$to_yiq() {
      var self = this;

      return self.$to_rgb().$to_yiq()
    });
    
    $def(self, '$to_hsl', function $$to_hsl() {
      var self = this;

      return self.$to_rgb().$to_hsl()
    });
    
    $def(self, '$cyan', function $$cyan() {
      var self = this;

      return $rb_times(self.c, 100.0)
    });
    
    $def(self, '$c', $return_ivar("c"));
    
    $def(self, '$cyan=', function $CMYK_cyan$eq$2(cc) {
      var self = this;

      return (self.c = $$('Color').$normalize($rb_divide(cc, 100.0)))
    });
    
    $def(self, '$c=', function $CMYK_c$eq$3(cc) {
      var self = this;

      return (self.c = $$('Color').$normalize(cc))
    });
    
    $def(self, '$magenta', function $$magenta() {
      var self = this;

      return $rb_times(self.m, 100.0)
    });
    
    $def(self, '$m', $return_ivar("m"));
    
    $def(self, '$magenta=', function $CMYK_magenta$eq$4(mm) {
      var self = this;

      return (self.m = $$('Color').$normalize($rb_divide(mm, 100.0)))
    });
    
    $def(self, '$m=', function $CMYK_m$eq$5(mm) {
      var self = this;

      return (self.m = $$('Color').$normalize(mm))
    });
    
    $def(self, '$yellow', function $$yellow() {
      var self = this;

      return $rb_times(self.y, 100.0)
    });
    
    $def(self, '$y', $return_ivar("y"));
    
    $def(self, '$yellow=', function $CMYK_yellow$eq$6(yy) {
      var self = this;

      return (self.y = $$('Color').$normalize($rb_divide(yy, 100.0)))
    });
    
    $def(self, '$y=', function $CMYK_y$eq$7(kk) {
      var self = this;

      return (self.y = $$('Color').$normalize(kk))
    });
    
    $def(self, '$black', function $$black() {
      var self = this;

      return $rb_times(self.k, 100.0)
    });
    
    $def(self, '$k', $return_ivar("k"));
    
    $def(self, '$black=', function $CMYK_black$eq$8(kk) {
      var self = this;

      return (self.k = $$('Color').$normalize($rb_divide(kk, 100.0)))
    });
    
    $def(self, '$k=', function $CMYK_k$eq$9(kk) {
      var self = this;

      return (self.k = $$('Color').$normalize(kk))
    });
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return [self.$c(), self.$m(), self.$y(), self.$k()]
    });
    self.$private();
    
    $def(self, '$adobe_cmyk_rgb', function $$adobe_cmyk_rgb() {
      var self = this;

      return $send([self.c, self.m, self.y], 'map', [], function $$10(v){var self = $$10.$$s == null ? this : $$10.$$s;
        if (self.k == null) self.k = nil;

        
        if (v == null) v = nil;
        return $rb_minus(1.0, [1.0, $rb_plus(v, self.k)].$min());}, {$$s: self})
    });
    return $def(self, '$standard_cmyk_rgb', function $$standard_cmyk_rgb() {
      var self = this;

      return $send([self.c, self.m, self.y], 'map', [], function $$11(v){var self = $$11.$$s == null ? this : $$11.$$s;

        
        if (v == null) v = nil;
        return $rb_minus(1.0, $rb_plus($rb_times(v, $rb_minus(1.0, self.$k())), self.$k()));}, {$$s: self})
    });
  })($$('Color'), null, $nesting)
};

Opal.modules["atome/utilities/color_helper/color/grayscale"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $send = Opal.send, $def = Opal.def, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $rb_times = Opal.rb_times, $rb_minus = Opal.rb_minus, $return_self = Opal.return_self, $alias = Opal.alias, $rb_plus = Opal.rb_plus, $return_ivar = Opal.return_ivar, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,new,to_proc,normalize,/,call,to_grayscale,%,min,round,*,private,to_255,gray,css_hsl,to_hsl,css_hsla,-,to_f,from_fraction,g,+,max,gray=,class,-@,dup,instance_variable_set');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'GrayScale');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.g = nil;
    
    self.$include($$('Color'));
    $const_set($nesting[0], 'PDF_FORMAT_STR', "%.3f %s");
    (function(self, $parent_nesting) {
      
      
      
      $def(self, '$from_fraction', function $$from_fraction(g) {
        var block = $$from_fraction.$$p || nil, self = this;

        $$from_fraction.$$p = null;
        
        ;
        if (g == null) g = 0;
        return $send(self, 'new', [g, 1.0], block.$to_proc());
      }, -1);
      return $def(self, '$from_percent', function $$from_percent(g) {
        var block = $$from_percent.$$p || nil, self = this;

        $$from_percent.$$p = null;
        
        ;
        if (g == null) g = 0;
        return $send(self, 'new', [g], block.$to_proc());
      }, -1);
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$initialize', function $$initialize(g, radix) {
      var block = $$initialize.$$p || nil, self = this;

      $$initialize.$$p = null;
      
      ;
      if (g == null) g = 0;
      if (radix == null) radix = 100.0;
      self.g = $$('Color').$normalize($rb_divide(g, radix));
      if ($truthy(block)) {
        return block.$call()
      } else {
        return nil
      };
    }, -1);
    
    $def(self, '$coerce', function $$coerce(other) {
      
      return other.$to_grayscale()
    });
    
    $def(self, '$pdf_fill', function $$pdf_fill() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.g, "g"])
    });
    
    $def(self, '$pdf_stroke', function $$pdf_stroke() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.g, "G"])
    });
    
    $def(self, '$to_255', function $$to_255() {
      var self = this;

      return [$rb_times(self.g, 255).$round(), 255].$min()
    });
    self.$private("to_255");
    
    $def(self, '$html', function $$html() {
      var self = this, gs = nil;

      
      gs = "%02x"['$%'](self.$to_255());
      return "#" + ($rb_times(gs, 3));
    });
    
    $def(self, '$css_rgb', function $$css_rgb() {
      var self = this;

      return "rgb(%3.2f%%, %3.2f%%, %3.2f%%)"['$%']([self.$gray(), self.$gray(), self.$gray()])
    });
    
    $def(self, '$css_rgba', function $$css_rgba(alpha) {
      var self = this;

      
      if (alpha == null) alpha = 1;
      return "rgba(%3.2f%%, %3.2f%%, %3.2f%%, %1.2f)"['$%']([self.$gray(), self.$gray(), self.$gray(), alpha]);
    }, -1);
    
    $def(self, '$css_hsl', function $$css_hsl() {
      var self = this;

      return self.$to_hsl().$css_hsl()
    });
    
    $def(self, '$css_hsla', function $$css_hsla() {
      var self = this;

      return self.$to_hsl().$css_hsla()
    });
    
    $def(self, '$to_cmyk', function $$to_cmyk() {
      var self = this, k = nil;

      
      k = $rb_minus(1.0, self.g.$to_f());
      return $$$($$('Color'), 'CMYK').$from_fraction(0, 0, 0, k);
    });
    
    $def(self, '$to_rgb', function $$to_rgb(ignored) {
      var self = this;

      
      if (ignored == null) ignored = true;
      return $$$($$('Color'), 'RGB').$from_fraction(self.$g(), self.$g(), self.$g());
    }, -1);
    
    $def(self, '$to_grayscale', $return_self);
    $alias(self, "to_greyscale", "to_grayscale");
    
    $def(self, '$lighten_by', function $$lighten_by(percent) {
      var self = this, g = nil;

      
      g = [$rb_plus(self.g, $rb_times(self.g, $rb_divide(percent, 100.0))), 1.0].$min();
      return $$$($$('Color'), 'GrayScale').$from_fraction(g);
    });
    
    $def(self, '$darken_by', function $$darken_by(percent) {
      var self = this, g = nil;

      
      g = [$rb_minus(self.g, $rb_times(self.g, $rb_divide(percent, 100.0))), 0.0].$max();
      return $$$($$('Color'), 'GrayScale').$from_fraction(g);
    });
    
    $def(self, '$to_yiq', function $$to_yiq() {
      var self = this, y = nil, i = nil, q = nil;

      
      y = self.g;
      i = $rb_plus($rb_plus($rb_times(self.g, 0.596), $rb_times(self.g, -0.275)), $rb_times(self.g, -0.321));
      q = $rb_plus($rb_plus($rb_times(self.g, 0.212), $rb_times(self.g, -0.523)), $rb_times(self.g, 0.311));
      return $$$($$('Color'), 'YIQ').$from_fraction(y, i, q);
    });
    
    $def(self, '$to_hsl', function $$to_hsl() {
      var self = this;

      return $$$($$('Color'), 'HSL').$from_fraction(0, 0, self.g)
    });
    
    $def(self, '$brightness', $return_ivar("g"));
    
    $def(self, '$gray', function $$gray() {
      var self = this;

      return $rb_times(self.g, 100.0)
    });
    $alias(self, "grey", "gray");
    
    $def(self, '$g', $return_ivar("g"));
    
    $def(self, '$gray=', function $GrayScale_gray$eq$1(gg) {
      var self = this;

      return (self.g = $$('Color').$normalize($rb_divide(gg, 100.0)))
    });
    $alias(self, "grey=", "gray=");
    
    $def(self, '$g=', function $GrayScale_g$eq$2(gg) {
      var self = this;

      return (self.g = $$('Color').$normalize(gg))
    });
    
    $def(self, '$+', function $GrayScale_$plus$3(other) {
      var self = this;

      return self.$class().$from_fraction($rb_plus(self.$g(), other.$to_grayscale().$g()))
    });
    
    $def(self, '$-', function $GrayScale_$minus$4(other) {
      var self = this;

      return $rb_plus(self, other['$-@']())
    });
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "Gray [%.2f%%]"['$%']([self.$gray()])
    });
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return [self.$g()]
    });
    return $def(self, '$-@', function $GrayScale_$minus$$5() {
      var self = this, gs = nil;

      
      gs = self.$dup();
      gs.$instance_variable_set("@g", self.$g()['$-@']());
      return gs;
    });
  })($$('Color'), null, $nesting);
  return $const_set($$('Color'), 'GreyScale', $$$($$('Color'), 'GrayScale'));
};

Opal.modules["atome/utilities/color_helper/color/hsl"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $send = Opal.send, $def = Opal.def, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $slice = Opal.slice, $to_a = Opal.to_a, $rb_plus = Opal.rb_plus, $return_ivar = Opal.return_ivar, $alias = Opal.alias, $rb_times = Opal.rb_times, $rb_lt = Opal.rb_lt, $rb_gt = Opal.rb_gt, $rb_minus = Opal.rb_minus, $return_self = Opal.return_self, $to_ary = Opal.to_ary, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,new,to_proc,to_hsl,normalize,/,call,html,to_rgb,css_rgb,css_rgba,%,hue,saturation,luminosity,near_zero_or_less?,l,near_one_or_more?,near_zero?,s,from_grayscale_fraction,+,compute_fvd_rgb,to_yiq,to_cmyk,from_fraction,to_greyscale,*,<,>,-,luminosity=,map,zip,to_a,coerce,class,h,private,fvd_mix_sat_lum,hue_to_rgb,rotate_hue,to_f');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'HSL');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.l = $proto.h = $proto.s = nil;
    
    self.$include($$('Color'));
    (function(self, $parent_nesting) {
      
      return $def(self, '$from_fraction', function $$from_fraction(h, s, l) {
        var block = $$from_fraction.$$p || nil, self = this;

        $$from_fraction.$$p = null;
        
        ;
        if (h == null) h = 0.0;
        if (s == null) s = 0.0;
        if (l == null) l = 0.0;
        return $send(self, 'new', [h, s, l, 1.0, 1.0], block.$to_proc());
      }, -1)
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$coerce', function $$coerce(other) {
      
      return other.$to_hsl()
    });
    
    $def(self, '$initialize', function $$initialize(h, s, l, radix1, radix2) {
      var block = $$initialize.$$p || nil, self = this;

      $$initialize.$$p = null;
      
      ;
      if (h == null) h = 0;
      if (s == null) s = 0;
      if (l == null) l = 0;
      if (radix1 == null) radix1 = 360.0;
      if (radix2 == null) radix2 = 100.0;
      self.h = $$('Color').$normalize($rb_divide(h, radix1));
      self.s = $$('Color').$normalize($rb_divide(s, radix2));
      self.l = $$('Color').$normalize($rb_divide(l, radix2));
      if ($truthy(block)) {
        return block.$call()
      } else {
        return nil
      };
    }, -1);
    
    $def(self, '$html', function $$html() {
      var self = this;

      return self.$to_rgb().$html()
    });
    
    $def(self, '$css_rgb', function $$css_rgb() {
      var self = this;

      return self.$to_rgb().$css_rgb()
    });
    
    $def(self, '$css_rgba', function $$css_rgba(alpha) {
      var self = this;

      
      if (alpha == null) alpha = 1;
      return self.$to_rgb().$css_rgba(alpha);
    }, -1);
    
    $def(self, '$css_hsl', function $$css_hsl() {
      var self = this;

      return "hsl(%3.2f, %3.2f%%, %3.2f%%)"['$%']([self.$hue(), self.$saturation(), self.$luminosity()])
    });
    
    $def(self, '$css_hsla', function $$css_hsla() {
      var self = this;

      return "hsla(%3.2f, %3.2f%%, %3.2f%%, %3.2f)"['$%']([self.$hue(), self.$saturation(), self.$luminosity(), 1])
    });
    
    $def(self, '$to_rgb', function $$to_rgb($a) {
      var $post_args, $fwd_rest, self = this;

      
      $post_args = $slice(arguments);
      $fwd_rest = $post_args;
      if ($truthy($$('Color')['$near_zero_or_less?'](self.$l()))) {
        return $$$($$$($$('Color'), 'RGB'), 'Black')
      } else if ($truthy($$('Color')['$near_one_or_more?'](self.$l()))) {
        return $$$($$$($$('Color'), 'RGB'), 'White')
      } else if ($truthy($$('Color')['$near_zero?'](self.$s()))) {
        return $$$($$('Color'), 'RGB').$from_grayscale_fraction(self.$l())
      } else {
        return $send($$$($$('Color'), 'RGB'), 'new', $to_a($rb_plus(self.$compute_fvd_rgb(), [1.0])))
      };
    }, -1);
    
    $def(self, '$to_yiq', function $$to_yiq() {
      var self = this;

      return self.$to_rgb().$to_yiq()
    });
    
    $def(self, '$to_cmyk', function $$to_cmyk() {
      var self = this;

      return self.$to_rgb().$to_cmyk()
    });
    
    $def(self, '$brightness', $return_ivar("l"));
    
    $def(self, '$to_greyscale', function $$to_greyscale() {
      var self = this;

      return $$$($$('Color'), 'GrayScale').$from_fraction(self.l)
    });
    $alias(self, "to_grayscale", "to_greyscale");
    
    $def(self, '$hue', function $$hue() {
      var self = this;

      return $rb_times(self.h, 360.0)
    });
    
    $def(self, '$h', $return_ivar("h"));
    
    $def(self, '$hue=', function $HSL_hue$eq$1(hh) {
      var self = this;

      
      hh = $rb_divide(hh, 360.0);
      if ($truthy($rb_lt(hh, 0.0))) {
        hh = $rb_plus(hh, 1.0)
      };
      if ($truthy($rb_gt(hh, 1.0))) {
        hh = $rb_minus(hh, 1.0)
      };
      return (self.h = $$('Color').$normalize(hh));
    });
    
    $def(self, '$h=', function $HSL_h$eq$2(hh) {
      var self = this;

      return (self.h = $$('Color').$normalize(hh))
    });
    
    $def(self, '$saturation', function $$saturation() {
      var self = this;

      return $rb_times(self.s, 100.0)
    });
    
    $def(self, '$s', $return_ivar("s"));
    
    $def(self, '$saturation=', function $HSL_saturation$eq$3(ss) {
      var self = this;

      return (self.s = $$('Color').$normalize($rb_divide(ss, 100.0)))
    });
    
    $def(self, '$s=', function $HSL_s$eq$4(ss) {
      var self = this;

      return (self.s = $$('Color').$normalize(ss))
    });
    
    $def(self, '$luminosity', function $$luminosity() {
      var self = this;

      return $rb_times(self.l, 100.0)
    });
    $alias(self, "lightness", "luminosity");
    
    $def(self, '$l', $return_ivar("l"));
    
    $def(self, '$luminosity=', function $HSL_luminosity$eq$5(ll) {
      var self = this;

      return (self.l = $$('Color').$normalize($rb_divide(ll, 100.0)))
    });
    $alias(self, "lightness=", "luminosity=");
    
    $def(self, '$l=', function $HSL_l$eq$6(ll) {
      var self = this;

      return (self.l = $$('Color').$normalize(ll))
    });
    
    $def(self, '$to_hsl', $return_self);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "HSL [%.2f deg, %.2f%%, %.2f%%]"['$%']([self.$hue(), self.$saturation(), self.$luminosity()])
    });
    
    $def(self, '$mix_with', function $$mix_with(color, mix_percent) {
      var self = this, v = nil;

      
      if (mix_percent == null) mix_percent = 0.5;
      v = $send(self.$to_a().$zip(self.$coerce(color).$to_a()), 'map', [], function $$7($mlhs_tmp1){var $a, $b, x = nil, y = nil;

        
        if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;
        $b = $mlhs_tmp1, $a = $to_ary($b), (x = ($a[0] == null ? nil : $a[0])), (y = ($a[1] == null ? nil : $a[1])), $b;
        return $rb_plus($rb_times($rb_minus(y, x), mix_percent), x);}, {$$has_top_level_mlhs_arg: true});
      return $send(self.$class(), 'from_fraction', $to_a(v));
    }, -2);
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return [self.$h(), self.$s(), self.$l()]
    });
    self.$private();
    
    $def(self, '$compute_fvd_rgb', function $$compute_fvd_rgb() {
      var $a, $b, self = this, t1 = nil, t2 = nil;

      
      $b = self.$fvd_mix_sat_lum(), $a = $to_ary($b), (t1 = ($a[0] == null ? nil : $a[0])), (t2 = ($a[1] == null ? nil : $a[1])), $b;
      return $send([$rb_plus(self.$h(), $rb_divide(1, 3.0)), self.$h(), $rb_minus(self.$h(), $rb_divide(1, 3.0))], 'map', [], function $$8(v){var self = $$8.$$s == null ? this : $$8.$$s;

        
        if (v == null) v = nil;
        return self.$hue_to_rgb(self.$rotate_hue(v), t1, t2);}, {$$s: self});
    });
    
    $def(self, '$fvd_mix_sat_lum', function $$fvd_mix_sat_lum() {
      var self = this, t = nil;

      
      t = ($truthy($$('Color')['$near_zero_or_less?']($rb_minus(self.$l(), 0.5))) ? ($rb_times(self.$l(), $rb_plus(1.0, self.$s().$to_f()))) : ($rb_minus($rb_plus(self.$l(), self.$s()), $rb_times(self.$l(), self.$s().$to_f()))));
      return [$rb_minus($rb_times(2.0, self.$l()), t), t];
    });
    
    $def(self, '$rotate_hue', function $$rotate_hue(h) {
      
      
      if ($truthy($$('Color')['$near_zero_or_less?'](h))) {
        h = $rb_plus(h, 1.0)
      };
      if ($truthy($$('Color')['$near_one_or_more?'](h))) {
        h = $rb_minus(h, 1.0)
      };
      return h;
    });
    return $def(self, '$hue_to_rgb', function $$hue_to_rgb(h, t1, t2) {
      
      if ($truthy($$('Color')['$near_zero_or_less?']($rb_minus($rb_times(6.0, h), 1.0)))) {
        return $rb_plus(t1, $rb_times($rb_times($rb_minus(t2, t1), h), 6.0))
      } else if ($truthy($$('Color')['$near_zero_or_less?']($rb_minus($rb_times(2.0, h), 1.0)))) {
        return t2
      } else if ($truthy($$('Color')['$near_zero_or_less?']($rb_minus($rb_times(3.0, h), 2.0)))) {
        return $rb_plus(t1, $rb_times($rb_times($rb_minus(t2, t1), $rb_minus($rb_divide(2, 3.0), h)), 6.0))
      } else {
        return t1
      }
    });
  })($$('Color'), null, $nesting)
};

Opal.modules["atome/utilities/color_helper/color/yiq"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $send = Opal.send, $defs = Opal.defs, $to_ary = Opal.to_ary, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $def = Opal.def, $return_self = Opal.return_self, $return_ivar = Opal.return_ivar, $alias = Opal.alias, $rb_times = Opal.rb_times, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,new,to_proc,map,normalize,/,call,to_yiq,to_grayscale,%,*,y,i,q');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'YIQ');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.y = $proto.i = $proto.q = nil;
    
    self.$include($$('Color'));
    $defs(self, '$from_fraction', function $$from_fraction(y, i, q) {
      var block = $$from_fraction.$$p || nil, self = this;

      $$from_fraction.$$p = null;
      
      ;
      if (y == null) y = 0;
      if (i == null) i = 0;
      if (q == null) q = 0;
      return $send(self, 'new', [y, i, q, 1.0], block.$to_proc());
    }, -1);
    
    $def(self, '$initialize', function $$initialize(y, i, q, radix) {
      var block = $$initialize.$$p || nil, $a, $b, self = this;

      $$initialize.$$p = null;
      
      ;
      if (y == null) y = 0;
      if (i == null) i = 0;
      if (q == null) q = 0;
      if (radix == null) radix = 100.0;
      $b = $send([y, i, q], 'map', [], function $$1(v){
        
        if (v == null) v = nil;
        return $$('Color').$normalize($rb_divide(v, radix));}), $a = $to_ary($b), (self.y = ($a[0] == null ? nil : $a[0])), (self.i = ($a[1] == null ? nil : $a[1])), (self.q = ($a[2] == null ? nil : $a[2])), $b;
      if ($truthy(block)) {
        return block.$call()
      } else {
        return nil
      };
    }, -1);
    
    $def(self, '$coerce', function $$coerce(other) {
      
      return other.$to_yiq()
    });
    
    $def(self, '$to_yiq', $return_self);
    
    $def(self, '$brightness', $return_ivar("y"));
    
    $def(self, '$to_grayscale', function $$to_grayscale() {
      var self = this;

      return $$$($$('Color'), 'GrayScale').$new(self.y)
    });
    $alias(self, "to_greyscale", "to_grayscale");
    
    $def(self, '$y', $return_ivar("y"));
    
    $def(self, '$y=', function $YIQ_y$eq$2(yy) {
      var self = this;

      return (self.y = $$('Color').$normalize(yy))
    });
    
    $def(self, '$i', $return_ivar("i"));
    
    $def(self, '$i=', function $YIQ_i$eq$3(ii) {
      var self = this;

      return (self.i = $$('Color').$normalize(ii))
    });
    
    $def(self, '$q', $return_ivar("q"));
    
    $def(self, '$q=', function $YIQ_q$eq$4(qq) {
      var self = this;

      return (self.q = $$('Color').$normalize(qq))
    });
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "YIQ [%.2f%%, %.2f%%, %.2f%%]"['$%']([$rb_times(self.y, 100), $rb_times(self.i, 100), $rb_times(self.q, 100)])
    });
    return $def(self, '$to_a', function $$to_a() {
      var self = this;

      return [self.$y(), self.$i(), self.$q()]
    });
  })($$('Color'), null, $nesting)
};

Opal.modules["atome/utilities/color_helper/color/css"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $send = Opal.send, $return_val = Opal.return_val, $defs = Opal.defs, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('by_name');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'CSS');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $defs(self, '$[]', function $CSS_$$$1(name) {
      
      return $send($$$($$('Color'), 'RGB'), 'by_name', [name], $return_val(nil))
    })
  })($$('Color'), $nesting)
};

Opal.modules["atome/utilities/color_helper/color"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $const_set = Opal.const_set, $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $send = Opal.send, $rb_le = Opal.rb_le, $rb_lt = Opal.rb_lt, $rb_minus = Opal.rb_minus, $rb_gt = Opal.rb_gt, $to_ary = Opal.to_ary, $alias = Opal.alias, $rb_ge = Opal.rb_ge, $range = Opal.range, $send2 = Opal.send2, $find_super = Opal.find_super, $eqeqeq = Opal.eqeqeq, $to_a = Opal.to_a, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('equivalent?,first,names,names=,uniq,sort,map,compact,flatten,Array,to_proc,alias_method,<=,abs,<,near_zero?,-,>,near_one?,kind_of?,all?,zip,to_a,coerce,near?,near_zero_or_less?,near_one_or_more?,normalize,end,begin,>=,to_i,normalize_to_range,normalize_byte,normalize_word,warn,const_defined?,const_get,upcase,to_s,===,new,==,size,from_html,to_hsl');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Color');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $const_set($nesting[0], 'COLOR_VERSION', "1.8");
    $klass($nesting[0], null, 'RGB');
    $klass($nesting[0], null, 'CMYK');
    $klass($nesting[0], null, 'HSL');
    $klass($nesting[0], null, 'GrayScale');
    $klass($nesting[0], null, 'YIQ');
    $const_set($nesting[0], 'COLOR_EPSILON', 1.0e-05);
    $const_set($nesting[0], 'COLOR_TOLERANCE', 0.0001);
    
    $def(self, '$==', function $Color_$eq_eq$1(other) {
      var self = this;

      return $$('Color')['$equivalent?'](self, other)
    });
    
    $def(self, '$name', function $$name() {
      var self = this;

      return self.$names().$first()
    });
    
    $def(self, '$names', function $$names() {
      var $a, self = this;
      if (self.names == null) self.names = nil;

      
      if (!$truthy((($a = self['names'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
        self['$names='](nil)
      };
      return self.names;
    });
    
    $def(self, '$names=', function $Color_names$eq$2(n) {
      var self = this;

      return (self.names = $send($send(self.$Array(n).$flatten().$compact(), 'map', [], "to_s".$to_proc()), 'map', [], "downcase".$to_proc()).$sort().$uniq())
    });
    return self.$alias_method("name=", "names=");
  })($nesting[0], $nesting);
  (function(self, $parent_nesting) {
    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$near_zero?', function $near_zero$ques$3(value) {
      
      return $rb_le(value.$abs(), $$$($$('Color'), 'COLOR_EPSILON'))
    });
    
    $def(self, '$near_zero_or_less?', function $near_zero_or_less$ques$4(value) {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = $rb_lt(value, 0.0)))) {
        return $ret_or_1
      } else {
        return self['$near_zero?'](value)
      }
    });
    
    $def(self, '$near_one?', function $near_one$ques$5(value) {
      var self = this;

      return self['$near_zero?']($rb_minus(value, 1.0))
    });
    
    $def(self, '$near_one_or_more?', function $near_one_or_more$ques$6(value) {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = $rb_gt(value, 1.0)))) {
        return $ret_or_1
      } else {
        return self['$near_one?'](value)
      }
    });
    
    $def(self, '$near?', function $near$ques$7(x, y) {
      
      return $rb_le($rb_minus(x, y).$abs(), $$$($$('Color'), 'COLOR_TOLERANCE'))
    });
    
    $def(self, '$equivalent?', function $equivalent$ques$8(a, b) {
      var self = this;

      
      if (!($truthy(a['$kind_of?']($$('Color'))) && ($truthy(b['$kind_of?']($$('Color')))))) {
        return false
      };
      return $send(a.$to_a().$zip(a.$coerce(b).$to_a()), 'all?', [], function $$9($mlhs_tmp1){var $a, $b, self = $$9.$$s == null ? this : $$9.$$s, x = nil, y = nil;

        
        if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;
        $b = $mlhs_tmp1, $a = $to_ary($b), (x = ($a[0] == null ? nil : $a[0])), (y = ($a[1] == null ? nil : $a[1])), $b;
        return self['$near?'](x, y);}, {$$s: self, $$has_top_level_mlhs_arg: true});
    });
    
    $def(self, '$coerce', function $$coerce(a, b) {
      
      return a.$coerce(b)
    });
    
    $def(self, '$normalize', function $$normalize(value) {
      var self = this;

      if ($truthy(self['$near_zero_or_less?'](value))) {
        return 0.0
      } else if ($truthy(self['$near_one_or_more?'](value))) {
        return 1.0
      } else {
        return value
      }
    });
    $alias(self, "normalize_fractional", "normalize");
    
    $def(self, '$normalize_to_range', function $$normalize_to_range(value, range) {
      
      
      if ($truthy($rb_lt(range.$end(), range.$begin()))) {
        range = Opal.Range.$new(range.$end(), range.$begin(), false)
      };
      if ($truthy($rb_le(value, range.$begin()))) {
        return range.$begin()
      } else if ($truthy($rb_ge(value, range.$end()))) {
        return range.$end()
      } else {
        return value
      };
    });
    
    $def(self, '$normalize_byte', function $$normalize_byte(value) {
      var self = this;

      return self.$normalize_to_range(value, $range(0, 255, false)).$to_i()
    });
    $alias(self, "normalize_8bit", "normalize_byte");
    
    $def(self, '$normalize_word', function $$normalize_word(value) {
      var self = this;

      return self.$normalize_to_range(value, $range(0, 65535, false)).$to_i()
    });
    return $alias(self, "normalize_16bit", "normalize_word");
  })(Opal.get_singleton_class($$('Color')), $nesting);
  self.$require("atome/utilities/color_helper/color.rb"+ '/../' + "color/rgb");
  self.$require("atome/utilities/color_helper/color.rb"+ '/../' + "color/cmyk");
  self.$require("atome/utilities/color_helper/color.rb"+ '/../' + "color/grayscale");
  self.$require("atome/utilities/color_helper/color.rb"+ '/../' + "color/hsl");
  self.$require("atome/utilities/color_helper/color.rb"+ '/../' + "color/yiq");
  self.$require("atome/utilities/color_helper/color.rb"+ '/../' + "color/css");
  return (function(self, $parent_nesting) {
    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$const_missing', function $$const_missing(name) {
      var $yield = $$const_missing.$$p || nil, self = this;

      $$const_missing.$$p = null;
      
      switch (name.valueOf()) {
        case "VERSION":
        case "VERSION":
        case "COLOR_TOOLS_VERSION":
        case "COLOR_TOOLS_VERSION":
          
          self.$warn("Color::" + (name) + " has been deprecated. Use Color::COLOR_VERSION instead.");
          return $$$($$('Color'), 'COLOR_VERSION');
        default:
          if ($truthy($$$($$('Color'), 'RGB')['$const_defined?'](name))) {
            
            self.$warn("Color::" + (name) + " has been deprecated. Use Color::RGB::" + (name) + " instead.");
            return $$$($$('Color'), 'RGB').$const_get(name);
          } else {
            return $send2(self, $find_super(self, 'const_missing', $$const_missing, false, true), 'const_missing', [name], $yield)
          }
      }
    });
    return $def(self, '$new', function $new$10(values, mode) {
      var self = this, color = nil, $ret_or_1 = nil;

      
      if (mode == null) mode = "rgb";
      self.$warn("Color.new has been deprecated. Use Color::" + (mode.$to_s().$upcase()) + ".new instead.");
      color = ($eqeqeq("hsl", ($ret_or_1 = mode)) ? ($send($$$($$('Color'), 'HSL'), 'new', $to_a(values))) : ($eqeqeq("rgb", $ret_or_1) ? (((values = [values].$flatten()), ($eqeq(values.$size(), 1) ? ($send($$$($$('Color'), 'RGB'), 'from_html', $to_a(values))) : ($send($$$($$('Color'), 'RGB'), 'new', $to_a(values)))))) : ($eqeqeq("cmyk", $ret_or_1) ? ($send($$$($$('Color'), 'CMYK'), 'new', $to_a(values))) : (nil))));
      return color.$to_hsl();
    }, -2);
  })(Opal.get_singleton_class($$('Color')), $nesting);
};

Opal.modules["atome/extensions/atome"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $find_super = Opal.find_super, $send2 = Opal.send2, $def = Opal.def, $klass = Opal.klass, $eqeq = Opal.eqeq, $rb_times = Opal.rb_times, $thrower = Opal.thrower, $rb_minus = Opal.rb_minus, $eqeqeq = Opal.eqeqeq, $gvars = Opal.gvars, $ensure_kwargs = Opal.ensure_kwargs, $get_kwarg = Opal.get_kwarg, $hash_get = Opal.hash_get, $rb_plus = Opal.rb_plus, $rb_gt = Opal.rb_gt, $rb_divide = Opal.rb_divide, $slice = Opal.slice, $hash_rehash = Opal.hash_rehash, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('key?,add_atomes_specificities,[],build_atome,to_proc,particle_list,puts,instance_variable_set,build_particle,build_sanitizer,[]=,initialized,set_atomes_specificities,build_render,build_molecule,add_to_molecule_list,is_a?,instance_exec,tools,build_template,build_code,build_test,preset_builder,include,to_h,map,reject,include?,merge,delete,grab,to_sym,app_identity,counter,atomes,==,atomes_ids,instance_of?,define_method,default_params,send,eval,new,object_id,*,global,call,<<,-,length,===,each,tag,uniq,+,Array,querySelector,addEventListener,Native,downcase,to_s,!,nil?,box,touch,height,bottom,top,shadow,drag,to_px,to_f,text,circle,data,preventDefault,>,to_i,readAsText,user_atomes,getElementById,stopPropagation,importer_all,exception_import,dup,lambda,id,attached,dig,found_area_used,/,left,width,compute,min,max,resize_object,instance_variable_get,update_style,parse');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'ObjectExtension');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$new', function $ObjectExtension_new$1(params) {
      var bloc = $ObjectExtension_new$1.$$p || nil, self = this, renderer_found = nil, render_method = nil, molecule = nil, tool_content = nil;

      $ObjectExtension_new$1.$$p = null;
      
      ;
      if ($truthy(params['$key?']("atome"))) {
        
        $$('Universe').$add_atomes_specificities(params['$[]']("atome"));
        $send($$('Genesis'), 'build_atome', [params['$[]']("atome")], bloc.$to_proc());
      } else if ($truthy(params['$key?']("particle"))) {
        if ($truthy($$('Universe').$particle_list()['$[]'](params['$[]']("particle")))) {
          self.$puts("particle " + (params['$[]']("particle")) + " already exist you can't create it")
        } else {
          
          $$('Atome').$instance_variable_set("@main_" + (params['$[]']("particle")), bloc);
          $send($$('Genesis'), 'build_particle', [params['$[]']("particle"), (new Map([["render", params['$[]']("render")], ["return", params['$[]']("return")], ["store", params['$[]']("store")], ["type", params['$[]']("type")], ["category", params['$[]']("category")]]))], bloc.$to_proc());
        }
      } else if ($truthy(params['$key?']("sanitizer"))) {
        $send($$('Genesis'), 'build_sanitizer', [params['$[]']("sanitizer")], bloc.$to_proc())
      } else if ($truthy(params['$key?']("pre"))) {
        $$('Atome').$instance_variable_set("@pre_" + (params['$[]']("pre")), bloc)
      } else if ($truthy(params['$key?']("post"))) {
        $$('Atome').$instance_variable_set("@post_" + (params['$[]']("post")), bloc)
      } else if ($truthy(params['$key?']("after"))) {
        $$('Atome').$instance_variable_set("@after_" + (params['$[]']("after")), bloc)
      } else if ($truthy(params['$key?']("initialized"))) {
        $$('Atome').$initialized()['$[]='](params['$[]']("initialized"), bloc)
      } else if ($truthy(params['$key?']("read"))) {
        $$('Atome').$instance_variable_set("@read_" + (params['$[]']("read")), bloc)
      } else if ($truthy(params['$[]']("renderer"))) {
        
        renderer_found = params['$[]']("renderer");
        if ($truthy(params['$[]']("specific"))) {
          
          $$('Universe').$set_atomes_specificities(params);
          params['$[]=']("specific", "" + (params['$[]']("specific")) + "_");
        };
        render_method = "" + (renderer_found) + "_" + (params['$[]']("specific")) + (params['$[]']("method"));
        $send($$('Genesis'), 'build_render', [render_method], bloc.$to_proc());
      } else if ($truthy(params['$key?']("molecule"))) {
        
        molecule = params['$[]']("molecule");
        $send($$('Genesis'), 'build_molecule', [molecule], bloc.$to_proc());
        $$('Universe').$add_to_molecule_list(molecule);
      } else if ($truthy(params['$key?']("tool"))) {
        
        if ($truthy(bloc['$is_a?']($$('Proc')))) {
          tool_content = $send($$('Atome'), 'instance_exec', [], bloc.$to_proc())
        };
        $$('Universe').$tools()['$[]='](params['$[]']("tool"), tool_content);
      } else if ($truthy(params['$key?']("template"))) {
        $send($$('A'), 'build_template', [], bloc.$to_proc())
      } else if ($truthy(params['$key?']("code"))) {
        $send($$('A'), 'build_code', [], bloc.$to_proc())
      } else if ($truthy(params['$key?']("test"))) {
        $send($$('A'), 'build_test', [], bloc.$to_proc())
      } else if ($truthy(params['$key?']("preset"))) {
        $send($$('Atome'), 'preset_builder', [params['$[]']("preset")], bloc.$to_proc())
      };
      if ($truthy(((self, $find_super(self, 'new', $ObjectExtension_new$1, true, false)) != null ? "super" : nil))) {
        return $send2(self, $find_super(self, 'new', $ObjectExtension_new$1, false, true), 'new', [params], bloc)
      } else {
        return nil
      };
    })
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.repeat = nil;
    
    self.$include($$('ObjectExtension'));
    
    $def(self, '$reorder_particles', function $$reorder_particles(hash_to_reorder) {
      var ordered_keys = nil, ordered_part = nil, other_part = nil;

      
      ordered_keys = ["renderers", "id", "alien", "type", "attach", "int8", "unit"];
      ordered_part = $send(ordered_keys, 'map', [], function $$2(k){
        
        if (k == null) k = nil;
        return [k, hash_to_reorder['$[]'](k)];}).$to_h();
      other_part = $send(hash_to_reorder, 'reject', [], function $$3(k, _){
        
        if (k == null) k = nil;
        if (_ == null) _ = nil;
        return ordered_keys['$include?'](k);});
      return ordered_part.$merge(other_part);
    });
    
    $def(self, '$delete', function $Object_delete$4(atomes) {
      var self = this;

      return self.$grab("view").$delete(atomes)
    });
    
    $def(self, '$identity_generator', function $$identity_generator() {
      
      return (((("a_") + ($$('Universe').$app_identity())) + "_") + ($$('Universe').$counter())).$to_sym()
    });
    
    $def(self, '$hook', function $$hook(a_id) {
      
      
      a_id = a_id.$to_sym();
      return $$('Universe').$atomes()['$[]'](a_id);
    });
    
    $def(self, '$grab', function $$grab(id_to_get) {
      var aid_to_get = nil;

      
      id_to_get = id_to_get.$to_sym();
      if ($eqeq(id_to_get, false)) {
        return nil
      };
      aid_to_get = $$('Universe').$atomes_ids()['$[]'](id_to_get);
      if ($truthy(aid_to_get['$instance_of?']($$('Array')))) {
        aid_to_get = ""
      };
      return $$('Universe').$atomes()['$[]'](aid_to_get);
    });
    
    $def(self, '$atome_method_for_object', function $$atome_method_for_object(element) {
      var $yield = $$atome_method_for_object.$$p || nil, self = this;

      $$atome_method_for_object.$$p = null;
      return $send($$('Object'), 'define_method', [element], function $$5(params){var user_proc = $$5.$$p || nil, self = $$5.$$s == null ? this : $$5.$$s, default_parent = nil, $ret_or_1 = nil;

        $$5.$$p = null;
        
        ;
        if (params == null) params = nil;
        default_parent = ($truthy(($ret_or_1 = $$('Essentials').$default_params()['$[]'](element)['$[]']("attach"))) ? ($ret_or_1) : ("view"));
        return $send(self.$grab(default_parent), 'send', [element, params], user_proc.$to_proc());}, {$$s: self})
    });
    
    $def(self, '$wait', function $$wait(time, id) {try { 
      var proc = $$wait.$$p || nil, obj = nil, unique_id = nil, $ret_or_1 = nil, callback_id = nil;

      $$wait.$$p = null;
      
      ;
      if (id == null) id = nil;
      if ($truthy(["kill", "kill"]['$include?'](time))) {
        $$('JS').$eval("clearTimeout(window.timeoutIds['" + (id) + "']);")
      } else {
        
        obj = $$('Object').$new();
        unique_id = obj.$object_id();
        id = ($truthy(($ret_or_1 = id)) ? ($ret_or_1) : (unique_id));
        time = $rb_times(time, 1000);
        callback_id = "myRubyCallback_" + (id);
        $$('JS').$global()['$[]='](callback_id.$to_sym(), proc);
        $$('JS').$eval("if (!window.timeoutIds) { window.timeoutIds = {}; } window.timeoutIds['" + (id) + "'] = setTimeout(function() { " + (callback_id) + "(); }, " + (time) + ");");
      };
      return id;} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, -2);
    
    $def(self, '$repeater', function $$repeater(counter, proc) {
      var self = this;

      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [counter], proc.$to_proc())
      } else {
        return nil
      }
    });
    
    $def(self, '$repeat_callback', function $$repeat_callback(params, counter) {
      var self = this;

      return self.repeat['$[]'](params).$call(counter)
    });
    
    $def(self, '$repeat', function $$repeat(delay, repeat) {try { 
      var proc = $$repeat.$$p || nil, self = this, $ret_or_1 = nil, repeat_id = nil;

      $$repeat.$$p = null;
      
      ;
      if (delay == null) delay = 1;
      if (repeat == null) repeat = 0;
      self.repeat = ($truthy(($ret_or_1 = self.repeat)) ? ($ret_or_1) : ([]));
      self.repeat['$<<'](proc);
      repeat_id = $rb_minus(self.repeat.$length(), 1);
      return $$('JS').$eval("          function repeat(action, interval, repetitions) {\n" + "         let count = 0;\n" + "         let intervalId = null;\n" + "\n" + "         function executeAction() {\n" + "             if (count < repetitions) {\n" + "                 action(count);\n" + "                 count++;\n" + "             } else {\n" + "                 clearInterval(intervalId);\n" + "             }\n" + "         }\n" + "\n" + "         executeAction(); // execute immediatly\n" + "         intervalId = setInterval(executeAction, interval);\n" + "         return intervalId;\n" + "     }\n" + "\n" + "     function myAction(counter) {\n" + "         rubyVMCallback(\"repeat_callback(" + (repeat_id) + ", \"+counter+\")\")\n" + "     }\n" + "\n" + "     const intervalId = repeat(myAction, " + (delay) + " * 1000, " + (repeat) + "); \n" + "\n" + "return intervalId;\n");} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, -1);
    
    $def(self, '$stop', function $$stop(params) {try { 
      var self = this, $ret_or_1 = nil, repeater_to_stop = nil;

      if ($eqeqeq($$('Hash'), ($ret_or_1 = params))) {
        if ($truthy(params['$key?']("repeat"))) {
          
          repeater_to_stop = params['$[]']("repeat");
          return $$('JS').$eval("clearInterval(" + (repeater_to_stop) + ");\n");
        } else {
          return self.$puts("La clé :repeat n'existe pas dans params")
        }
      } else {
        return self.$puts("params n'est pas un hash")
      }} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$tagged', function $$tagged(params) {
      var atome_get = nil;

      
      atome_get = [];
      if ($truthy(params['$instance_of?']($$('Hash')))) {
        $send(params, 'each', [], function $$6(tag_name, tag_value){
          
          if (tag_name == null) tag_name = nil;
          if (tag_value == null) tag_value = nil;
          return $send($$('Universe').$atomes(), 'each', [], function $$7(atomes_id_found, atomes_found){var $a;

            
            if (atomes_id_found == null) atomes_id_found = nil;
            if (atomes_found == null) atomes_found = nil;
            if (($truthy(($a = atomes_found.$tag(), ($a === nil || $a == null) ? nil : $a['$instance_of?']($$('Hash')))) && ($eqeq(atomes_found.$tag()['$[]'](tag_name), tag_value)))) {
              return atome_get['$<<'](atomes_id_found)
            } else {
              return nil
            };});})
      } else {
        $send($$('Universe').$atomes(), 'each', [], function $$8(atomes_id_found, atomes_found){var $a;

          
          if (atomes_id_found == null) atomes_id_found = nil;
          if (atomes_found == null) atomes_found = nil;
          if (($truthy(($a = atomes_found.$tag(), ($a === nil || $a == null) ? nil : $a['$instance_of?']($$('Hash')))) && ($truthy(atomes_found.$tag()['$[]'](params))))) {
            return atome_get['$<<'](atomes_id_found)
          } else {
            return nil
          };})
      };
      return atome_get;
    });
    $gvars.current_hovered_element = nil;
    
    $def(self, '$shortcut', function $$shortcut($kwargs) {
      var block = $$shortcut.$$p || nil, key, option, affect, exclude, self = this, element_ids = nil;

      $$shortcut.$$p = null;
      
      ;
      $kwargs = $ensure_kwargs($kwargs);
      key = $get_kwarg($kwargs, "key");
      
      option = $hash_get($kwargs, "option");if (option == null) option = nil;
      
      affect = $hash_get($kwargs, "affect");if (affect == null) affect = "all";
      
      exclude = $hash_get($kwargs, "exclude");if (exclude == null) exclude = [];
      element_ids = $rb_plus(self.$Array(affect), self.$Array(exclude)).$uniq();
      $send(element_ids, 'each', [], function $$9(element_id){var element = nil;

        
        if (element_id == null) element_id = nil;
        element = $$('JS').$global()['$[]']("document").$querySelector("#" + (element_id));
        if ($eqeq(element_id.$to_sym(), "all")) {
          return nil
        } else {
          
          $send(element, 'addEventListener', ["mouseenter"], function $$10(){
            return ($gvars.current_hovered_element = element_id)});
          return $send(element, 'addEventListener', ["mouseleave"], function $$11(){
            return ($gvars.current_hovered_element = nil)});
        };});
      return $send($$('JS').$global()['$[]']("document"), 'addEventListener', ["keydown"], function $$12(native_event){var self = $$12.$$s == null ? this : $$12.$$s, event = nil, key_pressed = nil, ctrl_pressed = nil, alt_pressed = nil, meta_pressed = nil, modifier_matched = nil, $ret_or_1 = nil, affect_condition = nil, exclude_condition = nil;
        if ($gvars.current_hovered_element == null) $gvars.current_hovered_element = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        key_pressed = event['$[]']("key").$to_s().$downcase();
        ctrl_pressed = event['$[]']("ctrlKey").$to_s();
        alt_pressed = event['$[]']("altKey").$to_s();
        meta_pressed = event['$[]']("metaKey").$to_s();
        modifier_matched = ($eqeqeq("ctrl", ($ret_or_1 = option)) ? (ctrl_pressed) : ($eqeqeq("alt", $ret_or_1) ? (alt_pressed) : ($eqeqeq("meta", $ret_or_1) ? (meta_pressed) : (true))));
        affect_condition = ($truthy(($ret_or_1 = affect['$==']("all"))) ? ($ret_or_1) : (self.$Array(affect)['$include?']($gvars.current_hovered_element)));
        exclude_condition = self.$Array(exclude)['$include?']($gvars.current_hovered_element)['$!']();
        if ($truthy($gvars.current_hovered_element['$nil?']())) {
          $gvars.current_hovered_element = "view"
        };
        if (((($eqeq(key_pressed, key.$to_s().$downcase()) && ($truthy(modifier_matched))) && ($truthy(affect_condition))) && ($truthy(exclude_condition)))) {
          return block.$call(key_pressed, $gvars.current_hovered_element)
        } else {
          return nil
        };}, {$$s: self});
    });
    
    $def(self, '$console', function $$console(debug) {try { 
      var self = this, console = nil, console_back = nil, console_top = nil, console_output = nil, console_clear = nil;

      if ($truthy(debug)) {
        
        console = self.$box((new Map([["id", "console"], ["width", "auto"], ["height", 225], ["bottom", 0], ["top", "auto"], ["left", 0], ["right", 0], ["depth", 30], ["color", (new Map([["alpha", 0], ["red", 0], ["green", 0], ["blue", 0]]))]])));
        console_back = console.$box((new Map([["id", "console_back"], ["blur", (new Map([["value", 5], ["affect", "back"]]))], ["overflow", "auto"], ["width", "auto"], ["height", "auto"], ["top", 25], ["bottom", 0], ["left", 0], ["right", 0], ["depth", 30], ["color", (new Map([["alpha", 0.5], ["red", 0], ["green", 0], ["blue", 0]]))]])));
        console_top = console.$box((new Map([["id", "console_top"], ["overflow", "auto"], ["width", "auto"], ["height", 25], ["top", 0], ["bottom", 0], ["left", 0], ["right", 0], ["depth", 30], ["color", (new Map([["alpha", 1], ["red", 0.3], ["green", 0.3], ["blue", 0.3]]))]])));
        $send(console_top, 'touch', ["double"], function $$13(){
          
          console.$height(25);
          console.$bottom(0);
          return console.$top("auto");});
        console_top.$shadow((new Map([["id", "s1"], ["left", 0], ["top", 3], ["blur", 9], ["invert", false], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 1]])));
        $send(console, 'drag', ["locked"], function $$14(event){var self = $$14.$$s == null ? this : $$14.$$s, dy = nil, y = nil, total_height = nil;

          
          if (event == null) event = nil;
          dy = event['$[]']("dy");
          y = $rb_plus(console.$to_px("top"), dy.$to_f());
          console.$top(y);
          console.$height("auto");
          return (total_height = self.$grab("view").$to_px("height"));}, {$$s: self});
        console_output = console_back.$text((new Map([["data", ""], ["id", "console_output"], ["component", (new Map([["size", 12]]))]])));
        $$('JS').$eval("(function() {\n" + "  var oldLog = console.log;\n" + "  var consoleDiv = document.getElementById(\"console_output\");\n" + "  console.log = function(message) {\n" + "    if (consoleDiv) {\n" + "      consoleDiv.innerHTML += '<p>' + message + '</p>';\n" + "    }\n" + "    oldLog.apply(console, arguments);\n" + "  };\n" + "}());\n");
        console_clear = console_top.$circle((new Map([["id", "console_clear"], ["color", "red"], ["top", 3], ["left", 3], ["width", 19], ["height", 19]])));
        $send(console_clear, 'touch', [true], function $$15(){
          return console_output.$data("")});
        return $send($$('JS').$global()['$[]']("document"), 'addEventListener', ["contextmenu"], function $$16(event){
          
          if (event == null) event = nil;
          return nil;});
      } else {
        
        self.$grab("console_back").$delete(true);
        return $send($$('JS').$global()['$[]']("document"), 'addEventListener', ["contextmenu"], function $$17(native_event){var self = $$17.$$s == null ? this : $$17.$$s, event = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          return event.$preventDefault();}, {$$s: self});
      }} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$importer_all', function $$importer_all() {try { 
      var proc = $$importer_all.$$p || nil, self = this;

      $$importer_all.$$p = null;
      
      ;
      $send($$('JS').$global()['$[]']("document")['$[]']("body"), 'addEventListener', ["dragover"], function $$18(native_event){var self = $$18.$$s == null ? this : $$18.$$s, event = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        return event.$preventDefault();}, {$$s: self});
      return $send($$('JS').$global()['$[]']("document")['$[]']("body"), 'addEventListener', ["drop"], function $$19(native_event){var self = $$19.$$s == null ? this : $$19.$$s, event = nil, files = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        event.$preventDefault();
        files = event['$[]']("dataTransfer")['$[]']("files");
        if ($truthy($rb_gt(files['$[]']("length").$to_i(), 0))) {
          return $send(Opal.Range.$new(0,files['$[]']("length").$to_i(), true), 'each', [], function $$20(i){var self = $$20.$$s == null ? this : $$20.$$s, file = nil, reader = nil;

            
            if (i == null) i = nil;
            file = files['$[]'](i);
            reader = $$('JS').$eval("let a= new FileReader(); return a");
            reader.$readAsText(file);
            $send(reader, 'addEventListener', ["load"], function $$21(){
              return proc.$call((new Map([["content", reader['$[]']("result").$to_s()], ["name", file['$[]']("name").$to_s()], ["type", file['$[]']("type").$to_s()], ["size", file['$[]']("size").$to_s()]])))});
            return $send(reader, 'addEventListener', ["error"], function $$22(){var self = $$22.$$s == null ? this : $$22.$$s;

              return self.$puts($rb_plus("Error: ", file['$[]']("name").$to_s()))}, {$$s: self});}, {$$s: self})
        } else {
          return nil
        };}, {$$s: self});} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$exception_import', function $$exception_import(atome_id) {try { 
      var proc = $$exception_import.$$p || nil, self = this, special_div = nil;

      $$exception_import.$$p = null;
      
      ;
      if ($truthy($$('Universe').$user_atomes()['$include?'](atome_id.$to_sym()))) {
        
        special_div = $$('JS').$global()['$[]']("document").$getElementById(atome_id);
        $send(special_div, 'addEventListener', ["dragover"], function $$23(native_event){var self = $$23.$$s == null ? this : $$23.$$s, event = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          special_div['$[]']("style")['$[]=']("backgroundColor", "red");
          event.$preventDefault();
          return event.$stopPropagation();}, {$$s: self});
        $send(special_div, 'addEventListener', ["dragleave"], function $$24(native_event){var self = $$24.$$s == null ? this : $$24.$$s, event = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          special_div['$[]']("style")['$[]=']("backgroundColor", "yellow");
          return event.$stopPropagation();}, {$$s: self});
        $send(special_div, 'addEventListener', ["drop"], function $$25(native_event){var self = $$25.$$s == null ? this : $$25.$$s, event = nil, files = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          event.$preventDefault();
          event.$stopPropagation();
          files = event['$[]']("dataTransfer")['$[]']("files");
          if ($truthy($rb_gt(files['$[]']("length").$to_i(), 0))) {
            return $send(Opal.Range.$new(0,files['$[]']("length").$to_i(), true), 'each', [], function $$26(i){var self = $$26.$$s == null ? this : $$26.$$s, file = nil, reader = nil;

              
              if (i == null) i = nil;
              file = files['$[]'](i);
              reader = $$('JS').$eval("let a= new FileReader(); return a");
              reader.$readAsText(file);
              $send(reader, 'addEventListener', ["load"], function $$27(){
                return proc.$call((new Map([["content", reader['$[]']("result").$to_s()], ["name", file['$[]']("name").$to_s()], ["type", file['$[]']("type").$to_s()], ["size", file['$[]']("size").$to_s()]])))});
              return $send(reader, 'addEventListener', ["error"], function $$28(){var self = $$28.$$s == null ? this : $$28.$$s;

                return self.$puts($rb_plus("Error: ", file['$[]']("name").$to_s()))}, {$$s: self});}, {$$s: self})
          } else {
            return nil
          };}, {$$s: self});
        return $send($$('JS').$global()['$[]']("document")['$[]']("body"), 'addEventListener', ["drop"], function $$29(native_event){var self = $$29.$$s == null ? this : $$29.$$s, event = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          event.$preventDefault();
          return event.$stopPropagation();}, {$$s: self});
      } else {
        return nil
      };} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$importer', function $$importer(target) {
      var proc = $$importer.$$p || nil, self = this;

      $$importer.$$p = null;
      
      ;
      if (target == null) target = "all";
      if ($eqeq(target, "all")) {
        return $send(self, 'importer_all', [], proc.$to_proc())
      } else {
        return $send(self, 'exception_import', [target], proc.$to_proc())
      };
    }, -1);
    
    $def(self, '$infos', function $$infos() {try { 
      var $a, self = this, particle_list = nil, infos = nil;

      
      particle_list = $$('Universe').$particle_list().$dup();
      particle_list.$delete("password");
      particle_list.$delete("selection");
      infos = (new Map());
      particle_list['$[]=']("css", "poil");
      $send(particle_list, 'each', [], function $$30(particle_found){var $a, self = $$30.$$s == null ? this : $$30.$$s;

        
        if (particle_found == null) particle_found = nil;
        if ($truthy(self.$send(particle_found['$[]'](0))['$nil?']())) {
          return nil
        } else {
          return ($a = [particle_found['$[]'](0), self.$send(particle_found['$[]'](0))], $send(infos, '[]=', $a), $a[$a.length - 1])
        };}, {$$s: self});
      infos['$[]=']("css", ($a = infos['$[]']("css").$to_s(), typeof Opal.compile === 'function' ? eval(Opal.compile($a, {scope_variables: ["particle_list", "infos"], arity_check: false, file: '(eval)', eval: true})) : self.$eval($a)));
      return infos;} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$dig', function $$dig() {
      var self = this, ids = nil, dig_recursive = nil;

      
      ids = [];
      dig_recursive = $send(self, 'lambda', [], function $$31(atome){var self = $$31.$$s == null ? this : $$31.$$s;

        
        if (atome == null) atome = nil;
        ids['$<<'](atome.$id());
        return $send(atome.$attached(), 'each', [], function $$32(attached_atome){var self = $$32.$$s == null ? this : $$32.$$s;

          
          if (attached_atome == null) attached_atome = nil;
          return dig_recursive.$call(self.$grab(attached_atome));}, {$$s: self});}, {$$s: self});
      dig_recursive.$call(self);
      return ids;
    });
    
    $def(self, '$fit', function $$fit(params) {
      var self = this, target_size = nil, axis = nil, objet_atome = nil, atomes_found = nil, total_width = nil, total_height = nil, ratio = nil;

      
      if (!$truthy(params['$instance_of?']($$('Hash')))) {
        params = (new Map([["value", params]]))
      };
      target_size = params['$[]']("value");
      axis = params['$[]']("axis");
      objet_atome = self;
      atomes_found = objet_atome.$dig();
      total_width = $rb_minus(self.$found_area_used(atomes_found)['$[]']("max")['$[]']("x"), self.$found_area_used(atomes_found)['$[]']("min")['$[]']("x"));
      total_height = $rb_minus(self.$found_area_used(atomes_found)['$[]']("max")['$[]']("y"), self.$found_area_used(atomes_found)['$[]']("min")['$[]']("y"));
      if ($eqeq(axis, "x")) {
        
        ratio = $rb_divide(target_size, total_width);
        return $send(atomes_found, 'each', [], function $$33(atome_id){var self = $$33.$$s == null ? this : $$33.$$s, current_atome = nil, new_width = nil, new_height = nil;

          
          if (atome_id == null) atome_id = nil;
          current_atome = self.$grab(atome_id);
          current_atome.$left($rb_times(current_atome.$left(), ratio));
          current_atome.$top($rb_times(current_atome.$top(), ratio));
          new_width = $rb_times(current_atome.$to_px("width"), ratio);
          new_height = $rb_times(current_atome.$to_px("height"), ratio);
          current_atome.$width(new_width);
          return current_atome.$height(new_height);}, {$$s: self});
      } else {
        
        ratio = $rb_divide(target_size, total_height);
        return $send(atomes_found, 'each', [], function $$34(atome_id){var self = $$34.$$s == null ? this : $$34.$$s, current_atome = nil;

          
          if (atome_id == null) atome_id = nil;
          current_atome = self.$grab(atome_id);
          current_atome.$left($rb_times(current_atome.$left(), ratio));
          current_atome.$top($rb_times(current_atome.$top(), ratio));
          current_atome.$width($rb_times(current_atome.$to_px("width"), ratio));
          return current_atome.$height($rb_times(current_atome.$to_px("height"), ratio));}, {$$s: self});
      };
    });
    
    $def(self, '$found_area_used', function $$found_area_used(ids) {
      var $a, self = this, min_x = nil, min_y = nil, max_x = nil, max_y = nil;

      
      $a = [$$$($$('Float'), 'INFINITY'), $$$($$('Float'), 'INFINITY')], (min_x = $a[0]), (min_y = $a[1]), $a;
      $a = [0, 0], (max_x = $a[0]), (max_y = $a[1]), $a;
      $send(ids, 'each', [], function $$35(id){var self = $$35.$$s == null ? this : $$35.$$s, atome = nil, x = nil, y = nil, width = nil, height = nil;

        
        if (id == null) id = nil;
        atome = self.$grab(id);
        x = atome.$compute((new Map([["particle", "left"]])))['$[]']("value");
        y = atome.$compute((new Map([["particle", "top"]])))['$[]']("value");
        width = atome.$to_px("width");
        height = atome.$to_px("height");
        min_x = [min_x, x].$min();
        min_y = [min_y, y].$min();
        max_x = [max_x, $rb_plus(x, width)].$max();
        return (max_y = [max_y, $rb_plus(y, height)].$max());}, {$$s: self});
      return (new Map([["min", (new Map([["x", min_x], ["y", min_y]]))], ["max", (new Map([["x", max_x], ["y", max_y]]))]]));
    });
    
    $def(self, '$calculate_total_size', function $$calculate_total_size(objet_atome, axis) {
      var self = this, total_size = nil, max_other_axis_size = nil;

      
      total_size = ($eqeq(axis, "x") ? (objet_atome.$to_px("width")) : (objet_atome.$to_px("height")));
      max_other_axis_size = ($eqeq(axis, "x") ? (objet_atome.$to_px("height")) : (objet_atome.$to_px("width")));
      $send(objet_atome.$attached(), 'each', [], function $$36(child_id){var self = $$36.$$s == null ? this : $$36.$$s, child = nil, child_size = nil, other_axis_size = nil;

        
        if (child_id == null) child_id = nil;
        child = self.$grab(child_id);
        child_size = ($eqeq(axis, "x") ? (child.$to_px("width")) : (child.$to_px("height")));
        other_axis_size = ($eqeq(axis, "x") ? (child.$to_px("height")) : (child.$to_px("width")));
        total_size = $rb_plus(total_size, child_size);
        return (max_other_axis_size = [max_other_axis_size, other_axis_size].$max());}, {$$s: self});
      return [total_size, max_other_axis_size];
    });
    
    $def(self, '$resize_and_reposition', function $$resize_and_reposition(objet_atome, scale_factor, axis, max_other_axis_size) {
      var self = this, current_position = nil;

      
      current_position = 0;
      self.$resize_object(objet_atome, scale_factor, axis, max_other_axis_size);
      current_position = $rb_plus(current_position, ($eqeq(axis, "x") ? (objet_atome.$to_px("width")) : (objet_atome.$to_px("height"))));
      return $send(objet_atome.$attached(), 'each', [], function $$37(child_id){var self = $$37.$$s == null ? this : $$37.$$s, child = nil;

        
        if (child_id == null) child_id = nil;
        child = self.$grab(child_id);
        self.$resize_object(child, scale_factor, axis, max_other_axis_size);
        child.$top($rb_times(child.$top(), scale_factor));
        child.$left($rb_times(child.$left(), scale_factor));
        return (current_position = $rb_plus(current_position, child.$to_px("height")));}, {$$s: self});
    });
    
    $def(self, '$resize_object', function $$resize_object(objet, scale_factor, axis, max_other_axis_size) {
      var new_width = nil, new_height = nil;

      if ($eqeq(axis, "x")) {
        
        new_width = $rb_times(objet.$width(), scale_factor);
        new_height = $rb_divide(new_width, $rb_divide(objet.$width().$to_f(), objet.$height()));
        objet.$width(new_width);
        return objet.$height([new_height, max_other_axis_size].$min());
      } else {
        
        new_height = $rb_times(objet.$height(), scale_factor);
        new_width = $rb_divide(new_height, $rb_divide(objet.$height().$to_f(), objet.$width()));
        objet.$height(new_height);
        return objet.$width([new_width, max_other_axis_size].$min());
      }
    });
    
    $def(self, '$atomizer', function $$atomizer(params) {
      var id = nil, id_wanted = nil, basis = nil, a = nil;

      
      if (!$truthy(params['$instance_of?']($$('Hash')))) {
        params = (new Map([["target", params]]))
      };
      id = params['$[]']("id");
      if ($truthy(id)) {
        id_wanted = (new Map([["id", id]]))
      } else {
        id_wanted = (new Map())
      };
      basis = (new Map([["alien", params['$[]']("target")], ["renderers", ["html"]], ["type", "atomized"]])).$merge(id_wanted);
      a = $$('Atome').$new(basis);
      return a;
    });
    $$('JS').$eval("window.preventDefaultAction = function(e) {\n" + "  e.preventDefault();\n" + "}\n");
    
    $def(self, '$touch_allow', function $$touch_allow(allow) {try { 
      
      if ($truthy(allow)) {
        return $$('JS').$eval("document.removeEventListener(\"contextmenu\", window.preventDefaultAction);")
      } else {
        return $$('JS').$eval("document.addEventListener(\"contextmenu\", window.preventDefaultAction);")
      }} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$allow_copy', function $$allow_copy(allow) {try { 
      
      if ($truthy(allow)) {
        return $$('JS').$eval("document.body.style.userSelect = 'auto';  // Permet la sélection de texte\n" + "document.removeEventListener('copy', preventDefaultAction);  // Permet la copie\n")
      } else {
        return $$('JS').$eval("document.body.style.userSelect = 'none';  // Bloque la sélection de texte\n" + "document.addEventListener('copy', preventDefaultAction);  // Bloque la copie\n")
      }} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    return $$('JS').$eval("window.preventDefaultAction = function(e) {\n" + "  e.preventDefault();\n" + "}\n");
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'CssProxy');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.parent_key = $proto.current_atome = $proto.js = $proto.css = $proto.style = nil;
    
    
    $def(self, '$initialize', function $$initialize(js, $a, $b) {
      var $post_args, parent_key, current_atome, self = this;

      
      $post_args = $slice(arguments, 1);
      
      if ($post_args.length > 1) parent_key = $post_args.shift();if (parent_key == null) parent_key = nil;
      
      current_atome = $post_args.shift();if (current_atome == null) current_atome = nil;
      self.js = js;
      self.css = (new Map());
      self.parent_key = parent_key;
      self.style = (new Map());
      return (self.current_atome = current_atome);
    }, -3);
    
    $def(self, '$[]', function $CssProxy_$$$38(key) {
      var $a, self = this;

      if ($truthy(self.parent_key)) {
        return ($a = self.current_atome.$instance_variable_get("@css")['$[]'](self.parent_key), ($a === nil || $a == null) ? nil : $a['$[]'](key))
      } else {
        return $$('CssProxy').$new(self.js, key, self.current_atome)
      }
    });
    
    $def(self, '$[]=', function $CssProxy_$$$eq$39(key, value) {
      var self = this;

      
      if ($truthy(self.parent_key)) {
        
        self.js['$[]'](self.parent_key)['$[]='](key, value);
        self.current_atome.$instance_variable_set("@css", $hash_rehash(new Map([[self.parent_key, $hash_rehash(new Map([[key, value]]))]])));
        self.css['$[]='](self.parent_key, $hash_rehash(new Map([[key, value]])));
        self.$puts("==> Clé parente: " + (self.parent_key) + ", Clé: " + (key) + ", Valeur: " + (value));
      } else {
        
        self.style['$[]='](key, value);
        self.js['$[]='](key, value);
      };
      if ($truthy(self.parent_key['$nil?']())) {
        return self.js.$update_style(self.style)
      } else {
        return nil
      };
    });
    
    $def(self, '$to_s', function $$to_s() {
      var self = this;

      return self.current_atome.$instance_variable_get("@css").$to_s()
    });
    return $def(self, '$receptor', function $$receptor(msg) {
      var bloc = $$receptor.$$p || nil, parsed = nil;

      $$receptor.$$p = null;
      
      ;
      parsed = $$('JSON').$parse(msg);
      return bloc.$call(parsed);
    });
  })($nesting[0], null, $nesting);
};

Opal.modules["atome/extensions/mathematics"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $rb_divide = Opal.rb_divide, $def = Opal.def, $rb_times = Opal.rb_times, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('/,value,*,-,+');
  return (function($base, $super) {
    var self = $klass($base, $super, 'Atome');

    
    
    
    $def(self, '$/', function $Atome_$slash$1(other) {
      var self = this;

      return $rb_divide(self.$value(), other)
    });
    
    $def(self, '$*', function $Atome_$$2(other) {
      var self = this;

      return $rb_times(self.$value(), other)
    });
    
    $def(self, '$-', function $Atome_$minus$3(other) {
      var self = this;

      return $rb_minus(self.$value(), other)
    });
    return $def(self, '$+', function $Atome_$plus$4(other) {
      var self = this;

      return $rb_plus(self.$value(), other)
    });
  })($nesting[0], null)
};

Opal.modules["atome/atome"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $send = Opal.send, $eqeq = Opal.eqeq, $thrower = Opal.thrower, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('include,attr_accessor,[],identity_generator,each,atomes,==,id,apply,grab,add_to_atomes,id_to_aid,new,current_user,[]=,reorder_particles,collapse,object,html,particle_main,to_proc,instance_variable_set,particle_pre,particle_callback,store_proc,render,particle_post,historicize,particle_after,reject,instance_variables,join,map,inspect,instance_variable_get,class');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.aid = $proto.id = nil;
    
    self.$include($$('Essentials'));
    self.$attr_accessor("controller_proc");
    
    $def(self, '$aid', function $$aid(_v) {
      var self = this;

      
      if (_v == null) _v = nil;
      return self.aid;
    }, -1);
    
    $def(self, '$initialize', function $$initialize(new_atome) {try { var $t_return = $thrower('return'); 
      var atomes_proc = $$initialize.$$p || nil, self = this, $ret_or_1 = nil, reordered_atome = nil;

      $$initialize.$$p = null;
      
      ;
      if (new_atome == null) new_atome = (new Map());
      self.history = (new Map());
      self.tag = (new Map());
      self.tick = (new Map());
      self.storage = (new Map());
      self.behavior = (new Map());
      self.selected = false;
      self.unit = (new Map());
      self.apply = [];
      self.collect = (new Map());
      self.int8 = (new Map());
      self.css = (new Map());
      self.aid = ($truthy(($ret_or_1 = new_atome['$[]']("aid"))) ? ($ret_or_1) : (self.$identity_generator()));
      self.controller_proc = [];
      self.id = ($truthy(($ret_or_1 = new_atome['$[]']("id"))) ? ($ret_or_1) : (self.aid));
      $send($$('Universe').$atomes(), 'each', [], function $$1(_aid, atome_f){var self = $$1.$$s == null ? this : $$1.$$s;
        if (self.id == null) self.id = nil;

        
        if (_aid == null) _aid = nil;
        if (atome_f == null) atome_f = nil;
        if ($eqeq(atome_f.$id(), self.id)) {
          
          $send(new_atome['$[]']("affect"), 'each', [], function $$2(affected){var self = $$2.$$s == null ? this : $$2.$$s;
            if (self.id == null) self.id = nil;

            
            if (affected == null) affected = nil;
            return self.$grab(affected).$apply(self.id);}, {$$s: self});
          $t_return.$throw(false, $$1.$$is_lambda);
        } else {
          return nil
        };}, {$$s: self, $$ret: $t_return});
      $$('Universe').$add_to_atomes(self.aid, self);
      $$('Universe').$id_to_aid(self.id, self.aid);
      self.type = ($truthy(($ret_or_1 = new_atome['$[]']("type"))) ? ($ret_or_1) : ("element"));
      self.attached = [];
      self.affect = [];
      self.category = [];
      self.html = $$('HTML').$new(self.id, self);
      self.headless = $$('Headless').$new(self.id, self);
      self.initialized = (new Map());
      self.creator = $$('Universe').$current_user();
      if ($truthy(atomes_proc)) {
        new_atome['$[]=']("code", atomes_proc)
      };
      reordered_atome = self.$reorder_particles(new_atome);
      return self.$collapse(reordered_atome);} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      } finally {$t_return.is_orphan = true;}
    }, -1);
    
    $def(self, '$js', function $$js() {
      var self = this;

      return self.$html().$object()
    });
    
    $def(self, '$particle_creation', function $$particle_creation(element, params, store, rendering) {
      var user_proc = $$particle_creation.$$p || nil, self = this;

      $$particle_creation.$$p = null;
      
      ;
      params = $send(self, 'particle_main', [element, params], user_proc.$to_proc());
      if ($truthy(store)) {
        self.$instance_variable_set("@" + (element), params)
      };
      params = $send(self, 'particle_pre', [element, params], user_proc.$to_proc());
      self.$particle_callback(element);
      if ($truthy(user_proc)) {
        $send(self, 'store_proc', [element, params], user_proc.$to_proc())
      };
      if ($truthy(rendering)) {
        $send(self, 'render', [element, params], user_proc.$to_proc())
      };
      params = $send(self, 'particle_post', [element, params], user_proc.$to_proc());
      if ($truthy(store)) {
        self.$instance_variable_set("@" + (element), params)
      };
      $$('Universe').$historicize(self.aid, "write", element, params);
      return $send(self, 'particle_after', [element, params], user_proc.$to_proc());
    });
    return $def(self, '$inspect', function $$inspect() {
      var self = this, filtered_vars = nil, content = nil;

      
      filtered_vars = $send(self.$instance_variables(), 'reject', [], function $$3(var$){var $ret_or_1 = nil;

        
        if (var$ == null) var$ = nil;
        if ($truthy(($ret_or_1 = var$['$==']("@html_object")))) {
          return $ret_or_1
        } else {
          return var$['$==']("@history")
        };});
      content = $send(filtered_vars, 'map', [], function $$4(var$){var self = $$4.$$s == null ? this : $$4.$$s;

        
        if (var$ == null) var$ = nil;
        return "" + (var$) + "=" + (self.$instance_variable_get(var$).$inspect());}, {$$s: self}).$join(", ");
      return "#<" + (self.$class()) + ": " + (content) + ">";
    });
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/genesis/atomes"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,instance_of?,create_color_hash,[],sub,to_s,[]=,to_sym,==,length,split,instance_variable_set,compute,delete,color,merge!,each_with_index,send,text,add_user=');
  
  self.$new((new Map([["atome", "color"], ["type", "hash"]])));
  $send(self, 'new', [(new Map([["sanitizer", "color"]]))], function $$1(params){var self = $$1.$$s == null ? this : $$1.$$s, uniq_value = nil;

    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      params = self.$create_color_hash(params)
    };
    if (!$truthy(params['$[]']("id"))) {
      
      uniq_value = "" + (params['$[]']("red").$to_s().$sub(".", "_")) + "_" + (params['$[]']("green").$to_s().$sub(".", "_")) + "_" + (params['$[]']("blue").$to_s().$sub(".", "_")) + "_" + (params['$[]']("alpha").$to_s().$sub(".", "_")) + "_" + (params['$[]']("left").$to_s().$sub(".", "_")) + "_" + (params['$[]']("top").$to_s().$sub(".", "_")) + "_" + (params['$[]']("diffusion").$to_s().$sub(".", "_"));
      params['$[]=']("id", (("color_") + (uniq_value)).$to_sym());
    };
    return params;}, {$$s: self});
  self.$new((new Map([["atome", "image"]])));
  $send(self, 'new', [(new Map([["sanitizer", "image"]]))], function $$2(params){
    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      
      if ($eqeq(params.$to_s().$split(".").$length(), 1)) {
        params = "" + (params) + ".png"
      };
      params = (new Map([["path", "./medias/images/" + (params)]]));
    };
    return params;});
  $send(self, 'new', [(new Map([["post", "image"]]))], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;

    
    self.$instance_variable_set("@width", self.$compute((new Map([["particle", "width"]])))['$[]']("value"));
    return self.$instance_variable_set("@height", self.$compute((new Map([["particle", "height"]])))['$[]']("value"));}, {$$s: self});
  self.$new((new Map([["atome", "video"]])));
  $send(self, 'new', [(new Map([["sanitizer", "video"]]))], function $$4(params){
    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      
      if ($eqeq(params.$to_s().$split(".").$length(), 1)) {
        params = "" + (params) + ".mp4"
      };
      params = (new Map([["path", "./medias/videos/" + (params)]]));
    };
    return params;});
  self.$new((new Map([["atome", "www"]])));
  $send(self, 'new', [(new Map([["atome", "shadow"]]))], function $$5(params){var attach_value = nil;

    
    if (params == null) params = nil;
    if ($truthy(params)) {
      
      attach_value = params.$delete("affect");
      params['$[]=']("affect", attach_value);
    };
    return params;});
  $send(self, 'new', [(new Map([["atome", "border"]]))], function $$6(params){var attach_value = nil;

    
    if (params == null) params = nil;
    if ($truthy(params)) {
      
      attach_value = params.$delete("affect");
      params['$[]=']("affect", attach_value);
    };
    return params;});
  $send(self, 'new', [(new Map([["post", "border"]]))], function $$7(params){var self = $$7.$$s == null ? this : $$7.$$s;

    
    if (params == null) params = nil;
    return self.$color(params['$[]']("color"));}, {$$s: self});
  self.$new((new Map([["atome", "raw"]])));
  self.$new((new Map([["atome", "shape"]])));
  self.$new((new Map([["atome", "code"]])));
  self.$new((new Map([["atome", "audio"]])));
  self.$new((new Map([["atome", "element"]])));
  $send(self, 'new', [(new Map([["sanitizer", "element"]]))], function $$8(params){var default_params = nil;

    
    if (params == null) params = nil;
    default_params = (new Map([["data", ""]]));
    return default_params['$merge!'](params);});
  self.$new((new Map([["atome", "animation"]])));
  self.$new((new Map([["atome", "group"]])));
  self.$new((new Map([["atome", "text"], ["type", "hash"]])));
  $send(self, 'new', [(new Map([["post", "text"]]))], function $$9(params){var self = $$9.$$s == null ? this : $$9.$$s, data_found = nil;

    
    if (params == null) params = nil;
    data_found = params['$[]']("data");
    if ($truthy(data_found['$instance_of?']($$('Array')))) {
      $send(data_found, 'each_with_index', [], function $$10(data_found, index){var self = $$10.$$s == null ? this : $$10.$$s;

        
        if (data_found == null) data_found = nil;
        if (index == null) index = nil;
        if ($eqeq(index, 0)) {
          return self.$send("data", data_found)
        } else {
          return self.$text(data_found)
        };}, {$$s: self})
    } else {
      self.$send("data", data_found)
    };
    return params;}, {$$s: self});
  $send(self, 'new', [(new Map([["sanitizer", "text"]]))], function $$11(params){
    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      params = (new Map([["data", params]]))
    };
    return params;});
  $send(self, 'new', [(new Map([["atome", "human"]]))], function $$12(params){var $a;

    
    if (params == null) params = nil;
    return ($a = [params['$[]']("id")], $send($$('Universe'), 'add_user=', $a), $a[$a.length - 1]);});
  self.$new((new Map([["atome", "machine"]])));
  self.$new((new Map([["atome", "paint"]])));
  self.$new((new Map([["atome", "vector"]])));
  self.$new((new Map([["atome", "matrix"]])));
  return self.$new((new Map([["atome", "atomized"], ["type", "hash"]])));
};

Opal.modules["atome/presets/atome"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $eqeq = Opal.eqeq, $def = Opal.def, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('[],default_params,[]=,identity_generator,merge,reject,has_key?,to_sym,include?,==,reorder_particles,new,to_proc');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.renderers = $proto.id = nil;
    
    
    $def(self, '$atome_common', function $$atome_common(atome_preset, params) {
      var self = this, basic_params = nil, preset_params = nil, $ret_or_1 = nil, essential_params = nil, reordered_params = nil, $ret_or_2 = nil;

      
      basic_params = (new Map([["renderers", []]]));
      preset_params = ($truthy(($ret_or_1 = $$('Essentials').$default_params()['$[]'](atome_preset))) ? ($ret_or_1) : ((new Map())));
      basic_params['$[]=']("type", ($truthy(($ret_or_1 = preset_params['$[]']("type"))) ? ($ret_or_1) : ("element")));
      basic_params['$[]=']("id", ($truthy(($ret_or_1 = params['$[]']("id"))) ? ($ret_or_1) : (self.$identity_generator())));
      basic_params['$[]=']("renderers", ($truthy(($ret_or_1 = self.renderers)) ? ($ret_or_1) : (preset_params['$[]']("renderers"))));
      essential_params = basic_params.$merge(preset_params);
      reordered_params = $send(essential_params, 'reject', [], function $$1(key, _){
        
        if (key == null) key = nil;
        if (_ == null) _ = nil;
        return params['$has_key?'](key);});
      params = reordered_params.$merge(params);
      params['$[]=']("id", params['$[]']("id").$to_sym());
      if ($truthy(["color", "shadow", "paint", "border"]['$include?'](atome_preset))) {
        if (!$truthy(params['$[]']("affect"))) {
          params['$[]=']("affect", ($eqeq(self.id, "view") ? (["black_matter"]) : ([self.id])))
        }
      } else {
        params['$[]=']("attach", ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = params['$[]']("attach"))) ? ($ret_or_2) : (self.id)))) ? ($ret_or_1) : ("view")))
      };
      return self.$reorder_particles(params);
    });
    return $def(self, '$preset_common', function $$preset_common(params) {
      var bloc = $$preset_common.$$p || nil;

      $$preset_common.$$p = null;
      
      ;
      return $send($$('Atome'), 'new', [params], bloc.$to_proc());
    });
  })($nesting[0], null, $nesting)
};

Opal.modules["json"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $Object = Opal.Object, $eqeqeq = Opal.eqeqeq, $defs = Opal.defs, $truthy = Opal.truthy, $def = Opal.def, $return_val = Opal.return_val, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('raise,new,push,[]=,[],create_id,json_create,const_get,attr_accessor,create_id=,===,parse,generate,from_object,merge,to_json,responds_to?,to_io,write,to_s,to_a,strftime');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'JSON');

    var $a, $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $klass($nesting[0], $$('StandardError'), 'JSONError');
    $klass($nesting[0], $$('JSONError'), 'ParserError');
    
    var $hasOwn = Opal.hasOwnProperty;

    function $parse(source) {
      try {
        return JSON.parse(source);
      } catch (e) {
        self.$raise($$$($$('JSON'), 'ParserError'), e.message);
      }
    };

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'undefined':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (Opal.hash_get(options, 'array_class')).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (Opal.hash_get(options, 'object_class')).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                ($a = [k, to_opal(value[k], options)], $send((hash), '[]=', $a), $a[$a.length - 1]);
              }
            }

            if (!Opal.hash_get(options, 'parse') && (klass = (hash)['$[]']($$('JSON').$create_id())) != nil) {
              return $Object.$const_get(klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  ;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self), $nesting);
    self['$create_id=']("json_class");
    $defs(self, '$[]', function $JSON_$$$1(value, options) {
      var self = this;

      
      if (options == null) options = (new Map());
      if ($eqeqeq($$('String'), value)) {
        return self.$parse(value, options)
      } else {
        return self.$generate(value, options)
      };
    }, -2);
    $defs(self, '$parse', function $$parse(source, options) {
      var self = this;

      
      if (options == null) options = (new Map());
      return self.$from_object($parse(source), options.$merge((new Map([["parse", true]]))));
    }, -2);
    $defs(self, '$parse!', function $JSON_parse$excl$2(source, options) {
      var self = this;

      
      if (options == null) options = (new Map());
      return self.$parse(source, options);
    }, -2);
    $defs(self, '$load', function $$load(source, options) {
      var self = this;

      
      if (options == null) options = (new Map());
      return self.$from_object($parse(source), options);
    }, -2);
    $defs(self, '$from_object', function $$from_object(js_object, options) {
      var $ret_or_1 = nil;

      
      if (options == null) options = (new Map());
      if ($truthy(($ret_or_1 = options['$[]']("object_class")))) {
        $ret_or_1
      } else {
        options['$[]=']("object_class", $$('Hash'))
      };
      if ($truthy(($ret_or_1 = options['$[]']("array_class")))) {
        $ret_or_1
      } else {
        options['$[]=']("array_class", $$('Array'))
      };
      return to_opal(js_object, options);;
    }, -2);
    $defs(self, '$generate', function $$generate(obj, options) {
      
      
      if (options == null) options = (new Map());
      return obj.$to_json(options);
    }, -2);
    return $defs(self, '$dump', function $$dump(obj, io, limit) {
      var self = this, string = nil;

      
      if (io == null) io = nil;
      if (limit == null) limit = nil;
      string = self.$generate(obj);
      if ($truthy(io)) {
        
        if ($truthy(io['$responds_to?']("to_io"))) {
          io = io.$to_io()
        };
        io.$write(string);
        return io;
      } else {
        return string
      };
    }, -2);
  })($nesting[0], $nesting);
  (function($base, $super) {
    var self = $klass($base, $super, 'Object');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    })
  })($nesting[0], null);
  (function($base) {
    var self = $module($base, 'Enumerable');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.$to_a().$to_json()
    })
  })($nesting[0]);
  (function($base, $super) {
    var self = $klass($base, $super, 'Array');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(',') + ']';
    
    })
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Boolean');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    })
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Hash');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      
      var result = [];

      Opal.hash_each(self, false, function(key, value) {
        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
        return [false, false];
      });

      return '{' + result.join(',') + '}';
    
    })
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'NilClass');

    
    return $def(self, '$to_json', $return_val("null"))
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Numeric');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.toString();
    })
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'String');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return JSON.stringify(self);
    })
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Time');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json()
    })
  })($nesting[0], null);
  return (function($base, $super) {
    var self = $klass($base, $super, 'Date');

    
    
    
    $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    });
    return $def(self, '$as_json', function $$as_json() {
      var self = this;

      return self.$to_s()
    });
  })($nesting[0], null);
};

Opal.modules["atome/utilities/utilities"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $def = Opal.def, $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $gvars = Opal.gvars, $thrower = Opal.thrower, $slice = Opal.slice, $to_a = Opal.to_a, $hash_rehash = Opal.hash_rehash, $not = Opal.not, $range = Opal.range, $rb_plus = Opal.rb_plus, $rb_lt = Opal.rb_lt, $rb_minus = Opal.rb_minus, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,attr_accessor,gsub,[],global,to_a,each_with_index,key,sanitize_data_for_json,getItem,messages,is_a?,call,instance_exec,grab,to_proc,==,to_json,inspect,eval,<<,atome_preset,define_method,send,each,method,define_singleton_method,instance_variable_get,empty?,instance_variable_set,atome_js,puts,vectorizer,data,set_help,get_help,set_example,get_example,initialized,!,instance_of?,get_sanitizer_method,particle_sanitizer,atome_common,atome_pre_process,atome_post_process,story,[]=,first,values,atome,each_with_object,instance_variables,to_sym,include?,delete,to_s,particles_to_hash,color,apply,collect,+,users,current_user=,debug,display,attach,remove,category,length,attached,connection,store_messages,send_message,html,<,-,scan,image,id,object,path,getElementById,getAttribute');
  
  self.$require("json");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.current_server = $proto.alternate = nil;
    
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      self.$attr_accessor("initialized");
      
      $def(self, '$sanitize_data_for_json', function $$sanitize_data_for_json(data) {
        
        return data.$gsub("\"", "\\\"")
      });
      
      $def(self, '$send_localstorage_content', function $$send_localstorage_content() {
        var self = this, storage = nil, storage_array = nil;

        
        storage = $$('JS').$global()['$[]']("localStorage");
        storage_array = storage.$to_a();
        return $send(storage_array, 'each_with_index', [], function $$1(_i, index){var self = $$1.$$s == null ? this : $$1.$$s, key = nil;

          
          if (_i == null) _i = nil;
          if (index == null) index = nil;
          key = $$('JS').$global()['$[]']("localStorage").$key(index);
          return self.$sanitize_data_for_json(storage.$getItem(key));}, {$$s: self});
      });
      
      $def(self, '$server_receiver', function $$server_receiver(params) {
        var callback_found = nil;

        
        callback_found = $$('Universe').$messages()['$[]'](params['$[]']("message_id"));
        if ($truthy(callback_found['$is_a?']($$('Proc')))) {
          return callback_found.$call(params)
        } else {
          return nil
        };
      });
      
      $def(self, '$file_handler', function $$file_handler(parent, content, bloc) {
        var self = this;

        return $send(self.$grab(parent), 'instance_exec', [content], bloc.$to_proc())
      });
      
      $def(self, '$controller_sender', function $$controller_sender(message) {try { 
        var json_msg = nil, js_json_msg = nil, js_command = nil;
        if ($gvars.host == null) $gvars.host = nil;

        
        if ($eqeq($gvars.host, "html")) {
          return nil
        };
        json_msg = message.$to_json();
        js_json_msg = json_msg.$inspect();
        js_command = "atomeJS.controller_sender(" + (js_json_msg) + ")";
        return $$('JS').$eval(js_command);} catch($e) {
          if ($e === Opal.t_eval_return) return $e.$v;
          throw $e;
        }
      });
      
      $def(self, '$preset_builder', function $$preset_builder(preset_name) {
        var bloc = $$preset_builder.$$p || nil, self = this;

        $$preset_builder.$$p = null;
        
        ;
        $$('Universe').$atome_preset()['$<<'](preset_name);
        $send($$('Object'), 'define_method', [preset_name], function $$2(params){var proc = $$2.$$p || nil, self = $$2.$$s == null ? this : $$2.$$s;

          $$2.$$p = null;
          
          ;
          if (params == null) params = (new Map());
          return $send(self.$grab("view"), 'send', [preset_name, params], proc.$to_proc());}, {$$arity: -1, $$s: self});
        return $send(self, 'define_method', [preset_name], function $$3(params){var self = $$3.$$s == null ? this : $$3.$$s;

          
          if (params == null) params = nil;
          return $send(self, 'instance_exec', [params], bloc.$to_proc());}, {$$s: self});
      });
      
      $def(self, '$monitoring', function $$monitoring(atomes_to_monitor, particles_to_monitor) {
        var bloc = $$monitoring.$$p || nil, self = this;

        $$monitoring.$$p = null;
        
        ;
        return $send(atomes_to_monitor, 'each', [], function $$4(atome_to_monitor){var self = $$4.$$s == null ? this : $$4.$$s;

          
          if (atome_to_monitor == null) atome_to_monitor = nil;
          return $send(particles_to_monitor, 'each', [], function $$5(monitored_particle){var self = $$5.$$s == null ? this : $$5.$$s, original_method = nil;

            
            if (monitored_particle == null) monitored_particle = nil;
            original_method = atome_to_monitor.$method(monitored_particle);
            return $send(atome_to_monitor, 'define_singleton_method', [monitored_particle], function $$6($a){var proc = $$6.$$p || nil, $post_args, args, self = $$6.$$s == null ? this : $$6.$$s, value_before = nil;

              $$6.$$p = null;
              
              ;
              $post_args = $slice(arguments);
              args = $post_args;
              value_before = atome_to_monitor.$instance_variable_get("@" + (monitored_particle));
              if ($truthy(args['$empty?']())) {
                args = nil
              } else {
                
                if ($eqeq(monitored_particle, "touch")) {
                  
                  self.$instance_variable_set("@" + (monitored_particle), (new Map([["tap", args['$[]'](0)]])));
                  self.$instance_variable_set("@" + (monitored_particle) + "_code", (new Map([["touch", proc]])));
                  args = (new Map([["tap", args['$[]'](0)]]));
                } else {
                  self.$instance_variable_set("@" + (monitored_particle), args['$[]'](0))
                };
                args = args['$[]'](0);
              };
              if ($truthy(bloc['$is_a?']($$('Proc')))) {
                $send(self, 'instance_exec', [(new Map([["original", value_before], ["altered", args], ["particle", monitored_particle]]))], bloc.$to_proc())
              };
              return $send(original_method, 'call', $to_a(args));}, {$$arity: -1, $$s: self});}, {$$s: self});}, {$$s: self});
      });
      
      $def(self, '$controller_listener', function $$controller_listener() {
        var self = this;
        if ($gvars.host == null) $gvars.host = nil;

        
        if ($eqeq($gvars.host, "html")) {
          return nil
        };
        return self.$atome_js().controller_listener();
      });
      return $def(self, '$handleSVGContent', function $$handleSVGContent(svg_content, target) {
        var self = this, atome_content = nil, target_vector = nil;

        
        self.$puts(svg_content);
        atome_content = $$('A').$vectorizer(svg_content);
        target_vector = self.$grab(target);
        return target_vector.$data(atome_content);
      });
    })(Opal.get_singleton_class(self), $nesting);
    self.initialized = (new Map());
    
    $def(self, '$help', function $$help(particle) {
      var doc = $$help.$$p || nil, self = this, doc_found = nil;

      $$help.$$p = null;
      
      ;
      if ($truthy(doc)) {
        return $send($$('Universe'), 'set_help', [particle], doc.$to_proc())
      } else {
        
        doc_found = $$('Universe').$get_help(particle);
        if ($truthy(doc_found['$is_a?']($$('Proc')))) {
          return $send(self, 'instance_exec', [], doc_found.$to_proc())
        } else {
          return nil
        };
      };
    });
    
    $def(self, '$example', function $$example(particle) {
      var example = $$example.$$p || nil, self = this, example_found = nil;

      $$example.$$p = null;
      
      ;
      if ($truthy(example)) {
        return $send($$('Universe'), 'set_example', [particle], example.$to_proc())
      } else {
        
        example_found = $$('Universe').$get_example(particle);
        if ($truthy(example_found['$is_a?']($$('Proc')))) {
          return $send(self, 'instance_exec', [], example_found.$to_proc())
        } else {
          return nil
        };
      };
    });
    
    $def(self, '$file_for_opal', function $$file_for_opal(parent, bloc) {try { 
      
      return $$('JS').$eval("fileForOpal('" + (parent) + "', " + (bloc) + ")")} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$response_listener', function $$response_listener(hashed_msg) {
      var self = this, js_action = nil, js_body = nil;

      
      js_action = hashed_msg["action"];
      js_body = hashed_msg["body"];
      return self.$send(js_action, js_body);
    });
    
    $def(self, '$collapse', function $$collapse(new_atome) {
      var self = this, initialized_procs = nil, initialized = nil;

      
      initialized_procs = [];
      initialized = $$('Atome').$initialized();
      $send(new_atome, 'each', [], function $$7(element, value){var self = $$7.$$s == null ? this : $$7.$$s, initialized_proc = nil;

        
        if (element == null) element = nil;
        if (value == null) value = nil;
        self.$send(element, value);
        initialized_proc = initialized['$[]'](element);
        if ($truthy(initialized_proc['$is_a?']($$('Proc')))) {
          return initialized_procs['$<<']($hash_rehash(new Map([[value, initialized_proc]])))
        } else {
          return nil
        };}, {$$s: self});
      return $send(initialized_procs, 'each', [], function $$8(value){var self = $$8.$$s == null ? this : $$8.$$s;

        
        if (value == null) value = nil;
        return $send(value, 'each', [], function $$9(val, proc){var self = $$9.$$s == null ? this : $$9.$$s;

          
          if (val == null) val = nil;
          if (proc == null) proc = nil;
          return $send(self, 'instance_exec', [val], proc.$to_proc());}, {$$s: self});}, {$$s: self});
    });
    
    $def(self, '$particle_main', function $$particle_main(element, params) {
      var user_proc = $$particle_main.$$p || nil, self = this, result = nil;

      $$particle_main.$$p = null;
      
      ;
      if ($truthy($$('Atome').$instance_variable_get("@main_" + (element))['$is_a?']($$('Proc')))) {
        
        result = $send(self, 'instance_exec', [params, user_proc, self], $$('Atome').$instance_variable_get("@main_" + (element)).$to_proc());
        if (($truthy(result) && ($not(result['$instance_of?']($$('Atome')))))) {
          params = result
        };
      };
      return params;
    });
    
    $def(self, '$particle_read', function $$particle_read(element, params) {
      var user_proc = $$particle_read.$$p || nil, self = this;

      $$particle_read.$$p = null;
      
      ;
      if ($truthy($$('Atome').$instance_variable_get("@read_" + (element))['$is_a?']($$('Proc')))) {
        params = $send(self, 'instance_exec', [params, user_proc, self], $$('Atome').$instance_variable_get("@read_" + (element)).$to_proc())
      };
      return params;
    });
    
    $def(self, '$particle_sanitizer', function $$particle_sanitizer(element, params) {
      var user_proc = $$particle_sanitizer.$$p || nil, self = this, bloc_found = nil;

      $$particle_sanitizer.$$p = null;
      
      ;
      bloc_found = $$('Universe').$get_sanitizer_method(element);
      if ($truthy(bloc_found['$is_a?']($$('Proc')))) {
        params = $send(self, 'instance_exec', [params, user_proc], bloc_found.$to_proc())
      };
      return params;
    });
    
    $def(self, '$particle_pre', function $$particle_pre(element, params) {
      var user_proc = $$particle_pre.$$p || nil, self = this;

      $$particle_pre.$$p = null;
      
      ;
      if ($truthy($$('Atome').$instance_variable_get("@pre_" + (element))['$is_a?']($$('Proc')))) {
        params = $send(self, 'instance_exec', [params, user_proc, self], $$('Atome').$instance_variable_get("@pre_" + (element)).$to_proc())
      };
      return params;
    });
    
    $def(self, '$particle_post', function $$particle_post(element, params) {
      var user_proc = $$particle_post.$$p || nil, self = this;

      $$particle_post.$$p = null;
      
      ;
      if ($truthy($$('Atome').$instance_variable_get("@post_" + (element))['$is_a?']($$('Proc')))) {
        params = $send(self, 'instance_exec', [params, user_proc, self], $$('Atome').$instance_variable_get("@post_" + (element)).$to_proc())
      };
      return params;
    });
    
    $def(self, '$particle_after', function $$particle_after(element, params) {
      var user_proc = $$particle_after.$$p || nil, self = this;

      $$particle_after.$$p = null;
      
      ;
      if ($truthy($$('Atome').$instance_variable_get("@after_" + (element))['$is_a?']($$('Proc')))) {
        params = $send(self, 'instance_exec', [params, user_proc, self], $$('Atome').$instance_variable_get("@after_" + (element)).$to_proc())
      };
      return params;
    });
    
    $def(self, '$atome_pre_process', function $$atome_pre_process(element, params) {
      var user_proc = $$atome_pre_process.$$p || nil, self = this;

      $$atome_pre_process.$$p = null;
      
      ;
      if ($truthy($$('Atome').$instance_variable_get("@pre_" + (element))['$is_a?']($$('Proc')))) {
        params = $send(self, 'instance_exec', [params, self, user_proc], $$('Atome').$instance_variable_get("@pre_" + (element)).$to_proc())
      };
      return params;
    });
    
    $def(self, '$atome_sanitizer', function $$atome_sanitizer(element, params) {
      var user_proc = $$atome_sanitizer.$$p || nil, self = this;

      $$atome_sanitizer.$$p = null;
      
      ;
      return self.$particle_sanitizer(element, params);
    });
    
    $def(self, '$atome_post_process', function $$atome_post_process(element, params, new_atome) {
      var user_proc = $$atome_post_process.$$p || nil;

      $$atome_post_process.$$p = null;
      
      ;
      if (!$truthy($$('Atome').$instance_variable_get("@post_" + (element))['$is_a?']($$('Proc')))) {
        return nil
      };
      return $send(new_atome, 'instance_exec', [params, user_proc], $$('Atome').$instance_variable_get("@post_" + (element)).$to_proc());
    });
    
    $def(self, '$atome_processor', function $$atome_processor(element, params) {
      var user_proc = $$atome_processor.$$p || nil, self = this, new_atome = nil;

      $$atome_processor.$$p = null;
      
      ;
      params = self.$atome_common(element, params);
      $send(self, 'atome_pre_process', [element, params], user_proc.$to_proc());
      new_atome = $send(self, 'send', ["set_" + (element), params], user_proc.$to_proc());
      $send(self, 'atome_post_process', [element, params, new_atome], user_proc.$to_proc());
      return new_atome;
    });
    
    $def(self, '$history', function $$history() {
      
      return $$('Universe').$story()
    });
    
    $def(self, '$store_proc', function $$store_proc(element, params) {
      var user_proc = $$store_proc.$$p || nil, $a, self = this, elem_code = nil;

      $$store_proc.$$p = null;
      
      ;
      if (params == null) params = true;
      if (!$truthy(self.$instance_variable_get("@" + (element) + "_code"))) {
        self.$instance_variable_set("@" + (element) + "_code", (new Map()))
      };
      $$('Object').$attr_accessor("" + (element) + "_code");
      elem_code = "@" + (element) + "_code";
      return ($a = [element, user_proc], $send(self.$instance_variable_get(elem_code), '[]=', $a), $a[$a.length - 1]);
    }, -2);
    
    $def(self, '$particle_callback', function $$particle_callback(element) {
      var self = this;

      return $send($$('Atome'), 'define_method', ["" + (element) + "_callback"], function $$10(return_params){var self = $$10.$$s == null ? this : $$10.$$s, proc_found = nil;

        
        if (return_params == null) return_params = nil;
        proc_found = ($truthy(self.$instance_variable_get("@" + (element) + "_code")['$instance_of?']($$('Hash'))) ? (self.$instance_variable_get("@" + (element) + "_code").$values().$first()) : (self.$instance_variable_get("@" + (element) + "_code")['$[]'](element)));
        if ($truthy(proc_found['$is_a?']($$('Proc')))) {
          return proc_found.$call(return_params)
        } else {
          return nil
        };}, {$$s: self})
    });
    
    $def(self, '$callback', function $$callback(element, return_params) {
      var self = this;

      
      if (return_params == null) return_params = nil;
      return self.$send("" + (element) + "_callback", return_params);
    }, -2);
    
    $def(self, '$particles', function $$particles(particles_found) {
      var self = this;

      
      if (particles_found == null) particles_found = nil;
      if ($truthy(particles_found)) {
        return $send(particles_found, 'each', [], function $$11(particle_found, value_found){var $a, self = $$11.$$s == null ? this : $$11.$$s;

          
          if (particle_found == null) particle_found = nil;
          if (value_found == null) value_found = nil;
          return ($a = [particle_found, value_found], $send(self.$atome(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self})
      } else {
        return self.$atome()
      };
    }, -1);
    
    $def(self, '$atome', function $$atome() {
      var self = this;

      return $send(self.$instance_variables(), 'each_with_object', [(new Map())], function $$12(var$, hash){var $a, self = $$12.$$s == null ? this : $$12.$$s;

        
        if (var$ == null) var$ = nil;
        if (hash == null) hash = nil;
        return ($a = [var$['$[]']($range(1, -1, false)).$to_sym(), self.$instance_variable_get(var$)], $send(hash, '[]=', $a), $a[$a.length - 1]);}, {$$s: self})
    });
    
    $def(self, '$particles_to_hash', function $$particles_to_hash() {
      var self = this, hash = nil;

      
      hash = (new Map());
      $send(self.$instance_variables(), 'each', [], function $$13(var$){var $a, self = $$13.$$s == null ? this : $$13.$$s;

        
        if (var$ == null) var$ = nil;
        if ($truthy(["@html_object", "@history,", "@initialized"]['$include?'](var$))) {
          return nil
        };
        return ($a = [var$.$to_s().$delete("@").$to_sym(), self.$instance_variable_get(var$)], $send(hash, '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
      return hash;
    });
    
    $def(self, '$refresh', function $$refresh() {
      var self = this, particles_found = nil;

      
      particles_found = self.$particles_to_hash();
      $send(particles_found, 'each', [], function $$14(particle_found, value_found){var self = $$14.$$s == null ? this : $$14.$$s;

        
        if (particle_found == null) particle_found = nil;
        if (value_found == null) value_found = nil;
        return self.$send(particle_found, value_found);}, {$$s: self});
      return $send(self.$color(), 'each', [], function $$15(col){var self = $$15.$$s == null ? this : $$15.$$s;

        
        if (col == null) col = nil;
        return self.$apply(col);}, {$$s: self});
    });
    
    $def(self, '$each', function $$each() {
      var proc = $$each.$$p || nil, self = this;

      $$each.$$p = null;
      
      ;
      return $send(self.$collect(), 'each', [], function $$16(val){var self = $$16.$$s == null ? this : $$16.$$s;

        
        if (val == null) val = nil;
        if ($truthy(proc['$is_a?']($$('Proc')))) {
          return $send(self, 'instance_exec', [val], proc.$to_proc())
        } else {
          return nil
        };}, {$$s: self});
    });
    
    $def(self, '$each_with_index', function $$each_with_index() {
      var proc = $$each_with_index.$$p || nil, self = this, index = nil;

      $$each_with_index.$$p = null;
      
      ;
      index = 0;
      return $send(self.$collect(), 'each', [], function $$17(val){var self = $$17.$$s == null ? this : $$17.$$s;

        
        if (val == null) val = nil;
        if ($truthy(proc['$is_a?']($$('Proc')))) {
          $send(self, 'instance_exec', [val, index], proc.$to_proc())
        };
        return (index = $rb_plus(index, 1));}, {$$s: self});
    });
    
    $def(self, '$<<', function $Atome_$lt$lt$18(item) {
      var self = this;

      return self.$collect()['$<<'](item)
    });
    
    $def(self, '$include?', function $Atome_include$ques$19(value) {
      var self = this;

      return self['$include?'](value)
    });
    
    $def(self, '$set', function $$set(params) {
      var self = this;

      return $send(params, 'each', [], function $$20(particle, value){var self = $$20.$$s == null ? this : $$20.$$s;

        
        if (particle == null) particle = nil;
        if (value == null) value = nil;
        return self.$send(particle, value);}, {$$s: self})
    });
    
    $def(self, '$detach_atome', function $$detach_atome(atome_id_to_detach) {
      var self = this, atome_to_detach = nil;

      
      atome_to_detach = self.$grab(atome_id_to_detach);
      if ($truthy(atome_to_detach)) {
        return nil
      } else {
        return nil
      };
    });
    
    $def(self, '$debug', function $$debug(msg) {
      var self = this;

      return self.$puts(msg)
    });
    
    $def(self, '$set_current_user', function $$set_current_user(user_id) {
      var $a, self = this;

      if ($truthy($$('Universe').$users()['$[]'](user_id))) {
        return ($a = [user_id], $send($$('Universe'), 'current_user=', $a), $a[$a.length - 1])
      } else {
        return self.$debug("" + (user_id) + " not found")
      }
    });
    
    $def(self, '$remove_layout', function $$remove_layout() {
      var self = this, parent_found = nil, grand_parent = nil;

      
      self.$display("default");
      parent_found = self.$grab(self.$attach());
      grand_parent = parent_found.$attach();
      self.$remove((new Map([["category", self.$attach()]])));
      self.$category("atome");
      self.$attach(grand_parent);
      if ($eqeq(parent_found.$attached().$length(), 0)) {
        return parent_found.$delete(true)
      } else {
        return nil
      };
    });
    
    $def(self, '$server', function $$server(server_params) {
      var self = this;

      
      if (server_params == null) server_params = nil;
      if ($truthy(server_params)) {
        return (self.current_server = server_params)
      } else {
        return self.current_server
      };
    }, -1);
    
    $def(self, '$init_websocket', function $$init_websocket() {
      var self = this;

      return self.$connection(self.current_server)
    });
    
    $def(self, '$encrypt', function $$encrypt(string) {try { 
      var js_code = nil;

      
      js_code = "sha256('" + (string) + "')";
      return $$('JS').$eval(js_code);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$get_localstorage_content', function $$get_localstorage_content() {
      var storage = nil, storage_array = nil, storage_items = nil;

      
      storage = $$('JS').$global()['$[]']("localStorage");
      storage_array = storage.$to_a();
      storage_items = (new Map());
      $send(storage_array, 'each_with_index', [], function $$21(_i, index){var $a, key = nil, value = nil;

        
        if (_i == null) _i = nil;
        if (index == null) index = nil;
        key = $$('JS').$global()['$[]']("localStorage").$key(index);
        value = $$('JS').$global()['$[]']("localStorage").$getItem(key);
        return ($a = [key, value], $send(storage_items, '[]=', $a), $a[$a.length - 1]);});
      return storage_items;
    });
    
    $def(self, '$sync', function $$sync(params) {
      var bloc = $$sync.$$p || nil, self = this, message_id = nil;

      $$sync.$$p = null;
      
      ;
      if (!$truthy(params['$instance_of?']($$('Hash')))) {
        params = (new Map([["data", params]]))
      };
      message_id = "msg_" + ($$('Universe').$messages().$length());
      params['$[]=']("message_id", message_id);
      $$('Universe').$store_messages((new Map([["msg_nb", message_id], ["proc", bloc]])));
      return self.$html().$send_message(params);
    });
    
    $def(self, '$alternate', function $$alternate($a) {
      var $post_args, states, self = this, $ret_or_1 = nil, current_state = nil;

      
      $post_args = $slice(arguments);
      states = $post_args;
      self.alternate = ($truthy(($ret_or_1 = self.alternate)) ? ($ret_or_1) : ((new Map([["state", 0]]))));
      self.alternate['$[]=']("data", states);
      if ($truthy($rb_lt(self.alternate['$[]']("state"), $rb_minus(states.$length(), 1)))) {
        self.alternate['$[]=']("state", $rb_plus(self.alternate['$[]']("state"), 1))
      } else {
        self.alternate['$[]=']("state", 0)
      };
      current_state = self.alternate['$[]']("data")['$[]']($rb_minus(self.alternate['$[]']("state"), 1));
      if ($truthy(current_state['$instance_of?']($$('Hash')))) {
        $send(current_state, 'each', [], function $$22(state, value){var self = $$22.$$s == null ? this : $$22.$$s;

          
          if (state == null) state = nil;
          if (value == null) value = nil;
          return self.$send(state, value);}, {$$s: self})
      };
      return current_state;
    }, -1);
    
    $def(self, '$vectorizer', function $$vectorizer(svg_content) {
      var atome_content = nil, circle_regex = nil, path_regex = nil, rect_regex = nil, line_regex = nil, ellipse_regex = nil, polygon_regex = nil, polyline_regex = nil;

      
      atome_content = [];
      circle_regex = /<circle\s+.*?id\s*=\s*"(.*?)"\s+(?:stroke\s*=\s*"(.*?)"\s+)?(?:stroke-width\s*=\s*"(.*?)"\s+)?fill\s*=\s*"(.*?)"\s+cx\s*=\s*"(\d+(?:\.\d+)?)"\s+cy\s*=\s*"(\d+(?:\.\d+)?)"\s+r\s*=\s*"(\d+(?:\.\d+)?)"\s*.*?\/>/;
      $send(svg_content, 'scan', [circle_regex], function $$23(id, stroke, stroke_width, fill, cx, cy, r){var $ret_or_1 = nil, circle_def = nil;

        
        if (id == null) id = nil;
        if (stroke == null) stroke = nil;
        if (stroke_width == null) stroke_width = nil;
        if (fill == null) fill = nil;
        if (cx == null) cx = nil;
        if (cy == null) cy = nil;
        if (r == null) r = nil;
        stroke = ($truthy(($ret_or_1 = stroke)) ? ($ret_or_1) : ("none"));
        stroke_width = ($truthy(($ret_or_1 = stroke_width)) ? ($ret_or_1) : ("0"));
        fill = ($truthy(($ret_or_1 = fill)) ? ($ret_or_1) : ("none"));
        circle_def = (new Map([["circle", (new Map([["cx", cx], ["cy", cy], ["r", r], ["id", id], ["stroke", stroke], ["stroke-width", stroke_width], ["fill", fill]]))]]));
        return atome_content['$<<'](circle_def);});
      path_regex = /<path\s+.*?d\s*=\s*"([^"]+)"\s+(?:id\s*=\s*"(.*?)"\s+)?(?:stroke\s*=\s*"(.*?)"\s+)?(?:stroke-width\s*=\s*"(.*?)"\s+)?fill\s*=\s*"(.*?)".*?\/>/;
      $send(svg_content, 'scan', [path_regex], function $$24(d, id, stroke, stroke_width, fill){var $ret_or_1 = nil, path_def = nil;

        
        if (d == null) d = nil;
        if (id == null) id = nil;
        if (stroke == null) stroke = nil;
        if (stroke_width == null) stroke_width = nil;
        if (fill == null) fill = nil;
        id = ($truthy(($ret_or_1 = id)) ? ($ret_or_1) : ("path_id"));
        stroke = ($truthy(($ret_or_1 = stroke)) ? ($ret_or_1) : ("none"));
        stroke_width = ($truthy(($ret_or_1 = stroke_width)) ? ($ret_or_1) : ("0"));
        fill = ($truthy(($ret_or_1 = fill)) ? ($ret_or_1) : ("none"));
        path_def = (new Map([["path", (new Map([["d", d], ["id", id], ["stroke", stroke], ["stroke-width", stroke_width], ["fill", fill]]))]]));
        return atome_content['$<<'](path_def);});
      rect_regex = /<rect\s+.*?id\s*=\s*"(.*?)"\s+(?:stroke\s*=\s*"(.*?)"\s+)?(?:stroke-width\s*=\s*"(.*?)"\s+)?fill\s*=\s*"(.*?)"\s+x\s*=\s*"(\d+(?:\.\d+)?)"\s+y\s*=\s*"(\d+(?:\.\d+)?)"\s+width\s*=\s*"(\d+(?:\.\d+)?)"\s+height\s*=\s*"(\d+(?:\.\d+)?)"\s*.*?\/>/;
      $send(svg_content, 'scan', [rect_regex], function $$25(id, stroke, stroke_width, fill, x, y, width, height){var $ret_or_1 = nil, rect_def = nil;

        
        if (id == null) id = nil;
        if (stroke == null) stroke = nil;
        if (stroke_width == null) stroke_width = nil;
        if (fill == null) fill = nil;
        if (x == null) x = nil;
        if (y == null) y = nil;
        if (width == null) width = nil;
        if (height == null) height = nil;
        id = ($truthy(($ret_or_1 = id)) ? ($ret_or_1) : ("rect_id"));
        stroke = ($truthy(($ret_or_1 = stroke)) ? ($ret_or_1) : ("none"));
        stroke_width = ($truthy(($ret_or_1 = stroke_width)) ? ($ret_or_1) : ("0"));
        fill = ($truthy(($ret_or_1 = fill)) ? ($ret_or_1) : ("none"));
        rect_def = (new Map([["rect", (new Map([["x", x], ["y", y], ["width", width], ["height", height], ["id", id], ["stroke", stroke], ["stroke-width", stroke_width], ["fill", fill]]))]]));
        return atome_content['$<<'](rect_def);});
      line_regex = /<line\s+.*?id\s*=\s*"(.*?)"\s+(?:stroke\s*=\s*"(.*?)"\s+)?(?:stroke-width\s*=\s*"(.*?)"\s+)?x1\s*=\s*"(\d+(?:\.\d+)?)"\s+y1\s*=\s*"(\d+(?:\.\d+)?)"\s+x2\s*=\s*"(\d+(?:\.\d+)?)"\s+y2\s*=\s*"(\d+(?:\.\d+)?)"\s*.*?\/>/;
      $send(svg_content, 'scan', [line_regex], function $$26(id, stroke, stroke_width, x1, y1, x2, y2){var $ret_or_1 = nil, line_def = nil;

        
        if (id == null) id = nil;
        if (stroke == null) stroke = nil;
        if (stroke_width == null) stroke_width = nil;
        if (x1 == null) x1 = nil;
        if (y1 == null) y1 = nil;
        if (x2 == null) x2 = nil;
        if (y2 == null) y2 = nil;
        id = ($truthy(($ret_or_1 = id)) ? ($ret_or_1) : ("line_id"));
        stroke = ($truthy(($ret_or_1 = stroke)) ? ($ret_or_1) : ("none"));
        stroke_width = ($truthy(($ret_or_1 = stroke_width)) ? ($ret_or_1) : ("0"));
        line_def = (new Map([["line", (new Map([["x1", x1], ["y1", y1], ["x2", x2], ["y2", y2], ["id", id], ["stroke", stroke], ["stroke-width", stroke_width]]))]]));
        return atome_content['$<<'](line_def);});
      ellipse_regex = /<ellipse\s+.*?id\s*=\s*"(.*?)"\s+(?:stroke\s*=\s*"(.*?)"\s+)?(?:stroke-width\s*=\s*"(.*?)"\s+)?fill\s*=\s*"(.*?)"\s+cx\s*=\s*"(\d+(?:\.\d+)?)"\s+cy\s*=\s*"(\d+(?:\.\d+)?)"\s+rx\s*=\s*"(\d+(?:\.\d+)?)"\s+ry\s*=\s*"(\d+(?:\.\d+)?)"\s*.*?\/>/;
      $send(svg_content, 'scan', [ellipse_regex], function $$27(id, stroke, stroke_width, fill, cx, cy, rx, ry){var $ret_or_1 = nil, ellipse_def = nil;

        
        if (id == null) id = nil;
        if (stroke == null) stroke = nil;
        if (stroke_width == null) stroke_width = nil;
        if (fill == null) fill = nil;
        if (cx == null) cx = nil;
        if (cy == null) cy = nil;
        if (rx == null) rx = nil;
        if (ry == null) ry = nil;
        id = ($truthy(($ret_or_1 = id)) ? ($ret_or_1) : ("ellipse_id"));
        stroke = ($truthy(($ret_or_1 = stroke)) ? ($ret_or_1) : ("none"));
        stroke_width = ($truthy(($ret_or_1 = stroke_width)) ? ($ret_or_1) : ("0"));
        fill = ($truthy(($ret_or_1 = fill)) ? ($ret_or_1) : ("none"));
        ellipse_def = (new Map([["ellipse", (new Map([["cx", cx], ["cy", cy], ["rx", rx], ["ry", ry], ["id", id], ["stroke", stroke], ["stroke-width", stroke_width], ["fill", fill]]))]]));
        return atome_content['$<<'](ellipse_def);});
      polygon_regex = /<polygon\s+(?:id\s*=\s*"(.*?)"\s+)?(?:stroke\s*=\s*"(.*?)"\s+)?(?:stroke-width\s*=\s*"(.*?)"\s+)?(?:fill\s*=\s*"(.*?)"\s+)?points\s*=\s*"([^"]+)".*?\/>/;
      $send(svg_content, 'scan', [polygon_regex], function $$28(id, stroke, stroke_width, fill, points){var $ret_or_1 = nil, polygon_def = nil;

        
        if (id == null) id = nil;
        if (stroke == null) stroke = nil;
        if (stroke_width == null) stroke_width = nil;
        if (fill == null) fill = nil;
        if (points == null) points = nil;
        id = ($truthy(($ret_or_1 = id)) ? ($ret_or_1) : ("polygon_id"));
        stroke = ($truthy(($ret_or_1 = stroke)) ? ($ret_or_1) : ("none"));
        stroke_width = ($truthy(($ret_or_1 = stroke_width)) ? ($ret_or_1) : ("0"));
        fill = ($truthy(($ret_or_1 = fill)) ? ($ret_or_1) : ("none"));
        polygon_def = (new Map([["polygon", (new Map([["points", points], ["id", id], ["stroke", stroke], ["stroke-width", stroke_width], ["fill", fill]]))]]));
        return atome_content['$<<'](polygon_def);});
      polyline_regex = /<polyline\s+.*?points\s*=\s*"([^"]+)"\s+(?:id\s*=\s*"(.*?)"\s+)?(?:stroke\s*=\s*"(.*?)"\s+)?(?:stroke-width\s*=\s*"(.*?)"\s+)?(?:fill\s*=\s*"(.*?)")?.*?\/>/;
      $send(svg_content, 'scan', [polyline_regex], function $$29(points, id, stroke, stroke_width, fill){var $ret_or_1 = nil, polyline_def = nil;

        
        if (points == null) points = nil;
        if (id == null) id = nil;
        if (stroke == null) stroke = nil;
        if (stroke_width == null) stroke_width = nil;
        if (fill == null) fill = nil;
        id = ($truthy(($ret_or_1 = id)) ? ($ret_or_1) : ("polyline_id"));
        stroke = ($truthy(($ret_or_1 = stroke)) ? ($ret_or_1) : ("none"));
        stroke_width = ($truthy(($ret_or_1 = stroke_width)) ? ($ret_or_1) : ("0"));
        fill = ($truthy(($ret_or_1 = fill)) ? ($ret_or_1) : ("none"));
        polyline_def = (new Map([["polyline", (new Map([["points", points], ["id", id], ["stroke", stroke], ["stroke-width", stroke_width], ["fill", fill]]))]]));
        return atome_content['$<<'](polyline_def);});
      return atome_content;
    });
    
    $def(self, '$b64_to_tag', function $$b64_to_tag(params) {try { 
      var self = this, new_img = nil, new_tag = nil, new_atome = nil, html_obj = nil, obj_src = nil;

      
      if (!$truthy(params['$[]']("target"))) {
        
        new_img = self.$image((new Map([["left", 0], ["top", 0]])));
        params['$[]=']("target", new_img.$id());
      };
      new_tag = "  var serializer = new XMLSerializer();\n" + "  var svg_string = serializer.serializeToString(document.getElementById('" + (params['$[]']("id")) + "'));\n" + "  var encoded_svg = btoa(unescape(encodeURIComponent(svg_string)));\n" + "  var img = document.getElementById('" + (params['$[]']("target")) + "');\n" + "  img.src = \"data:image/svg+xml;base64,\" + encoded_svg;\n" + "  var parent = document.getElementById('" + (self.$id()) + "');\n" + "  parent.appendChild(img);\n";
      $$('JS').$eval(new_tag);
      new_atome = self.$grab(params['$[]']("target"));
      html_obj = new_atome.$html().$object();
      obj_src = html_obj['$[]']("src");
      new_atome.$path(obj_src);
      return new_atome;} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    return $def(self, '$fetch_svg', function $$fetch_svg(params) {try { 
      var source = nil, img_element = nil, svg_path = nil, target = nil;

      
      source = params['$[]']("source");
      img_element = $$('JS').$global()['$[]']("document").$getElementById(source.$to_s());
      svg_path = img_element.$getAttribute("src");
      target = params['$[]']("target");
      return $$('JS').$eval("fetchSVGContent('" + (svg_path) + "', '" + (target) + "')");} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
  })($nesting[0], null, $nesting);
};

Opal.modules["atome/genesis/particles/atome"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('new');
  
  self.$new((new Map([["particle", "creator"], ["category", "atome"], ["type", "hash"]])));
  return self.$new((new Map([["particle", "aid"], ["category", "atome"], ["type", "string"], ["store", false]])));
};

Opal.modules["atome/genesis/particles/communication"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $def = Opal.def, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,connect,html,to_proc,database_ready,instance_of?,length,messages,[]=,store_messages,send_message,puts,[],int8,parse,call,controller_code,controller_sender,<<');
  
  $send(self, 'new', [(new Map([["particle", "connection"], ["category", "communication"], ["type", "hash"]]))], function $$1(params, bloc){var self = $$1.$$s == null ? this : $$1.$$s;

    
    if (params == null) params = nil;
    if (bloc == null) bloc = nil;
    return $send(self.$html(), 'connect', [params], bloc.$to_proc());}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "message"], ["category", "communication"], ["type", "hash"]]))], function $$2(params, bloc){var self = $$2.$$s == null ? this : $$2.$$s, message_id = nil;

    
    if (params == null) params = nil;
    if (bloc == null) bloc = nil;
    if ($truthy($$('Universe').$database_ready())) {
      
      if (!$truthy(params['$instance_of?']($$('Hash')))) {
        params = (new Map([["data", params]]))
      };
      message_id = "msg_" + ($$('Universe').$messages().$length());
      params['$[]=']("message_id", message_id);
      $$('Universe').$store_messages((new Map([["msg_nb", message_id], ["proc", bloc]])));
      return self.$html().$send_message(params);
    } else {
      return self.$puts("server not ready ")
    };}, {$$s: self});
  self.$new((new Map([["particle", "int8"], ["category", "communication"], ["type", "int"]])));
  $send(self, 'new', [(new Map([["particle", "language"], ["category", "communication"], ["type", "string"]]))], function $$3(params){var self = $$3.$$s == null ? this : $$3.$$s;

    
    if (params == null) params = nil;
    self.data = self.$int8()['$[]'](params);
    return params;}, {$$s: self});
  
  $def(self, '$receptor', function $$receptor(msg) {
    var parsed = nil;

    
    parsed = $$('JSON').$parse(msg);
    return $$('A').$controller_code()['$[]']("controller").$call(parsed);
  });
  $send(self, 'new', [(new Map([["particle", "controller"], ["category", "communication"], ["type", "hash"]]))], function $$4(msg){
    
    if (msg == null) msg = nil;
    return $$('Atome').$controller_sender(msg);});
  return $send(self, 'new', [(new Map([["post", "controller"]]))], function $$5(_p, bloc){var self = $$5.$$s == null ? this : $$5.$$s;
    if (self.controller_proc == null) self.controller_proc = nil;

    
    if (_p == null) _p = nil;
    if (bloc == null) bloc = nil;
    return self.controller_proc['$<<'](bloc);}, {$$s: self});
};

Opal.modules["atome/genesis/particles/effect"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,nil?,affect,instance_of?');
  
  self.$new((new Map([["particle", "smooth"], ["category", "effect"], ["type", "int"]])));
  return $send(self, 'new', [(new Map([["particle", "blur"], ["category", "effect"], ["type", "int"]]))], function $$1(params){var self = $$1.$$s == null ? this : $$1.$$s, affect_to = nil, val = nil;

    
    if (params == null) params = nil;
    if ($truthy(self.$affect()['$nil?']())) {
      affect_to = self.$affect()
    } else {
      affect_to = ["self"]
    };
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      val = (new Map([["value", params], ["affect", affect_to]]))
    };
    return val;}, {$$s: self});
};

Opal.modules["atome/genesis/particles/event"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $eqeqeq = Opal.eqeqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,instance_of?,[]=,[],keys,===,instance_variable_get,merge,play_animation,html');
  
  self.$new((new Map([["particle", "touch"], ["category", "event"], ["type", "hash"], ["store", false]])));
  $send(self, 'new', [(new Map([["sanitizer", "touch"]]))], function $$1(params, user_bloc){var $a, self = $$1.$$s == null ? this : $$1.$$s, $ret_or_1 = nil, option = nil;
    if (self.touch == null) self.touch = nil;
    if (self.touch_code == null) self.touch_code = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    self.touch = ($truthy(($ret_or_1 = self.touch)) ? ($ret_or_1) : ((new Map())));
    self.touch_code = ($truthy(($ret_or_1 = self.touch_code)) ? ($ret_or_1) : ((new Map())));
    option = true;
    params = ($truthy(params['$instance_of?']($$('Hash'))) ? ((($a = [params.$keys()['$[]'](0), user_bloc], $send(self.touch_code, '[]=', $a), $a[$a.length - 1]), (option = params['$[]'](params.$keys()['$[]'](0))), params.$keys()['$[]'](0))) : ($eqeqeq(true, ($ret_or_1 = params)) ? ((($a = ["tap", user_bloc], $send(self.touch_code, '[]=', $a), $a[$a.length - 1]), "tap")) : ($eqeqeq("touch", $ret_or_1) ? ((($a = ["tap", user_bloc], $send(self.touch_code, '[]=', $a), $a[$a.length - 1]), "tap")) : ($eqeqeq("down", $ret_or_1) ? ((($a = ["down", user_bloc], $send(self.touch_code, '[]=', $a), $a[$a.length - 1]), "down")) : ($eqeqeq("up", $ret_or_1) ? ((($a = ["up", user_bloc], $send(self.touch_code, '[]=', $a), $a[$a.length - 1]), "up")) : ($eqeqeq("long", $ret_or_1) ? ((($a = ["long", user_bloc], $send(self.touch_code, '[]=', $a), $a[$a.length - 1]), "long")) : ($eqeqeq("double", $ret_or_1) ? ((($a = ["double", user_bloc], $send(self.touch_code, '[]=', $a), $a[$a.length - 1]), "double")) : ($eqeqeq("remove", $ret_or_1) ? (params) : ($eqeqeq(false, $ret_or_1) ? ((($a = ["remove", user_bloc], $send(self.touch_code, '[]=', $a), $a[$a.length - 1]), "remove")) : ((($a = ["tap", user_bloc], $send(self.touch_code, '[]=', $a), $a[$a.length - 1]), "tap")))))))))));
    self.touch['$[]='](params, option);
    return params;}, {$$s: self});
  self.$new((new Map([["particle", "play"], ["category", "event"], ["type", "boolean"], ["store", false]])));
  $send(self, 'new', [(new Map([["sanitizer", "play"]]))], function $$2(params, user_bloc){var $a, self = $$2.$$s == null ? this : $$2.$$s, $ret_or_1 = nil, option = nil;
    if (self.play == null) self.play = nil;
    if (self.play_code == null) self.play_code = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    self.play = ($truthy(($ret_or_1 = self.play)) ? ($ret_or_1) : ((new Map())));
    self.play_code = ($truthy(($ret_or_1 = self.play_code)) ? ($ret_or_1) : ((new Map())));
    option = true;
    params = ($truthy(params['$instance_of?']($$('Hash'))) ? ((($a = [params.$keys()['$[]'](0), user_bloc], $send(self.play_code, '[]=', $a), $a[$a.length - 1]), (option = params['$[]'](params.$keys()['$[]'](0))), params.$keys()['$[]'](0))) : ($eqeqeq(true, ($ret_or_1 = params)) ? ((($a = ["play", user_bloc], $send(self.play_code, '[]=', $a), $a[$a.length - 1]), "play")) : ($eqeqeq("stop", $ret_or_1) ? ((($a = ["stop", user_bloc], $send(self.play_code, '[]=', $a), $a[$a.length - 1]), "stop")) : ($eqeqeq("play", $ret_or_1) ? ((($a = ["play", user_bloc], $send(self.play_code, '[]=', $a), $a[$a.length - 1]), "play")) : ($eqeqeq("pause", $ret_or_1) ? ((($a = ["pause", user_bloc], $send(self.play_code, '[]=', $a), $a[$a.length - 1]), "pause")) : ((($a = ["play", user_bloc], $send(self.play_code, '[]=', $a), $a[$a.length - 1]), (option = params), "play")))))));
    self.play['$[]='](params, option);
    return params;}, {$$s: self});
  self.$new((new Map([["particle", "pause"], ["category", "event"], ["type", "boolean"]])));
  self.$new((new Map([["particle", "time"], ["category", "event"], ["type", "int"]])));
  self.$new((new Map([["particle", "on"], ["category", "event"], ["type", "boolean"], ["store", false]])));
  $send(self, 'new', [(new Map([["sanitizer", "on"]]))], function $$3(params, user_bloc){var $a, self = $$3.$$s == null ? this : $$3.$$s, $ret_or_1 = nil, option = nil;
    if (self.on == null) self.on = nil;
    if (self.on_code == null) self.on_code = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    self.on = ($truthy(($ret_or_1 = self.on)) ? ($ret_or_1) : ((new Map())));
    self.on_code = ($truthy(($ret_or_1 = self.on_code)) ? ($ret_or_1) : ((new Map())));
    option = (new Map());
    params = ($truthy(params['$instance_of?']($$('Hash'))) ? ((($a = ["view_resize", user_bloc], $send(self.on_code, '[]=', $a), $a[$a.length - 1]), (option = params['$[]'](params.$keys()['$[]'](0))), "resize")) : ($eqeqeq(true, ($ret_or_1 = params)) ? ((($a = ["view_resize", user_bloc], $send(self.on_code, '[]=', $a), $a[$a.length - 1]), "resize")) : ($eqeqeq("remove", $ret_or_1) ? ("remove") : ((($a = ["view_resize", user_bloc], $send(self.on_code, '[]=', $a), $a[$a.length - 1]), (option = params), "resize")))));
    self.on['$[]='](params, option);
    return params;}, {$$s: self});
  self.$new((new Map([["particle", "fullscreen"], ["category", "event"], ["type", "boolean"]])));
  self.$new((new Map([["particle", "mute"], ["category", "event"], ["type", "boolean"]])));
  self.$new((new Map([["particle", "drag"], ["category", "event"], ["type", "boolean"], ["store", false]])));
  $send(self, 'new', [(new Map([["sanitizer", "drag"]]))], function $$4(params, user_bloc){var $a, self = $$4.$$s == null ? this : $$4.$$s, $ret_or_1 = nil, option = nil;
    if (self.drag == null) self.drag = nil;
    if (self.drag_code == null) self.drag_code = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    self.drag = ($truthy(($ret_or_1 = self.drag)) ? ($ret_or_1) : ((new Map())));
    self.drag_code = ($truthy(($ret_or_1 = self.drag_code)) ? ($ret_or_1) : ((new Map())));
    option = true;
    params = ($truthy(params['$instance_of?']($$('Hash'))) ? ((($a = [params.$keys()['$[]'](0), user_bloc], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]), (option = params['$[]'](params.$keys()['$[]'](0))), params.$keys()['$[]'](0))) : ($eqeqeq(true, ($ret_or_1 = params)) ? ((($a = ["move", user_bloc], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]), "move")) : ($eqeqeq("move", $ret_or_1) ? ((($a = ["move", user_bloc], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]), "move")) : ($eqeqeq("drag", $ret_or_1) ? ((($a = ["move", user_bloc], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]), "move")) : ($eqeqeq("clone", $ret_or_1) ? ((($a = ["clone", user_bloc], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]), "clone")) : ($eqeqeq("start", $ret_or_1) ? ((($a = ["start", user_bloc], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]), "start")) : ($eqeqeq("stop", $ret_or_1) ? ((($a = ["end", user_bloc], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]), "end")) : ($eqeqeq("end", $ret_or_1) ? ((($a = ["end", user_bloc], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]), "end")) : ($eqeqeq("locked", $ret_or_1) ? ((($a = ["locked", user_bloc], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]), "locked")) : ($eqeqeq(false, $ret_or_1) ? ((($a = ["remove", user_bloc], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]), "remove")) : ((($a = ["move", user_bloc], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]), "move"))))))))))));
    self.drag['$[]='](params, option);
    return params;}, {$$s: self});
  self.$new((new Map([["particle", "drop"], ["category", "event"], ["type", "boolean"], ["store", false]])));
  $send(self, 'new', [(new Map([["sanitizer", "drop"]]))], function $$5(params, user_bloc){var $a, self = $$5.$$s == null ? this : $$5.$$s, $ret_or_1 = nil, option = nil;
    if (self.drop == null) self.drop = nil;
    if (self.drop_code == null) self.drop_code = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    self.drop = ($truthy(($ret_or_1 = self.drop)) ? ($ret_or_1) : ((new Map())));
    self.drop_code = ($truthy(($ret_or_1 = self.drop_code)) ? ($ret_or_1) : ((new Map())));
    option = true;
    params = ($truthy(params['$instance_of?']($$('Hash'))) ? ((($a = [params.$keys()['$[]'](0), user_bloc], $send(self.drop_code, '[]=', $a), $a[$a.length - 1]), (option = params['$[]'](params.$keys()['$[]'](0))), params.$keys()['$[]'](0))) : ($eqeqeq(true, ($ret_or_1 = params)) ? ((($a = ["dropped", user_bloc], $send(self.drop_code, '[]=', $a), $a[$a.length - 1]), "dropped")) : ($eqeqeq("enter", $ret_or_1) ? ((($a = ["enter", user_bloc], $send(self.drop_code, '[]=', $a), $a[$a.length - 1]), "enter")) : ($eqeqeq("activate", $ret_or_1) ? ((($a = ["activate", user_bloc], $send(self.drop_code, '[]=', $a), $a[$a.length - 1]), "activate")) : ($eqeqeq("deactivate", $ret_or_1) ? ((($a = ["deactivate", user_bloc], $send(self.drop_code, '[]=', $a), $a[$a.length - 1]), "deactivate")) : ($eqeqeq("leave", $ret_or_1) ? ((($a = ["leave", user_bloc], $send(self.drop_code, '[]=', $a), $a[$a.length - 1]), "leave")) : ((($a = ["dropped", user_bloc], $send(self.drop_code, '[]=', $a), $a[$a.length - 1]), "dropped"))))))));
    self.drop['$[]='](params, option);
    return params;}, {$$s: self});
  self.$new((new Map([["particle", "over"], ["category", "event"], ["type", "hash"], ["store", false]])));
  $send(self, 'new', [(new Map([["sanitizer", "over"]]))], function $$6(params, user_bloc){var $a, self = $$6.$$s == null ? this : $$6.$$s, $ret_or_1 = nil, option = nil;
    if (self.over == null) self.over = nil;
    if (self.over_code == null) self.over_code = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    self.over = ($truthy(($ret_or_1 = self.over)) ? ($ret_or_1) : ((new Map())));
    self.over_code = ($truthy(($ret_or_1 = self.over_code)) ? ($ret_or_1) : ((new Map())));
    option = true;
    params = ($truthy(params['$instance_of?']($$('Hash'))) ? ((($a = [params.$keys()['$[]'](0), user_bloc], $send(self.over_code, '[]=', $a), $a[$a.length - 1]), (option = params['$[]'](params.$keys()['$[]'](0))), params.$keys()['$[]'](0))) : ($eqeqeq(true, ($ret_or_1 = params)) ? ((($a = ["over", user_bloc], $send(self.over_code, '[]=', $a), $a[$a.length - 1]), "over")) : ($eqeqeq("over", $ret_or_1) ? ((($a = ["over", user_bloc], $send(self.over_code, '[]=', $a), $a[$a.length - 1]), "over")) : ($eqeqeq("enter", $ret_or_1) ? ((($a = ["enter", user_bloc], $send(self.over_code, '[]=', $a), $a[$a.length - 1]), "enter")) : ($eqeqeq("leave", $ret_or_1) ? ((($a = ["leave", user_bloc], $send(self.over_code, '[]=', $a), $a[$a.length - 1]), "leave")) : ("over"))))));
    self.over['$[]='](params, option);
    return params;}, {$$s: self});
  self.$new((new Map([["particle", "targets"], ["category", "event"], ["type", "string"]])));
  self.$new((new Map([["particle", "start"], ["category", "event"], ["type", "boolean"]])));
  $send(self, 'new', [(new Map([["pre", "start"]]))], function $$7(_value, user_proc){var self = $$7.$$s == null ? this : $$7.$$s;

    
    if (_value == null) _value = nil;
    if (user_proc == null) user_proc = nil;
    return (self.animation_start_proc = user_proc);}, {$$s: self});
  self.$new((new Map([["particle", "stop"], ["category", "event"], ["type", "boolean"]])));
  $send(self, 'new', [(new Map([["pre", "stop"]]))], function $$8(_value, user_proc){var self = $$8.$$s == null ? this : $$8.$$s;

    
    if (_value == null) _value = nil;
    if (user_proc == null) user_proc = nil;
    return (self.animation_stop_proc = user_proc);}, {$$s: self});
  self.$new((new Map([["particle", "begin"], ["category", "event"], ["type", "time"]])));
  self.$new((new Map([["particle", "end"], ["category", "event"], ["type", "time"]])));
  self.$new((new Map([["particle", "duration"], ["category", "event"], ["type", "int"]])));
  self.$new((new Map([["particle", "mass"], ["category", "event"], ["type", "int"]])));
  self.$new((new Map([["particle", "damping"], ["category", "event"], ["type", "int"]])));
  self.$new((new Map([["particle", "stiffness"], ["category", "event"], ["type", "int"]])));
  self.$new((new Map([["particle", "velocity"], ["category", "event"], ["type", "int"]])));
  self.$new((new Map([["particle", "repeat"], ["category", "event"], ["type", "boolean"]])));
  self.$new((new Map([["particle", "ease"], ["category", "event"], ["type", "boolean"]])));
  self.$new((new Map([["particle", "keyboard"], ["category", "event"], ["type", "hash"], ["store", false]])));
  $send(self, 'new', [(new Map([["sanitizer", "keyboard"]]))], function $$9(params, user_bloc){var $a, self = $$9.$$s == null ? this : $$9.$$s, $ret_or_1 = nil, option = nil;
    if (self.keyboard == null) self.keyboard = nil;
    if (self.keyboard_code == null) self.keyboard_code = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    self.keyboard = ($truthy(($ret_or_1 = self.keyboard)) ? ($ret_or_1) : ((new Map())));
    self.keyboard_code = ($truthy(($ret_or_1 = self.keyboard_code)) ? ($ret_or_1) : ((new Map())));
    option = (new Map());
    params = ($truthy(params['$instance_of?']($$('Hash'))) ? (((option = params['$[]'](params.$keys()['$[]'](0))), "remove")) : ($eqeqeq(true, ($ret_or_1 = params)) ? ((($a = ["press", user_bloc], $send(self.keyboard_code, '[]=', $a), $a[$a.length - 1]), "press")) : ($eqeqeq("down", $ret_or_1) ? ((($a = ["down", user_bloc], $send(self.keyboard_code, '[]=', $a), $a[$a.length - 1]), "down")) : ($eqeqeq("up", $ret_or_1) ? ((($a = ["up", user_bloc], $send(self.keyboard_code, '[]=', $a), $a[$a.length - 1]), "up")) : ($eqeqeq("press", $ret_or_1) ? ((($a = ["press", user_bloc], $send(self.keyboard_code, '[]=', $a), $a[$a.length - 1]), "press")) : ($eqeqeq("remove", $ret_or_1) ? ((($a = ["remove", user_bloc], $send(self.keyboard_code, '[]=', $a), $a[$a.length - 1]), "remove")) : ((($a = ["press", user_bloc], $send(self.keyboard_code, '[]=', $a), $a[$a.length - 1]), (option = params), "press"))))))));
    self.keyboard['$[]='](params, option);
    return params;}, {$$s: self});
  self.$new((new Map([["particle", "resize"], ["category", "event"], ["type", "boolean"], ["store", false]])));
  $send(self, 'new', [(new Map([["sanitizer", "resize"]]))], function $$10(params, user_bloc){var $a, self = $$10.$$s == null ? this : $$10.$$s, $ret_or_1 = nil, option = nil;
    if (self.resize == null) self.resize = nil;
    if (self.resize_code == null) self.resize_code = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    self.resize = ($truthy(($ret_or_1 = self.resize)) ? ($ret_or_1) : ((new Map())));
    self.resize_code = ($truthy(($ret_or_1 = self.resize_code)) ? ($ret_or_1) : ((new Map())));
    option = (new Map([["min", (new Map([["width", 10], ["height", 10]]))], ["max", (new Map([["width", 3000], ["height", 3000]]))]]));
    params = ($truthy(params['$instance_of?']($$('Hash'))) ? ((($a = ["resize", user_bloc], $send(self.resize_code, '[]=', $a), $a[$a.length - 1]), (option = params['$[]'](params.$keys()['$[]'](0))), "resize")) : ($eqeqeq(true, ($ret_or_1 = params)) ? ((($a = ["resize", user_bloc], $send(self.resize_code, '[]=', $a), $a[$a.length - 1]), "resize")) : ($eqeqeq("remove", $ret_or_1) ? ("remove") : ((($a = ["resize", user_bloc], $send(self.resize_code, '[]=', $a), $a[$a.length - 1]), (option = params), "resize")))));
    self.resize['$[]='](params, option);
    return params;}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "overflow"], ["category", "event"], ["type", "boolean"]]))], function $$11(params, bloc){var self = $$11.$$s == null ? this : $$11.$$s, $ret_or_1 = nil;
    if (self.overflow_code == null) self.overflow_code = nil;

    
    if (params == null) params = nil;
    if (bloc == null) bloc = nil;
    self.overflow_code = ($truthy(($ret_or_1 = self.overflow_code)) ? ($ret_or_1) : ((new Map())));
    self.$instance_variable_get("@overflow_code")['$[]=']("overflow", bloc);
    return params;}, {$$s: self});
  return $send(self, 'new', [(new Map([["particle", "animate"], ["category", "event"], ["type", "hash"]]))], function $$12(params){var self = $$12.$$s == null ? this : $$12.$$s;

    
    if (params == null) params = nil;
    if ($truthy(params['$instance_of?']($$('Hash')))) {
      params = (new Map([["from", 0], ["to", 300], ["duration", 1000]])).$merge(params)
    } else {
      params = (new Map([["from", 0], ["to", 300], ["duration", 1000]]))
    };
    return self.$html().$play_animation(params);}, {$$s: self});
};

Opal.modules["atome/genesis/particles/geometry"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $rb_divide = Opal.rb_divide, $rb_times = Opal.rb_times, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,instance_of?,[],[]=,==,width,height,/,*,each,attached,size,grab');
  
  self.$new((new Map([["particle", "width"], ["category", "geometry"], ["type", "int"]])));
  self.$new((new Map([["particle", "height"], ["category", "geometry"], ["type", "int"]])));
  return $send(self, 'new', [(new Map([["particle", "size"], ["category", "geometry"], ["type", "int"]]))], function $$1(params){var self = $$1.$$s == null ? this : $$1.$$s, $ret_or_1 = nil, original_width = nil, original_height = nil;

    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      params = (new Map([["value", params]]))
    };
    if ($truthy(($ret_or_1 = params['$[]']("recursive")))) {
      $ret_or_1
    } else {
      params['$[]=']("recursive", false)
    };
    if ($truthy(($ret_or_1 = params['$[]']("reference")))) {
      $ret_or_1
    } else {
      params['$[]=']("reference", "x")
    };
    if ($truthy(($ret_or_1 = params['$[]']("target")))) {
      $ret_or_1
    } else {
      params['$[]=']("target", "self")
    };
    if ($truthy(($ret_or_1 = params['$[]']("propagate")))) {
      $ret_or_1
    } else {
      params['$[]=']("propagate", "raw")
    };
    if ($eqeq(params['$[]']("reference"), "x")) {
      
      original_width = self.$width();
      self.$width(params['$[]']("value"));
      self.$height($rb_divide($rb_times(self.$height(), params['$[]']("value")), original_width));
    } else {
      
      original_height = self.$height();
      self.$height(params['$[]']("value"));
      self.$width($rb_divide($rb_times(self.$width(), params['$[]']("value")), original_height));
    };
    if ($truthy(params['$[]']("recursive"))) {
      return $send(self.$attached(), 'each', [], function $$2(atome_id){var self = $$2.$$s == null ? this : $$2.$$s;

        
        if (atome_id == null) atome_id = nil;
        return self.$grab(atome_id).$size(params);}, {$$s: self})
    } else {
      return nil
    };}, {$$s: self});
};

Opal.modules["atome/genesis/particles/hierarchy"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $truthy = Opal.truthy, $def = Opal.def, $eqeq = Opal.eqeq, $send = Opal.send, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('attach,grab,delete,attached,==,attached=,include?,push,detach_child,render,to_proc,new,attachment_common,instance_of?,each,<<,id,instance_variable_get,instance_variable_set,remove,apply,detach_atome');
  
  
  $def(self, '$detach_child', function $$detach_child(child) {
    var self = this, parent = nil;
    if (self.id == null) self.id = nil;

    
    if (!$truthy(child.$attach())) {
      return nil
    };
    parent = self.$grab(child.$attach());
    return parent.$attached().$delete(self.id);
  });
  
  $def(self, '$attachment_common', function $$attachment_common(child_id, parents_id, direction) {
    var user_proc = $$attachment_common.$$p || nil, self = this, parent_found = nil, $ret_or_1 = nil, child_found = nil;
    if (self.id == null) self.id = nil;

    $$attachment_common.$$p = null;
    
    ;
    parent_found = self.$grab(parents_id);
    if ($eqeq(direction, "attach")) {
      if ($truthy(parent_found)) {
        
        if ($truthy(($ret_or_1 = parent_found.$attached()))) {
          $ret_or_1
        } else {
          parent_found['$attached=']([])
        };
        if (!$truthy(parent_found.$attached()['$include?'](self.id))) {
          parent_found.$attached().$push(self.id)
        };
        self.$detach_child(self);
        return $send(self, 'render', ["attach", parents_id], user_proc.$to_proc());
      } else {
        return nil
      }
    } else {
      
      child_found = self.$grab(child_id);
      child_found.$attach(parents_id);
      return $send(child_found, 'render', ["attach", parents_id], user_proc.$to_proc());
    };
  });
  $send(self, 'new', [(new Map([["particle", "attach"], ["category", "hierarchy"], ["type", "string"], ["render", false]]))], function $$1(parents_id){var user_proc = $$1.$$p || nil, self = $$1.$$s == null ? this : $$1.$$s;
    if (self.id == null) self.id = nil;

    $$1.$$p = null;
    
    ;
    if (parents_id == null) parents_id = nil;
    $send(self, 'attachment_common', [self.id, parents_id, "attach"], user_proc.$to_proc());
    return parents_id;}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "attached"], ["category", "hierarchy"], ["type", "string"], ["render", false]]))], function $$3(children_ids){var user_proc = $$3.$$p || nil, self = $$3.$$s == null ? this : $$3.$$s, parents_id = nil;
    if (self.id == null) self.id = nil;

    $$3.$$p = null;
    
    ;
    if (children_ids == null) children_ids = nil;
    if (!$truthy(children_ids['$instance_of?']($$('Array')))) {
      children_ids = [children_ids]
    };
    parents_id = self.id;
    $send(children_ids, 'each', [], function $$4(children_id){var self = $$4.$$s == null ? this : $$4.$$s;

      
      if (children_id == null) children_id = nil;
      return $send(self, 'attachment_common', [children_id, parents_id, "attached"], user_proc.$to_proc());}, {$$s: self});
    return children_ids;}, {$$s: self});
  $send(self, 'new', [(new Map([["sanitizer", "attached"]]))], function $$5(children_ids){
    
    if (children_ids == null) children_ids = nil;
    return children_ids;});
  $send(self, 'new', [(new Map([["particle", "apply"], ["category", "hierarchy"], ["type", "string"], ["render", false], ["store", false]]))], function $$6(parents_ids){var user_proc = $$6.$$p || nil, self = $$6.$$s == null ? this : $$6.$$s, $ret_or_1 = nil, children_ids = nil;
    if (self.apply == null) self.apply = nil;

    $$6.$$p = null;
    
    ;
    if (parents_ids == null) parents_ids = nil;
    self.apply = ($truthy(($ret_or_1 = self.apply)) ? ($ret_or_1) : ([]));
    if (!$truthy(parents_ids['$instance_of?']($$('Array')))) {
      parents_ids = [parents_ids]
    };
    $send(parents_ids, 'each', [], function $$7(parent_id){var self = $$7.$$s == null ? this : $$7.$$s;
      if (self.apply == null) self.apply = nil;

      
      if (parent_id == null) parent_id = nil;
      self.apply.$delete(parent_id);
      return self.apply['$<<'](parent_id);}, {$$s: self});
    parents_ids = self.apply;
    children_ids = [self.$id()];
    $send(parents_ids, 'each', [], function $$8(parent_id){var self = $$8.$$s == null ? this : $$8.$$s, parent_found = nil, parent_affect = nil, affect_element = nil;

      
      if (parent_id == null) parent_id = nil;
      parent_found = self.$grab(parent_id);
      parent_affect = parent_found.$instance_variable_get("@affect");
      if (!$truthy(parent_affect['$instance_of?']($$('Array')))) {
        parent_found.$instance_variable_set("@affect", [])
      };
      affect_element = parent_found.$instance_variable_get("@affect");
      return $send(children_ids, 'each', [], function $$9(child_id){var $a, self = $$9.$$s == null ? this : $$9.$$s, child_found = nil;

        
        if (child_id == null) child_id = nil;
        affect_element.$delete(child_id);
        affect_element['$<<'](child_id);
        child_found = self.$grab(child_id);
        return ($a = child_found, ($a === nil || $a == null) ? nil : $send($a, 'render', ["apply", parent_found], user_proc.$to_proc()));}, {$$s: self});}, {$$s: self});
    self.apply = parents_ids;
    return parents_ids;}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "affect"], ["category", "hierarchy"], ["type", "string"], ["render", false]]))], function $$10(children_ids){var user_proc = $$10.$$p || nil, self = $$10.$$s == null ? this : $$10.$$s;

    $$10.$$p = null;
    
    ;
    if (children_ids == null) children_ids = nil;
    if (!$truthy(children_ids['$instance_of?']($$('Array')))) {
      children_ids = [children_ids]
    };
    $send(children_ids, 'each', [], function $$11(child_id){var self = $$11.$$s == null ? this : $$11.$$s, child_found = nil;

      
      if (child_id == null) child_id = nil;
      child_found = self.$grab(child_id);
      if (!$eqeq(child_found.$id(), "black_matter")) {
        child_found.$remove((new Map([["all", "paint"]])))
      };
      return $send(child_found, 'apply', [[self.$id()]], user_proc.$to_proc());}, {$$s: self});
    return children_ids;}, {$$s: self});
  self.$new((new Map([["particle", "detached"], ["category", "hierarchy"], ["type", "string"], ["store", false]])));
  $send(self, 'new', [(new Map([["sanitizer", "detached"]]))], function $$12(values){var self = $$12.$$s == null ? this : $$12.$$s;

    
    if (values == null) values = nil;
    if ($truthy(values['$instance_of?']($$('Array')))) {
      $send(values, 'each', [], function $$13(value){var self = $$13.$$s == null ? this : $$13.$$s;

        
        if (value == null) value = nil;
        return self.$detach_atome(value);}, {$$s: self})
    } else {
      
      self.$detach_atome(values);
      values = [values];
    };
    return values;}, {$$s: self});
  return self.$new((new Map([["particle", "collect"], ["category", "hierarchy"], ["type", "string"]])));
};

Opal.modules["atome/genesis/particles/identity"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,to_sym,instance_of?,each,<<,grab,collect=,==,border,selection,current_user,delete,collect');
  
  self.$new((new Map([["particle", "real"], ["category", "identity"], ["type", "string"]])));
  self.$new((new Map([["particle", "type"], ["category", "identity"], ["type", "string"]])));
  self.$new((new Map([["particle", "id"], ["category", "identity"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["sanitizer", "id"]]))], function $$1(params){
    
    if (params == null) params = nil;
    params = params.$to_sym();
    return params;});
  self.$new((new Map([["particle", "name"], ["category", "identity"], ["type", "string"]])));
  self.$new((new Map([["particle", "active"], ["category", "identity"], ["type", "boolean"]])));
  self.$new((new Map([["particle", "markup"], ["category", "identity"], ["type", "string"]])));
  self.$new((new Map([["particle", "bundle"], ["category", "identity"], ["type", "string"]])));
  self.$new((new Map([["particle", "data"], ["category", "identity"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["particle", "category"], ["category", "identity"], ["type", "string"], ["store", false]]))], function $$2(category_names){var self = $$2.$$s == null ? this : $$2.$$s;

    
    if (category_names == null) category_names = nil;
    if (!$truthy(category_names['$instance_of?']($$('Array')))) {
      category_names = [category_names]
    };
    return $send(category_names, 'each', [], function $$3(category_name){var self = $$3.$$s == null ? this : $$3.$$s;
      if (self.category == null) self.category = nil;

      
      if (category_name == null) category_name = nil;
      return self.category['$<<'](category_name);}, {$$s: self});}, {$$s: self});
  self.$new((new Map([["particle", "selection"], ["category", "identity"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["read", "selection"]]))], function $$4(params_get){var self = $$4.$$s == null ? this : $$4.$$s, selector = nil;

    
    if (params_get == null) params_get = nil;
    selector = self.$grab("selector");
    selector['$collect='](params_get);
    return selector;}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "selected"], ["category", "identity"], ["type", "boolean"]]))], function $$5(params){var self = $$5.$$s == null ? this : $$5.$$s;
    if (self.id == null) self.id = nil;

    
    if (params == null) params = nil;
    if ($eqeq(params, true)) {
      
      self.$border((new Map([["thickness", 3], ["red", 1], ["green", 1], ["blue", 1], ["alpha", 1], ["pattern", "dotted"]])));
      self.$border((new Map([["thickness", 10], ["pattern", "solid"], ["color", "red"]])));
      self.$grab($$('Universe').$current_user()).$selection()['$<<'](self.id);
    } else if ($eqeq(params, false)) {
      
      self.$border((new Map([["alpha", 0], ["thickness", 0]])));
      self.$grab($$('Universe').$current_user()).$selection().$collect().$delete(self.id);
    };
    return params;}, {$$s: self});
  self.$new((new Map([["particle", "format"], ["category", "identity"], ["type", "string"]])));
  self.$new((new Map([["particle", "alien"], ["category", "identity"], ["type", "string"]])));
  return self.$new((new Map([["particle", "email"], ["category", "identity"], ["type", "string"]])));
};

Opal.modules["atome/genesis/particles/material"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,each,send,instance_of?,[],delete_at,data,map,keys,delete,color,paint,shadow,border,==,puts,classes,[]=,|,id,gsub,dup,affect,apply,grab');
  
  self.$new((new Map([["particle", "component"], ["category", "material"], ["type", "string"]])));
  self.$new((new Map([["particle", "edit"], ["category", "material"], ["type", "boolean"]])));
  self.$new((new Map([["particle", "style"], ["category", "material"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["pre", "style"]]))], function $$1(styles_send, _user_proc){var self = $$1.$$s == null ? this : $$1.$$s;

    
    if (styles_send == null) styles_send = nil;
    if (_user_proc == null) _user_proc = nil;
    return $send(styles_send, 'each', [], function $$2(particle_send, value){var self = $$2.$$s == null ? this : $$2.$$s;

      
      if (particle_send == null) particle_send = nil;
      if (value == null) value = nil;
      return self.$send(particle_send, value);}, {$$s: self});}, {$$s: self});
  self.$new((new Map([["particle", "hide"], ["category", "material"], ["type", "boolean"]])));
  $send(self, 'new', [(new Map([["particle", "remove"], ["category", "property"], ["type", "hash"]]))], function $$3(params){var self = $$3.$$s == null ? this : $$3.$$s, column = nil;

    
    if (params == null) params = nil;
    if ($truthy(params['$instance_of?']($$('Hash')))) {
      
      if ($truthy(params['$[]']("row"))) {
        self.$data().$delete_at(params['$[]']("row"))
      } else if ($truthy(params['$[]']("column"))) {
        
        column = params['$[]']("column");
        $send(self.$data(), 'map', [], function $$4(hash){
          
          if (hash == null) hash = nil;
          if ($truthy(hash.$keys()['$[]'](column))) {
            hash.$delete(hash.$keys()['$[]'](column))
          };
          return hash;});
      };
      return params;
    } else {
      return params
    };}, {$$s: self});
  $send(self, 'new', [(new Map([["post", "remove"]]))], function $$5(params){var self = $$5.$$s == null ? this : $$5.$$s;

    
    if (params == null) params = nil;
    if ($truthy(params['$instance_of?']($$('Hash')))) {
      
      switch (params['$[]']("all").valueOf()) {
        case "color":
          $send(self.$color(), 'each', [], function $$6(atome_id_found){var self = $$6.$$s == null ? this : $$6.$$s;
            if (self.apply == null) self.apply = nil;

            
            if (atome_id_found == null) atome_id_found = nil;
            return self.apply.$delete(atome_id_found);}, {$$s: self})
          break;
        case "paint":
          $send(self.$paint(), 'each', [], function $$7(atome_id_found){var self = $$7.$$s == null ? this : $$7.$$s;
            if (self.apply == null) self.apply = nil;

            
            if (atome_id_found == null) atome_id_found = nil;
            return self.apply.$delete(atome_id_found);}, {$$s: self})
          break;
        case "shadow":
          $send(self.$shadow(), 'each', [], function $$8(atome_id_found){var self = $$8.$$s == null ? this : $$8.$$s;
            if (self.apply == null) self.apply = nil;

            
            if (atome_id_found == null) atome_id_found = nil;
            return self.apply.$delete(atome_id_found);}, {$$s: self})
          break;
        case "border":
          $send(self.$border(), 'each', [], function $$9(atome_id_found){var self = $$9.$$s == null ? this : $$9.$$s;
            if (self.apply == null) self.apply = nil;

            
            if (atome_id_found == null) atome_id_found = nil;
            return self.apply.$delete(atome_id_found);}, {$$s: self})
          break;
        default:
          $send(params, 'each', [], function $$10(particle, value){var self = $$10.$$s == null ? this : $$10.$$s;
            if (self.category == null) self.category = nil;

            
            if (particle == null) particle = nil;
            if (value == null) value = nil;
            
            switch (particle.valueOf()) {
              case "category":
                if ($eqeq(particle, "category")) {
                  return self.category.$delete(value)
                } else {
                  return nil
                }
                break;
              default:
                return self.$puts("write code to remove atome applied")
            };}, {$$s: self})
      }
    };
    return params;}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "classes"], ["category", "material"], ["type", "json"]]))], function $$11(value){var $a, self = $$11.$$s == null ? this : $$11.$$s, $logical_op_recvr_tmp_1 = nil, $ret_or_1 = nil, $binary_op_recvr_tmp_1 = nil;

    
    if (value == null) value = nil;
    
    $logical_op_recvr_tmp_1 = $$('Universe').$classes();
    if ($truthy(($ret_or_1 = $logical_op_recvr_tmp_1['$[]'](value)))) {
      $ret_or_1
    } else {
      $logical_op_recvr_tmp_1['$[]='](value, [])
    };;
    
    $binary_op_recvr_tmp_1 = $$('Universe').$classes();
    return ($a = [value, $binary_op_recvr_tmp_1['$[]'](value)['$|']([self.$id()])], $send($binary_op_recvr_tmp_1, '[]=', $a), $a[$a.length - 1]);;}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "remove_classes"], ["category", "material"], ["type", "boolean"]]))], function $$12(value){var self = $$12.$$s == null ? this : $$12.$$s;

    
    if (value == null) value = nil;
    return $$('Universe').$classes()['$[]'](value).$delete(self.$id());}, {$$s: self});
  self.$new((new Map([["particle", "definition"], ["category", "material"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["sanitizer", "definition"]]))], function $$13(params){
    
    if (params == null) params = nil;
    params = params.$gsub(/<svg[^>]*>|<\/svg>/, "");
    return params;});
  self.$new((new Map([["particle", "gradient"], ["category", "material"], ["type", "int"]])));
  self.$new((new Map([["particle", "thickness"], ["category", "material"], ["type", "int"]])));
  $send(self, 'new', [(new Map([["after", "thickness"]]))], function $$14(params){var self = $$14.$$s == null ? this : $$14.$$s, a = nil;

    
    if (params == null) params = nil;
    a = self.$affect().$dup();
    $send(a, 'each', [], function $$15(atome_to_refresh){var self = $$15.$$s == null ? this : $$15.$$s;

      
      if (atome_to_refresh == null) atome_to_refresh = nil;
      return self.$grab(atome_to_refresh).$apply(self.$id());}, {$$s: self});
    return params;}, {$$s: self});
  self.$new((new Map([["particle", "pattern"], ["category", "material"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["after", "pattern"]]))], function $$16(params){var self = $$16.$$s == null ? this : $$16.$$s, a = nil;

    
    if (params == null) params = nil;
    a = self.$affect().$dup();
    $send(a, 'each', [], function $$17(atome_to_refresh){var self = $$17.$$s == null ? this : $$17.$$s;

      
      if (atome_to_refresh == null) atome_to_refresh = nil;
      return self.$grab(atome_to_refresh).$apply(self.$id());}, {$$s: self});
    return params;}, {$$s: self});
  self.$new((new Map([["particle", "fill"], ["category", "material"], ["type", "array"]])));
  return self.$new((new Map([["particle", "opacity"], ["category", "material"], ["type", "int"]])));
};

Opal.modules["atome/genesis/particles/property"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send, $thrower = Opal.thrower, $rb_minus = Opal.rb_minus, $t_$17 = $thrower('return'), self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('match,to_i,[],to_f,new,dup,affect,each,apply,grab,id,[]=,data,keys,insert,nil?,puts,sort_by!,values,-,instance_of?,to_s,is_a?,respond_to?,render,to_proc,behavior,instance_exec');
  
  
  $def(self, '$extract_rgb_alpha', function $$extract_rgb_alpha(color_string) {
    var match_data = nil, red = nil, green = nil, blue = nil, alpha = nil;

    
    match_data = color_string.$match(/rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)/);
    red = match_data['$[]'](1).$to_i();
    green = match_data['$[]'](2).$to_i();
    blue = match_data['$[]'](3).$to_i();
    alpha = ($truthy(match_data['$[]'](4)) ? (match_data['$[]'](4).$to_f()) : (nil));
    return (new Map([["red", red], ["green", green], ["blue", blue], ["alpha", alpha]]));
  });
  $send(self, 'new', [(new Map([["particle", "red"], ["category", "property"], ["type", "string"]]))], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

    return self}, {$$s: self});
  $send(self, 'new', [(new Map([["after", "red"]]))], function $$2(params){var self = $$2.$$s == null ? this : $$2.$$s, a = nil;

    
    if (params == null) params = nil;
    a = self.$affect().$dup();
    $send(a, 'each', [], function $$3(atome_to_refresh){var self = $$3.$$s == null ? this : $$3.$$s;

      
      if (atome_to_refresh == null) atome_to_refresh = nil;
      return self.$grab(atome_to_refresh).$apply(self.$id());}, {$$s: self});
    return params;}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "green"], ["category", "property"], ["type", "string"]]))], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

    return self}, {$$s: self});
  $send(self, 'new', [(new Map([["after", "green"]]))], function $$5(params){var self = $$5.$$s == null ? this : $$5.$$s, a = nil;

    
    if (params == null) params = nil;
    a = self.$affect().$dup();
    $send(a, 'each', [], function $$6(atome_to_refresh){var self = $$6.$$s == null ? this : $$6.$$s;

      
      if (atome_to_refresh == null) atome_to_refresh = nil;
      return self.$grab(atome_to_refresh).$apply(self.$id());}, {$$s: self});
    return params;}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "blue"], ["category", "property"], ["type", "string"]]))], function $$7(){var self = $$7.$$s == null ? this : $$7.$$s;

    return self}, {$$s: self});
  $send(self, 'new', [(new Map([["after", "blue"]]))], function $$8(params){var self = $$8.$$s == null ? this : $$8.$$s, a = nil;

    
    if (params == null) params = nil;
    a = self.$affect().$dup();
    $send(a, 'each', [], function $$9(atome_to_refresh){var self = $$9.$$s == null ? this : $$9.$$s;

      
      if (atome_to_refresh == null) atome_to_refresh = nil;
      return self.$grab(atome_to_refresh).$apply(self.$id());}, {$$s: self});
    return params;}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "alpha"], ["category", "property"], ["type", "string"]]))], function $$10(){var self = $$10.$$s == null ? this : $$10.$$s;

    return self}, {$$s: self});
  $send(self, 'new', [(new Map([["after", "alpha"]]))], function $$11(params){var self = $$11.$$s == null ? this : $$11.$$s, a = nil;

    
    if (params == null) params = nil;
    a = self.$affect().$dup();
    $send(a, 'each', [], function $$12(atome_to_refresh){var self = $$12.$$s == null ? this : $$12.$$s;

      
      if (atome_to_refresh == null) atome_to_refresh = nil;
      return self.$grab(atome_to_refresh).$apply(self.$id());}, {$$s: self});
    return params;}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "diffusion"], ["category", "property"], ["type", "string"]]))], function $$13(){var self = $$13.$$s == null ? this : $$13.$$s;

    return self}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "clean"], ["category", "property"], ["type", "boolean"]]))], function $$14(params){var self = $$14.$$s == null ? this : $$14.$$s, cell = nil, row_nb = nil, column_nb = nil;

    
    if (params == null) params = nil;
    cell = params['$[]']("cell");
    row_nb = cell['$[]'](0);
    column_nb = cell['$[]'](1);
    self.$data()['$[]'](row_nb)['$[]='](self.$data()['$[]'](row_nb).$keys()['$[]'](column_nb), "");
    return params;}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "insert"], ["category", "property"], ["type", "string"]]))], function $$15(params){var self = $$15.$$s == null ? this : $$15.$$s, content = nil, cell = nil, row_nb = nil, column_nb = nil, position_to_insert = nil;

    
    if (params == null) params = nil;
    if ($truthy(params['$[]']("cell"))) {
      
      content = params['$[]']("content");
      cell = params['$[]']("cell");
      row_nb = cell['$[]'](0);
      column_nb = cell['$[]'](1);
      self.$data()['$[]'](row_nb)['$[]='](self.$data()['$[]'](row_nb).$keys()['$[]'](column_nb), content);
    } else if ($truthy(params['$[]']("row"))) {
      
      position_to_insert = params['$[]']("row");
      self.$data().$insert(position_to_insert, (new Map()));
    } else if ($truthy(params['$[]']("column"))) {
    };
    return params;}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "sort"], ["category", "property"], ["type", "int"]]))], function $$16(params){var self = $$16.$$s == null ? this : $$16.$$s, column = nil, method = nil;
    if (self.data == null) self.data = nil;

    
    if (params == null) params = nil;
    column = params['$[]']("column");
    method = params['$[]']("method");
    if (($truthy(column['$nil?']()) || ($truthy(method['$nil?']())))) {
      
      self.$puts("Column and method parameters are required.");
      $t_$17.$throw(nil, $$16.$$is_lambda);
    };
    $send(self.data, 'sort_by!', [], function $$18(row){var value = nil;

      
      if (row == null) row = nil;
      value = row.$values()['$[]']($rb_minus(column, 1));
      if ($truthy(value['$instance_of?']($$('Atome')))) {
        return 0
      } else 
      switch (method.valueOf()) {
        case "alphabetic":
          return value.$to_s()
        case "numeric":
          if ($truthy(value['$is_a?']($$('Numeric')))) {
            return value
          } else if ($truthy(value['$respond_to?']("to_i"))) {
            return value.$to_i()
          } else {
            return 0
          }
          break;
        default:
          return value
      };});
    return params;}, {$$s: self, $$ret: $t_$17});
  self.$new((new Map([["particle", "inside"], ["render", false]])));
  $send(self, 'new', [(new Map([["initialized", "inside"]]))], function $$19(params){var user_proc = $$19.$$p || nil, self = $$19.$$s == null ? this : $$19.$$s;

    $$19.$$p = null;
    
    ;
    if (params == null) params = nil;
    return $send(self, 'render', ["inside", params], user_proc.$to_proc());}, {$$s: self});
  self.$new((new Map([["particle", "margin"]])));
  $send(self, 'new', [(new Map([["particle", "value"]]))], function $$21(val){var self = $$21.$$s == null ? this : $$21.$$s, pro_f = nil;

    
    if (val == null) val = nil;
    pro_f = self.$behavior()['$[]']("value");
    if ($truthy(pro_f['$is_a?']($$('Proc')))) {
      $send(self, 'instance_exec', [val], pro_f.$to_proc())
    };
    return val;}, {$$s: self});
  self.$new((new Map([["particle", "behavior"]])));
  return self.$new((new Map([["particle", "orientation"], ["type", "symbol"], ["category", "property"]])));
};

Opal.modules["atome/genesis/particles/security"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, storage_items = nil;

  Opal.add_stubs('new,instance_of?,[]=,encode,[],each,password,==,type,set_password');
  
  self.$new((new Map([["particle", "password"], ["category", "security"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["sanitizer", "password"]]))], function $$1(params){var $a, $b, self = $$1.$$s == null ? this : $$1.$$s;

    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      params = (new Map([["read", params], ["write", params]]))
    };
    params['$[]=']("global", $$('Black_matter').$encode(params['$[]']("global")));
    ($a = params['$[]']("read"), ($a === nil || $a == null) ? nil : $send($a, 'each', [], function $$2(k, v){var $b;

      
      if (k == null) k = nil;
      if (v == null) v = nil;
      return ($b = [k, $$('Black_matter').$encode(v)], $send(params['$[]']("read"), '[]=', $b), $b[$b.length - 1]);}));
    ($b = params['$[]']("write"), ($b === nil || $b == null) ? nil : $send($b, 'each', [], function $$3(k, v){var $c;

      
      if (k == null) k = nil;
      if (v == null) v = nil;
      return ($c = [k, $$('Black_matter').$encode(v)], $send(params['$[]']("write"), '[]=', $c), $c[$c.length - 1]);}));
    if (!$truthy(params['$[]']("read"))) {
      params['$[]=']("read", $$('Black_matter').$password())
    };
    if (!$truthy(params['$[]']("write"))) {
      params['$[]=']("write", $$('Black_matter').$password())
    };
    if ($eqeq(self.$type(), "human")) {
      $$('Black_matter').$set_password(params)
    };
    return params;}, {$$s: self});
  $send(self, 'new', [(new Map([["read", "password"]]))], function $$4(params){
    
    if (params == null) params = nil;
    return params;});
  return (storage_items = (new Map()));
};

Opal.modules["atome/genesis/particles/spatial"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $rb_plus = Opal.rb_plus, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,instance_of?,delete,==,type,collect,[],each,grab,backup,send,remove_layout,box,id,[]=,remove,category,display,attach,+');
  
  self.$new((new Map([["particle", "left"], ["category", "spatial"], ["type", "int"]])));
  self.$new((new Map([["particle", "right"], ["category", "spatial"], ["type", "int"]])));
  self.$new((new Map([["particle", "top"], ["category", "spatial"], ["type", "int"]])));
  self.$new((new Map([["particle", "bottom"], ["category", "spatial"], ["type", "int"]])));
  self.$new((new Map([["particle", "rotate"], ["category", "spacial"], ["type", "integer"]])));
  self.$new((new Map([["particle", "direction"], ["category", "spatial"], ["type", "string"]])));
  self.$new((new Map([["particle", "depth"], ["category", "spatial"], ["type", "integer"]])));
  self.$new((new Map([["particle", "position"], ["category", "spatial"], ["type", "int"]])));
  self.$new((new Map([["particle", "organise"], ["category", "spatial"], ["type", "string"]])));
  self.$new((new Map([["particle", "spacing"], ["category", "spatial"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["particle", "display"], ["category", "spatial"], ["type", "boolean"]]))], function $$1(params){
    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      params = (new Map([["mode", params]]))
    };
    return params;});
  $send(self, 'new', [(new Map([["particle", "layout"], ["category", "spatial"], ["type", "int"]]))], function $$2(params){var self = $$2.$$s == null ? this : $$2.$$s, mode_found = nil, $ret_or_1 = nil, elements_style = nil, atomes_to_organise = nil, container_name = nil, container = nil, container_class = nil, id_found = nil;

    
    if (params == null) params = nil;
    mode_found = ($truthy(($ret_or_1 = params.$delete("mode"))) ? ($ret_or_1) : ("list"));
    elements_style = ($truthy(($ret_or_1 = params.$delete("element"))) ? ($ret_or_1) : ((new Map())));
    atomes_to_organise = [];
    if ($eqeq(self.$type(), "group")) {
      atomes_to_organise = self.$collect()
    };
    if ($truthy(params['$[]']("listing"))) {
      atomes_to_organise = params['$[]']("listing")
    };
    if ($eqeq(mode_found, "default")) {
      $send(atomes_to_organise, 'each', [], function $$3(atome_id_to_organise){var self = $$3.$$s == null ? this : $$3.$$s, atome_found = nil;

        
        if (atome_id_to_organise == null) atome_id_to_organise = nil;
        atome_found = self.$grab(atome_id_to_organise);
        if (!$truthy(atome_found.$backup())) {
          return nil
        };
        $send(atome_found.$backup(), 'each', [], function $$4(particle, value){
          
          if (particle == null) particle = nil;
          if (value == null) value = nil;
          atome_found.$send("delete", particle);
          return atome_found.$send(particle, value);});
        return atome_found.$remove_layout();}, {$$s: self})
    } else {
      
      if ($truthy(params['$[]']("id"))) {
        
        container_name = params['$[]']("id");
        container = self.$grab("view").$box((new Map([["id", container_name]])));
        container_class = container_name;
      } else {
        
        container = self.$grab("view").$box();
        id_found = container.$id();
        params['$[]=']("id", id_found);
        container_class = id_found;
      };
      container.$remove((new Map([["category", "atome"]])));
      container.$category("matrix");
      if ($eqeq(mode_found, "list")) {
        params['$[]=']("organise", "1fr")
      };
      $send(params, 'each', [], function $$5(particle, value){
        
        if (particle == null) particle = nil;
        if (value == null) value = nil;
        return container.$send(particle, value);});
      $send(atomes_to_organise, 'each', [], function $$6(atome_id_to_organise){var $a, self = $$6.$$s == null ? this : $$6.$$s, atome_found = nil;

        
        if (atome_id_to_organise == null) atome_id_to_organise = nil;
        atome_found = self.$grab(atome_id_to_organise);
        ($a = atome_found.$backup(), ($a === nil || $a == null) ? nil : $send($a, 'each', [], function $$7(particle, value){
          
          if (particle == null) particle = nil;
          if (value == null) value = nil;
          atome_found.$send("delete", particle);
          return atome_found.$send(particle, value);}));
        atome_found.$remove_layout();
        atome_found.$display()['$[]=']("mode", mode_found);
        atome_found.$display()['$[]=']("layout", id_found);
        atome_found.$attach(container_class);
        atome_found.$remove((new Map([["category", "atome"]])));
        atome_found.$category(container_class);
        return $send(elements_style, 'each', [], function $$8(particle, value){var particle_to_save = nil;

          
          if (particle == null) particle = nil;
          if (value == null) value = nil;
          if (!$truthy(atome_found.$backup())) {
            atome_found.$backup((new Map()))
          };
          if (!$truthy(atome_found.$backup()['$[]'](particle))) {
            
            particle_to_save = ($truthy(($ret_or_1 = atome_found.$send(particle))) ? ($ret_or_1) : (0));
            atome_found.$backup()['$[]='](particle, particle_to_save);
          };
          return atome_found.$send(particle, value);});}, {$$s: self});
    };
    return params;}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "center"], ["category", "spatial"], ["type", "hash"]]))], function $$9(params){
    
    if (params == null) params = nil;
    if ($eqeq(params, true)) {
      params = (new Map([["x", 0], ["y", 0], ["dynamic", true]]))
    };
    return params;});
  return $send(self, 'new', [(new Map([["particle", "increment"], ["category", "spatial"], ["type", "hash"]]))], function $$10(params){var self = $$10.$$s == null ? this : $$10.$$s;

    
    if (params == null) params = nil;
    return $send(params, 'each', [], function $$11(particle, value){var self = $$11.$$s == null ? this : $$11.$$s, prev_value = nil;

      
      if (particle == null) particle = nil;
      if (value == null) value = nil;
      prev_value = self.$send(particle);
      return self.$send(particle, $rb_plus(value, prev_value));}, {$$s: self});}, {$$s: self});
};

Opal.modules["atome/genesis/particles/time"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('new');
  return self.$new((new Map([["particle", "markers"], ["category", "time"], ["type", "hash"]])))
};

Opal.modules["atome/genesis/particles/utility"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $def = Opal.def, $eqeq = Opal.eqeq, $hash_rehash = Opal.hash_rehash, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,is_a?,instance_exec,to_proc,[],tag,grab,attach,dup,attached,delete,instance_variable_set,each,delete_recursive,render,touch,==,to_sym,instance_of?,[]=,atome,include?,atome_list,puts,apply,send,<<,to_s,split,union,renderer_list,new_default_params,default_params,set_current_user,id,length,duplicate,infos,merge,keys,-,collect,last,to_i,each_with_index,data,js,+');
  
  self.$new((new Map([["particle", "renderers"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["particle", "code"], ["category", "utility"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["particle", "run"], ["category", "utility"], ["type", "boolean"]]))], function $$1(params){var self = $$1.$$s == null ? this : $$1.$$s, code_found = nil;
    if (self.code == null) self.code = nil;

    
    if (params == null) params = nil;
    code_found = self.code;
    if ($truthy(code_found['$is_a?']($$('Proc')))) {
      return $send(self, 'instance_exec', [params], code_found.$to_proc())
    } else {
      return nil
    };}, {$$s: self});
  
  $def(self, '$delete_recursive', function $$delete_recursive(atome_id) {
    var self = this, parent_id_found = nil, parent_found = nil, new_array = nil;

    
    if (($truthy(self.$grab(atome_id).$tag()) && (($truthy(self.$grab(atome_id).$tag()['$[]']("persistent")) || ($truthy(self.$grab(atome_id).$tag()['$[]']("system"))))))) {
      return nil
    };
    parent_id_found = self.$grab(atome_id).$attach();
    parent_found = self.$grab(parent_id_found);
    new_array = parent_found.$attached().$dup();
    new_array.$delete(atome_id);
    parent_found.$instance_variable_set("@attached", new_array);
    $send(self.$grab(atome_id).$attached(), 'each', [], function $$2(atome_id_found){var self = $$2.$$s == null ? this : $$2.$$s;

      
      if (atome_id_found == null) atome_id_found = nil;
      return self.$delete_recursive(atome_id_found);}, {$$s: self});
    self.$grab(atome_id).$render("delete", (new Map([["recursive", true]])));
    self.$grab(atome_id).$touch("remove");
    return $$('Universe').$delete(atome_id);
  });
  $send(self, 'new', [(new Map([["particle", "delete"], ["category", "utility"], ["type", "boolean"], ["render", false]]))], function $$3(params){var self = $$3.$$s == null ? this : $$3.$$s, id_found = nil, parent_found = nil;
    if (self.tag == null) self.tag = nil;
    if (self.id == null) self.id = nil;
    if (self.attach == null) self.attach = nil;
    if (self.aid == null) self.aid = nil;

    
    if (params == null) params = nil;
    if ($eqeq(params, true)) {
      if (($truthy(self.tag) && (($truthy(self.tag['$[]']("persistent")) || ($truthy(self.tag['$[]']("system"))))))) {
        return nil
      } else {
        
        self.$render("delete", params);
        id_found = self.id.$to_sym();
        parent_found = self.$grab(self.attach);
        parent_found.$attached().$delete(id_found);
        return $$('Universe').$delete(self.aid);
      }
    } else if ($truthy(params['$instance_of?']($$('Hash')))) {
      if ($truthy(params['$[]']("recursive"))) {
        if (($truthy(self.$grab(self.id).$tag()) && (($truthy(self.$grab(self.id).$tag()['$[]']("persistent")) || ($truthy(self.$grab(self.id).$tag()['$[]']("system"))))))) {
          return nil
        } else {
          
          $send(self.$attached(), 'each', [], function $$4(atttached_atomes){var self = $$4.$$s == null ? this : $$4.$$s;

            
            if (atttached_atomes == null) atttached_atomes = nil;
            return self.$delete_recursive(atttached_atomes);}, {$$s: self});
          self.$touch("remove");
          self.$render("delete", params);
          return $$('Universe').$delete(self.id);
        }
      } else {
        return $send(params, 'each', [], function $$5(param, value){var $a, self = $$5.$$s == null ? this : $$5.$$s;

          
          if (param == null) param = nil;
          if (value == null) value = nil;
          return ($a = [value, nil], $send(self.$atome()['$[]'](param), '[]=', $a), $a[$a.length - 1]);}, {$$s: self})
      }
    } else if ($truthy($$('Universe').$atome_list()['$include?'](params))) {
      return self.$puts("write code here : " + (self.$apply()) + " , " + (self.$attached()))
    } else if ($eqeq(params, "id")) {
      return nil
    } else {
      return self.$send(params, 0)
    };}, {$$s: self});
  self.$new((new Map([["particle", "clear"], ["category", "utility"], ["type", "boolean"]])));
  $send(self, 'new', [(new Map([["post", "clear"]]))], function $$6(){var self = $$6.$$s == null ? this : $$6.$$s, attached_found = nil;

    
    attached_found = [];
    $send(self.$attached(), 'each', [], function $$7(attached_id_found){
      
      if (attached_id_found == null) attached_id_found = nil;
      return attached_found['$<<'](attached_id_found);});
    return $send(attached_found, 'each', [], function $$8(child_id_found){var $a, self = $$8.$$s == null ? this : $$8.$$s, child_found = nil;

      
      if (child_id_found == null) child_id_found = nil;
      child_found = self.$grab(child_id_found);
      if (($truthy(child_found.$tag()) && ($truthy(child_found.$tag()['$[]']("system"))))) {
        return nil
      } else {
        return ($a = child_found, ($a === nil || $a == null) ? nil : $a.$delete(true))
      };}, {$$s: self});}, {$$s: self});
  self.$new((new Map([["particle", "path"], ["category", "utility"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["particle", "schedule"], ["category", "utility"], ["type", "string"]]))], function $$9(date, proc){var self = $$9.$$s == null ? this : $$9.$$s, delimiters = nil, format_date = nil;

    
    if (date == null) date = nil;
    if (proc == null) proc = nil;
    date = date.$to_s();
    delimiters = [",", " ", ":", "-"];
    format_date = date.$split($$('Regexp').$union(delimiters));
    return $send($$('Universe').$renderer_list(), 'each', [], function $$10(renderer){var self = $$10.$$s == null ? this : $$10.$$s;

      
      if (renderer == null) renderer = nil;
      return $send(self, 'send', ["" + (renderer) + "_schedule", format_date], proc.$to_proc());}, {$$s: self});}, {$$s: self});
  self.$new((new Map([["particle", "cursor"], ["category", "utility"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["particle", "preset"], ["category", "utility"], ["type", "string"]]))], function $$11(params){var self = $$11.$$s == null ? this : $$11.$$s, params_to_send = nil;

    
    if (params == null) params = nil;
    if ($truthy(params['$instance_of?']($$('Hash')))) {
      
      $$('Essentials').$new_default_params(params);
      params_to_send = params;
    } else {
      
      params_to_send = $$('Essentials').$default_params()['$[]'](params).$dup();
      params_to_send.$delete("preset");
      params_to_send.$delete("type");
      $send(params_to_send, 'each', [], function $$12(particle_found, value){var self = $$12.$$s == null ? this : $$12.$$s;

        
        if (particle_found == null) particle_found = nil;
        if (value == null) value = nil;
        return self.$send(particle_found, value);}, {$$s: self});
      params_to_send = $hash_rehash(new Map([[params, params_to_send]]));
    };
    return params_to_send;}, {$$s: self});
  self.$new((new Map([["particle", "relations"], ["category", "utility"], ["type", "hash"]])));
  self.$new((new Map([["particle", "tag"], ["render", false], ["category", "utility"], ["type", "hash"]])));
  self.$new((new Map([["particle", "web"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["initialize", "unit"], ["value", (new Map())]])));
  $send(self, 'new', [(new Map([["particle", "unit"], ["store", false], ["type", "string"], ["category", "utility"]]))], function $$13(params){var self = $$13.$$s == null ? this : $$13.$$s;
    if (self.unit == null) self.unit = nil;

    
    if (params == null) params = nil;
    $send(params, 'each', [], function $$14(k, v){var self = $$14.$$s == null ? this : $$14.$$s;
      if (self.unit == null) self.unit = nil;

      
      if (k == null) k = nil;
      if (v == null) v = nil;
      self.unit['$[]='](k, v);
      return self.$send(k, self.$send(k));}, {$$s: self});
    return self.unit;}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "login"], ["category", "utility"], ["type", "string"]]))], function $$15(params){var self = $$15.$$s == null ? this : $$15.$$s;

    
    if (params == null) params = nil;
    if ($truthy(params)) {
      return self.$set_current_user(self.$id())
    } else {
      return nil
    };}, {$$s: self});
  self.$new((new Map([["particle", "hypertext"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["particle", "hyperedit"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["particle", "terminal"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["particle", "read"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["particle", "browse"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["particle", "copies"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["particle", "temporary"], ["category", "utility"], ["type", "int"]])));
  self.$new((new Map([["particle", "atomes"], ["category", "utility"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["particle", "match"], ["category", "utility"], ["type", "string"]]))], function $$16(params, _bloc){
    
    if (params == null) params = nil;
    if (_bloc == null) _bloc = nil;
    return params;});
  $send(self, 'new', [(new Map([["sanitizer", "match"]]))], function $$17(params, _bloc){
    
    if (params == null) params = nil;
    if (_bloc == null) _bloc = nil;
    if (!$truthy(params['$[]']("condition"))) {
      params['$[]=']("condition", (new Map([["min", (new Map([["width", 0]]))]])))
    };
    return params;});
  self.$new((new Map([["particle", "invert"], ["category", "utility"], ["type", "boolean"]])));
  self.$new((new Map([["particle", "option"], ["category", "utility"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["particle", "duplicate"], ["category", "utility"], ["type", "string"], ["store", false]]))], function $$18(params){var self = $$18.$$s == null ? this : $$18.$$s, copy_number = nil, attached_atomes = nil, attached_found = nil, infos_found = nil, keys_to_delete = nil, new_atome_id = nil, new_atome = nil, $ret_or_1 = nil;
    if (self.duplicate == null) self.duplicate = nil;
    if (self.id == null) self.id = nil;

    
    if (params == null) params = nil;
    copy_number = ($truthy(self.duplicate) ? (self.duplicate.$length()) : (0));
    attached_atomes = [];
    attached_found = self.$attached().$dup();
    $send(attached_found, 'each', [], function $$19(child_id_found){var self = $$19.$$s == null ? this : $$19.$$s, child_found = nil, new_child = nil;

      
      if (child_id_found == null) child_id_found = nil;
      child_found = self.$grab(child_id_found);
      if ($truthy(child_found)) {
        
        new_child = child_found.$duplicate((new Map()));
        return attached_atomes['$<<'](new_child.$id());
      } else {
        return nil
      };}, {$$s: self});
    params['$[]=']("attached", attached_atomes);
    infos_found = self.$infos().$dup();
    keys_to_delete = ["history", "callback", "duplicate", "copy", "paste", "touch_code", "html", "attached", "aid"];
    $send(keys_to_delete, 'each', [], function $$20(key){
      
      if (key == null) key = nil;
      return infos_found.$delete(key);});
    new_atome_id = ((("" + (self.id)) + "_copy_") + (copy_number)).$to_sym();
    infos_found['$[]=']("id", new_atome_id);
    infos_found = infos_found.$merge(params);
    new_atome = $$('Atome').$new(infos_found);
    self.duplicate = ($truthy(($ret_or_1 = self.duplicate)) ? ($ret_or_1) : ((new Map())));
    self.duplicate['$[]='](new_atome_id, new_atome);
    return new_atome;}, {$$s: self});
  $send(self, 'new', [(new Map([["after", "duplicate"]]))], function $$21(params){var self = $$21.$$s == null ? this : $$21.$$s;
    if (self.duplicate == null) self.duplicate = nil;

    
    if (params == null) params = nil;
    return self.duplicate['$[]'](self.duplicate.$keys()['$[]']($rb_minus(self.duplicate.$keys().$length(), 1)));}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "copy"], ["category", "utility"], ["type", "string"]]))], function $$22(items_id){var self = $$22.$$s == null ? this : $$22.$$s;

    
    if (items_id == null) items_id = nil;
    if (!$truthy(items_id['$instance_of?']($$('Array')))) {
      items_id = [items_id]
    };
    return self.$grab("copy").$collect()['$<<'](items_id);}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "paste"], ["category", "utility"], ["type", "string"]]))], function $$23(params){var self = $$23.$$s == null ? this : $$23.$$s, all_copies = nil, copies_found = nil, new_atomes = nil, applies_found = nil;

    
    if (params == null) params = nil;
    all_copies = self.$grab("copy").$collect();
    if ($eqeq(params, true)) {
      copies_found = all_copies.$last()
    } else if ($truthy(params['$instance_of?']($$('Integer')))) {
      copies_found = all_copies['$[]'](params.$to_i())
    } else if ($truthy(params['$instance_of?']($$('Array')))) {
      copies_found = [all_copies['$[]'](params['$[]'](0))['$[]'](params['$[]'](1))]
    };
    new_atomes = [];
    applies_found = [];
    $send(copies_found, 'each', [], function $$24(copy_found){var self = $$24.$$s == null ? this : $$24.$$s, new_atome = nil;
      if (self.id == null) self.id = nil;

      
      if (copy_found == null) copy_found = nil;
      new_atome = self.$grab(copy_found).$duplicate((new Map([["attach", self.id]])));
      new_atomes['$<<'](new_atome.$id());
      return applies_found['$<<'](new_atome.$apply());}, {$$s: self});
    $send(new_atomes, 'each_with_index', [], function $$25(id_found, index){var self = $$25.$$s == null ? this : $$25.$$s;

      
      if (id_found == null) id_found = nil;
      if (index == null) index = nil;
      return self.$grab(id_found).$apply(applies_found['$[]'](index));}, {$$s: self});
    return new_atomes;}, {$$s: self});
  $send(self, 'new', [(new Map([["read", "paste"]]))], function $$26(p){var self = $$26.$$s == null ? this : $$26.$$s;
    if (self.copy == null) self.copy = nil;

    
    if (p == null) p = nil;
    return self.copy;}, {$$s: self});
  self.$new((new Map([["particle", "backup"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["particle", "import"], ["category", "utility"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["particle", "compute"], ["category", "utility"], ["type", "string"]]))], function $$27(params){var $ret_or_1 = nil;

    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      params = (new Map([["particle", params]]))
    };
    if ($truthy(($ret_or_1 = params['$[]']("unit")))) {
      $ret_or_1
    } else {
      params['$[]=']("unit", "pixel")
    };
    if ($truthy(($ret_or_1 = params['$[]']("reference")))) {
      $ret_or_1
    } else {
      params['$[]=']("reference", "view")
    };
    return params;});
  $send(self, 'new', [(new Map([["particle", "get"], ["category", "utility"], ["type", "string"]]))], function $$28(params){var self = $$28.$$s == null ? this : $$28.$$s, cell = nil, row_nb = nil, column_nb = nil;

    
    if (params == null) params = nil;
    cell = params['$[]']("cell");
    row_nb = cell['$[]'](0);
    column_nb = cell['$[]'](1);
    return self.$data()['$[]'](row_nb)['$[]'](self.$data()['$[]'](row_nb).$keys()['$[]'](column_nb));}, {$$s: self});
  self.$new((new Map([["particle", "css"], ["category", "utility"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["read", "css"]]))], function $$29(){var self = $$29.$$s == null ? this : $$29.$$s;

    return $$('CssProxy').$new(self.$js(), nil, self)}, {$$s: self});
  self.$new((new Map([["particle", "holder"], ["category", "utility"], ["type", "atome"]])));
  $send(self, 'new', [(new Map([["particle", "executor"], ["category", "utility"], ["type", "hash"]]))], function $$30(params){var self = $$30.$$s == null ? this : $$30.$$s;

    
    if (params == null) params = nil;
    $send(params, 'each', [], function $$31(method, opt){var self = $$31.$$s == null ? this : $$31.$$s;

      
      if (method == null) method = nil;
      if (opt == null) opt = nil;
      return self.$send(method, opt);}, {$$s: self});
    return params;}, {$$s: self});
  $send(self, 'new', [(new Map([["particle", "tick"], ["category", "utility"], ["store", false], ["type", "hash"]]))], function $$32(val){var $a, self = $$32.$$s == null ? this : $$32.$$s, $ret_or_1 = nil;
    if (self.tick == null) self.tick = nil;

    
    if (val == null) val = nil;
    if ($truthy(($ret_or_1 = self.tick['$[]'](val)))) {
      $ret_or_1
    } else {
      self.tick['$[]='](val, 0)
    };
    self.tick['$[]='](val, ($a = [val, $rb_plus(self.tick['$[]'](val), 1)], $send(self.tick, '[]=', $a), $a[$a.length - 1]));
    return self.tick['$[]'](val);}, {$$s: self});
  self.$new((new Map([["particle", "storage"], ["category", "utility"], ["type", "hash"]])));
  return self.$new((new Map([["particle", "state"], ["category", "utility"], ["type", "symbol"]])));
};

Opal.modules["atome/utilities/security"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $send = Opal.send, $def = Opal.def, $truthy = Opal.truthy, $not = Opal.not, $eqeq = Opal.eqeq, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('each,[],[]=,encode,delete,!,==,check_password_destruction,puts');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.authorisations = $proto.password = nil;
    
    
    $def(self, '$authorise', function $$authorise(autorisations) {
      var $a, $b, self = this;

      
      ($a = autorisations['$[]']("read"), ($a === nil || $a == null) ? nil : $send($a, 'each', [], function $$1(k, v){var $b;

        
        if (k == null) k = nil;
        if (v == null) v = nil;
        return ($b = [k, $$('Black_matter').$encode(v)], $send(autorisations['$[]']("read"), '[]=', $b), $b[$b.length - 1]);}));
      ($b = autorisations['$[]']("write"), ($b === nil || $b == null) ? nil : $send($b, 'each', [], function $$2(k, v){var $c;

        
        if (k == null) k = nil;
        if (v == null) v = nil;
        return ($c = [k, $$('Black_matter').$encode(v)], $send(autorisations['$[]']("write"), '[]=', $c), $c[$c.length - 1]);}));
      return (self.authorisations = autorisations);
    });
    
    $def(self, '$check_password_destruction', function $$check_password_destruction(operation, element) {
      var self = this;

      
      if (!$truthy(self.authorisations['$[]']("destroy"))) {
        return nil
      };
      return self.authorisations['$[]'](operation).$delete(element);
    });
    
    $def(self, '$write_auth', function $$write_auth(element) {
      var self = this;

      if (((($truthy(self.password) && ($truthy(self.password['$[]']("write")))) && ($truthy(self.authorisations))) && ($truthy(self.authorisations['$[]']("write"))))) {
        
        if ($not(self.authorisations['$[]']("write")['$[]'](element))) {
          return false
        } else if ($eqeq(self.password['$[]']("write")['$[]'](element), self.authorisations['$[]']("write")['$[]'](element))) {
          
          self.$check_password_destruction("write", element);
          return true;
        } else if ($eqeq(self.authorisations['$[]']("write")['$[]']("atome"), self.password['$[]']("write")['$[]']("atome"))) {
          
          self.$puts("" + (self.authorisations['$[]']("write")['$[]']("atome")) + " == " + (self.password['$[]']("write")['$[]']("atome")));
          self.$check_password_destruction("write", element);
          return true;
        } else {
          
          self.$check_password_destruction("write", element);
          return false;
        };
        return self.$check_password_destruction("write", element);
      } else {
        return true
      }
    });
    return $def(self, '$read_auth', function $$read_auth(element) {
      var self = this;

      if (((($truthy(self.password) && ($truthy(self.password['$[]']("read")))) && ($truthy(self.authorisations))) && ($truthy(self.authorisations['$[]']("read"))))) {
        
        if ($not(self.authorisations['$[]']("read")['$[]'](element))) {
          return false
        } else if ($eqeq(self.password['$[]']("read")['$[]'](element), self.authorisations['$[]']("read")['$[]'](element))) {
          
          self.$check_password_destruction("read", element);
          return true;
        } else if ($eqeq(self.authorisations['$[]']("read")['$[]']("atome"), self.password['$[]']("read")['$[]']("atome"))) {
          
          self.$check_password_destruction("read", element);
          return true;
        } else {
          
          self.$check_password_destruction("read", element);
          return false;
        };
        return self.$check_password_destruction("read", element);
      } else {
        return true
      }
    });
  })($nesting[0], null, $nesting)
};

Opal.modules["renderers/html/atome"] = Opal.return_val(Opal.nil); /* Generated by Opal 1.8.2 */

Opal.modules["renderers/html/atome_html"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def, $thrower = Opal.thrower, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('to_f,eval');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.html = $proto.id = nil;
    
    
    $def(self, '$html', function $$html(obj) {
      var self = this;

      
      if (obj == null) obj = nil;
      if ($truthy(obj)) {
        return (self.html = obj)
      } else {
        return self.html
      };
    }, -1);
    return $def(self, '$to_px', function $$to_px(particle) {try { 
      var self = this, ruby_wasm_code = nil;

      
      ruby_wasm_code = "  var div = document.getElementById(\"" + (self.id) + "\");\n" + "  var style = window.getComputedStyle(div);\n" + "  var original_value = style.getPropertyValue(\"" + (particle) + "\");\n" + "  var parsed_value = parseInt(original_value);\n" + "  return parsed_value;\n";
      return $$('JS').$eval(ruby_wasm_code).$to_f();} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
  })($nesting[0], null, $nesting)
};

Opal.modules["renderers/html/communication"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('new,[]=,to_s,[],int8,js');
  return $send(self, 'new', [(new Map([["method", "language"], ["renderer", "html"]]))], function $$1(params){var $a, self = $$1.$$s == null ? this : $$1.$$s;

    
    if (params == null) params = nil;
    return ($a = ["innerHTML", self.$int8()['$[]'](params).$to_s()], $send(self.$js(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self})
};

Opal.modules["renderers/html/effect"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $eqeqeq = Opal.eqeqeq, $truthy = Opal.truthy, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,===,each,<<,join,end_with?,is_a?,style,html,==,[],backdropFilter,filter,affect');
  
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "smooth"], ["type", "string"]]))], function $$1(value, _user_proc){var self = $$1.$$s == null ? this : $$1.$$s, format_params = nil, $ret_or_1 = nil, data_collected = nil;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    format_params = ($eqeqeq($$('Array'), ($ret_or_1 = value)) ? (((data_collected = []), $send(value, 'each', [], function $$2(param){
      
      if (param == null) param = nil;
      return data_collected['$<<']("" + (param) + "px");}), data_collected.$join(" "))) : ($eqeqeq($$('Integer'), $ret_or_1) ? ("" + (value) + "px") : (($truthy(value['$is_a?']($$('String'))) && ($truthy(value['$end_with?']("%")))) ? (value) : ("" + (value) + "px"))));
    return self.$html().$style("border-radius", format_params);}, {$$s: self});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "blur"], ["type", "integer"]]))], function $$3(params, _user_proc){var self = $$3.$$s == null ? this : $$3.$$s;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    if (($eqeq(params['$[]']("affect"), "back") || ($eqeq(params['$[]']("affect"), "back")))) {
      return self.$html().$backdropFilter("blur", "" + (params['$[]']("value")) + "px")
    } else {
      return self.$html().$filter("blur", "" + (params['$[]']("value")) + "px")
    };}, {$$s: self});
  return $send(self, 'new', [(new Map([["renderer", "html"], ["method", "blur"], ["type", "integer"], ["specific", "shadow"]]))], function $$4(params, _user_proc){var self = $$4.$$s == null ? this : $$4.$$s;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    if ($eqeq(params['$[]']("affect"), "back")) {
      self.$html().$backdropFilter("blur", "" + (params['$[]']("value")) + "px")
    } else {
      self.$html().$filter("blur", "" + (params['$[]']("value")) + "px")
    };
    return self.$affect(self.$affect());}, {$$s: self});
};

Opal.modules["renderers/html/event"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('new,[],event,html,action,on,resize');
  
  $send(self, 'new', [(new Map([["method", "drag"], ["type", "symbol"], ["renderer", "html"]]))], function $$1(params){var self = $$1.$$s == null ? this : $$1.$$s, option = nil;
    if (self.drag == null) self.drag = nil;

    
    if (params == null) params = nil;
    option = self.drag['$[]'](params);
    return self.$html().$event("drag", params, option);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "drop"], ["type", "symbol"], ["renderer", "html"]]))], function $$2(params){var self = $$2.$$s == null ? this : $$2.$$s, option = nil;
    if (self.drop == null) self.drop = nil;

    
    if (params == null) params = nil;
    option = self.drop['$[]'](params);
    return self.$html().$event("drop", params, option);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "touch"], ["type", "integer"], ["renderer", "html"]]))], function $$3(params){var self = $$3.$$s == null ? this : $$3.$$s, option = nil;
    if (self.touch == null) self.touch = nil;

    
    if (params == null) params = nil;
    option = self.touch['$[]'](params);
    return self.$html().$event("touch", params, option);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "over"], ["type", "integer"], ["renderer", "html"]]))], function $$4(params){var self = $$4.$$s == null ? this : $$4.$$s, option = nil;
    if (self.over == null) self.over = nil;

    
    if (params == null) params = nil;
    option = self.over['$[]'](params);
    return self.$html().$event("over", params, option);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "keyboard"], ["renderer", "html"]]))], function $$5(params){var self = $$5.$$s == null ? this : $$5.$$s, option = nil;
    if (self.keyboard == null) self.keyboard = nil;

    
    if (params == null) params = nil;
    option = self.keyboard['$[]'](params);
    return self.$html().$event("keyboard", params, option);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "play"], ["renderer", "html"]]))], function $$6(params){var self = $$6.$$s == null ? this : $$6.$$s, option = nil;
    if (self.play == null) self.play = nil;

    
    if (params == null) params = true;
    option = self.play['$[]'](params);
    return self.$html().$action("play", params, option);}, {$$arity: -1, $$s: self});
  $send(self, 'new', [(new Map([["method", "on"], ["renderer", "html"]]))], function $$7(params){var self = $$7.$$s == null ? this : $$7.$$s, option = nil;
    if (self.on == null) self.on = nil;

    
    if (params == null) params = nil;
    option = self.on['$[]'](params);
    return self.$html().$on(params, option);}, {$$s: self});
  return $send(self, 'new', [(new Map([["method", "resize"], ["renderer", "html"]]))], function $$8(params, user_bloc){var self = $$8.$$s == null ? this : $$8.$$s, option = nil;
    if (self.resize == null) self.resize = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    option = self.resize['$[]'](params);
    return self.$html().$resize(params, option);}, {$$s: self});
};

Opal.modules["renderers/html/geometry"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,is_a?,[],[]=,js,style,html');
  
  $send(self, 'new', [(new Map([["method", "width"], ["renderer", "html"], ["type", "int"]]))], function $$1(params, _user_proc){var $a, self = $$1.$$s == null ? this : $$1.$$s, unit = nil, $ret_or_1 = nil;
    if (self.unit == null) self.unit = nil;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    if ($truthy(params['$is_a?']($$('Numeric')))) {
      unit = ($truthy(($ret_or_1 = self.unit['$[]']("width"))) ? ($ret_or_1) : ("px"))
    };
    return ($a = ["width", "" + (params) + (unit)], $send(self.$js()['$[]']("style"), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "height"], ["renderer", "html"], ["type", "int"]]))], function $$2(params, _user_proc){var $a, self = $$2.$$s == null ? this : $$2.$$s, unit = nil, $ret_or_1 = nil;
    if (self.unit == null) self.unit = nil;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    if ($truthy(params['$is_a?']($$('Numeric')))) {
      unit = ($truthy(($ret_or_1 = self.unit['$[]']("height"))) ? ($ret_or_1) : ("px"))
    };
    return ($a = ["height", "" + (params) + (unit)], $send(self.$js()['$[]']("style"), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
  return $send(self, 'new', [(new Map([["method", "size"], ["type", "int"], ["renderer", "html"], ["specific", "text"]]))], function $$3(value, _user_proc){var self = $$3.$$s == null ? this : $$3.$$s;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$style("fontSize", "" + (value) + "px");}, {$$s: self});
};

Opal.modules["renderers/html/hierarchy"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $rb_times = Opal.rb_times, $truthy = Opal.truthy, $eqeq = Opal.eqeq, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('new,append_to,html,type,each,shadow,grab,*,red,green,blue,alpha,left,top,[],blur,invert,==,option,<<,join,style,to_sym,affect,paint,diffusion,direction,params,rotate,gradient,last,border,thickness,pattern,colorize_svg_data');
  
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "attach"], ["type", "string"]]))], function $$1(parent_found, _user_proc){var self = $$1.$$s == null ? this : $$1.$$s;

    
    if (parent_found == null) parent_found = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$append_to(parent_found);}, {$$s: self});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "apply"], ["type", "string"]]))], function $$2(parent_found, _user_proc){var self = $$2.$$s == null ? this : $$2.$$s, shadows_to_apply = nil, drop_shadow = nil, box_shadow = nil, red = nil, green = nil, blue = nil, alpha = nil, gradients_to_apply = nil, full_gradient_to_apply = nil;

    
    if (parent_found == null) parent_found = nil;
    if (_user_proc == null) _user_proc = nil;
    
    switch (parent_found.$type().valueOf()) {
      case "shadow":
        
        shadows_to_apply = (new Map([["filter", []], ["boxShadow", []]]));
        $send(self.$shadow(), 'each', [], function $$3(shadow_id_found){var self = $$3.$$s == null ? this : $$3.$$s, shadow_found = nil, red = nil, green = nil, blue = nil, alpha = nil, left = nil, top = nil, blur = nil, inset = nil;

          
          if (shadow_id_found == null) shadow_id_found = nil;
          shadow_found = self.$grab(shadow_id_found);
          red = $rb_times(shadow_found.$red(), 255);
          green = $rb_times(shadow_found.$green(), 255);
          blue = $rb_times(shadow_found.$blue(), 255);
          alpha = shadow_found.$alpha();
          left = shadow_found.$left();
          top = shadow_found.$top();
          blur = shadow_found.$blur()['$[]']("value");
          if ($truthy(shadow_found.$invert())) {
            inset = "inset"
          };
          if ($eqeq(shadow_found.$option(), "natural")) {
            return shadows_to_apply['$[]']("filter")['$<<']("drop-shadow(" + (left) + "px " + (top) + "px " + (blur) + "px rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + "))")
          } else {
            return shadows_to_apply['$[]']("boxShadow")['$<<']("" + (left) + "px " + (top) + "px " + (blur) + "px rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ") " + (inset))
          };}, {$$s: self});
        drop_shadow = shadows_to_apply['$[]']("filter").$join(" ");
        box_shadow = shadows_to_apply['$[]']("boxShadow").$join(",");
        self.$html().$style("transform", "translate3d(0, 0, 0)");
        self.$html().$style("boxShadow", box_shadow);
        return self.$html().$style("filter", drop_shadow);
      case "color":
        
        red = $rb_times(parent_found.$red(), 255);
        green = $rb_times(parent_found.$green(), 255);
        blue = $rb_times(parent_found.$blue(), 255);
        alpha = parent_found.$alpha();
        self.$html().$style("backgroundColor", "rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ")");
        if ($eqeq(self.$type().$to_sym(), "border")) {
          return $send(self.$affect(), 'each', [], function $$4(at_found){var self = $$4.$$s == null ? this : $$4.$$s;

            
            if (at_found == null) at_found = nil;
            return self.$grab(at_found).$html().$style("border", "solid 2px rgba(" + (red) + "," + (green) + "," + (blue) + "," + (alpha) + ")");}, {$$s: self})
        } else {
          return nil
        };
        break;
      case "paint":
        
        gradients_to_apply = [];
        $send(self.$paint(), 'each', [], function $$5(paint_id){var self = $$5.$$s == null ? this : $$5.$$s, colors_to_apply = nil, paint_atome = nil, paint_diffusion = nil, paint_direction = nil, diffusion = nil, $ret_or_2 = nil, direction = nil;

          
          if (paint_id == null) paint_id = nil;
          colors_to_apply = [];
          paint_atome = self.$grab(paint_id);
          paint_diffusion = paint_atome.$diffusion();
          paint_direction = paint_atome.$direction();
          diffusion = ($truthy(($ret_or_2 = paint_diffusion)) ? ($ret_or_2) : ("linear"));
          if (($truthy(paint_direction) && ($eqeq(paint_direction, "linear")))) {
            direction = " to " + (self.$params()['$[]']("direction")) + ","
          } else if ($eqeq(diffusion, "linear")) {
            direction = " to bottom,"
          };
          if ($truthy(paint_atome.$rotate())) {
            direction = "" + (paint_atome.$rotate()) + "deg,"
          };
          $send(paint_atome.$gradient(), 'each', [], function $$6(color_id){var self = $$6.$$s == null ? this : $$6.$$s, color_found = nil;

            
            if (color_id == null) color_id = nil;
            color_found = self.$grab(color_id);
            red = $rb_times(color_found.$red(), 255);
            green = $rb_times(color_found.$green(), 255);
            blue = $rb_times(color_found.$blue(), 255);
            alpha = color_found.$alpha();
            return colors_to_apply['$<<']("rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ")");}, {$$s: self});
          colors_to_apply = colors_to_apply.$join(",");
          return gradients_to_apply['$<<']("" + (diffusion) + "-gradient(" + (direction) + " " + (colors_to_apply) + ")");}, {$$s: self});
        full_gradient_to_apply = gradients_to_apply.$last();
        return self.$html().$style("background", full_gradient_to_apply);
      case "border":
        return $send(self.$border(), 'each', [], function $$7(border_id_found){var self = $$7.$$s == null ? this : $$7.$$s, border_found = nil, thickness = nil, pattern = nil;

          
          if (border_id_found == null) border_id_found = nil;
          border_found = self.$grab(border_id_found);
          red = $rb_times(border_found.$red(), 255);
          green = $rb_times(border_found.$green(), 255);
          blue = $rb_times(border_found.$blue(), 255);
          alpha = border_found.$alpha();
          thickness = border_found.$thickness();
          pattern = border_found.$pattern();
          return self.$html().$style("border", "" + (pattern) + " " + (thickness) + "px rgba(" + (red) + "," + (green) + "," + (blue) + "," + (alpha) + ")");}, {$$s: self})
      default:
        return nil
    };}, {$$s: self});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "apply"], ["type", "string"], ["specific", "text"]]))], function $$8(parent_found, _user_proc){var self = $$8.$$s == null ? this : $$8.$$s, shadows_to_apply = nil, drop_shadow = nil, box_shadow = nil, red = nil, green = nil, blue = nil, alpha = nil, gradients_to_apply = nil, full_gradient_to_apply = nil;

    
    if (parent_found == null) parent_found = nil;
    if (_user_proc == null) _user_proc = nil;
    
    switch (parent_found.$type().valueOf()) {
      case "shadow":
        
        shadows_to_apply = (new Map([["filter", []], ["boxShadow", []]]));
        $send(self.$shadow(), 'each', [], function $$9(shadow_id_found){var self = $$9.$$s == null ? this : $$9.$$s, shadow_found = nil, red = nil, green = nil, blue = nil, alpha = nil, left = nil, top = nil, blur = nil, inset = nil;

          
          if (shadow_id_found == null) shadow_id_found = nil;
          shadow_found = self.$grab(shadow_id_found);
          red = $rb_times(shadow_found.$red(), 255);
          green = $rb_times(shadow_found.$green(), 255);
          blue = $rb_times(shadow_found.$blue(), 255);
          alpha = shadow_found.$alpha();
          left = shadow_found.$left();
          top = shadow_found.$top();
          blur = shadow_found.$blur()['$[]']("value");
          if ($truthy(shadow_found.$invert())) {
            inset = "inset"
          };
          if ($eqeq(shadow_found.$option(), "natural")) {
            return shadows_to_apply['$[]']("filter")['$<<']("drop-shadow(" + (left) + "px " + (top) + "px " + (blur) + "px rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + "))")
          } else {
            return shadows_to_apply['$[]']("boxShadow")['$<<']("" + (left) + "px " + (top) + "px " + (blur) + "px rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ") " + (inset))
          };}, {$$s: self});
        drop_shadow = shadows_to_apply['$[]']("filter").$join(" ");
        box_shadow = shadows_to_apply['$[]']("boxShadow").$join(",");
        self.$html().$style("transform", "translate3d(0, 0, 0)");
        self.$html().$style("boxShadow", box_shadow);
        return self.$html().$style("filter", drop_shadow);
      case "color":
        
        red = $rb_times(parent_found.$red(), 255);
        green = $rb_times(parent_found.$green(), 255);
        blue = $rb_times(parent_found.$blue(), 255);
        alpha = parent_found.$alpha();
        return self.$html().$style("color", "rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ")");
      case "paint":
        
        gradients_to_apply = [];
        $send(self.$paint(), 'each', [], function $$10(paint_id){var self = $$10.$$s == null ? this : $$10.$$s, colors_to_apply = nil, paint_atome = nil, paint_diffusion = nil, paint_direction = nil, diffusion = nil, $ret_or_2 = nil, direction = nil;

          
          if (paint_id == null) paint_id = nil;
          colors_to_apply = [];
          paint_atome = self.$grab(paint_id);
          paint_diffusion = paint_atome.$diffusion();
          paint_direction = paint_atome.$direction();
          diffusion = ($truthy(($ret_or_2 = paint_diffusion)) ? ($ret_or_2) : ("linear"));
          if (($truthy(paint_direction) && ($eqeq(paint_direction, "linear")))) {
            direction = " to " + (self.$params()['$[]']("direction")) + ","
          } else if ($eqeq(diffusion, "linear")) {
            direction = " to bottom,"
          };
          if ($truthy(paint_atome.$rotate())) {
            direction = "" + (paint_atome.$rotate()) + "deg,"
          };
          $send(paint_atome.$gradient(), 'each', [], function $$11(color_id){var self = $$11.$$s == null ? this : $$11.$$s, color_found = nil;

            
            if (color_id == null) color_id = nil;
            color_found = self.$grab(color_id);
            red = $rb_times(color_found.$red(), 255);
            green = $rb_times(color_found.$green(), 255);
            blue = $rb_times(color_found.$blue(), 255);
            alpha = color_found.$alpha();
            return colors_to_apply['$<<']("rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ")");}, {$$s: self});
          colors_to_apply = colors_to_apply.$join(",");
          return gradients_to_apply['$<<']("" + (diffusion) + "-gradient(" + (direction) + " " + (colors_to_apply) + ")");}, {$$s: self});
        full_gradient_to_apply = gradients_to_apply.$last();
        self.$html().$style("backgroundClip", "text");
        self.$html().$style("color", "transparent");
        return self.$html().$style("backgroundImage", full_gradient_to_apply);
      default:
        return nil
    };}, {$$s: self});
  return $send(self, 'new', [(new Map([["renderer", "html"], ["method", "apply"], ["type", "string"], ["specific", "vector"]]))], function $$12(parent_found, _user_proc){var self = $$12.$$s == null ? this : $$12.$$s, shadows_to_apply = nil, drop_shadow = nil, box_shadow = nil, red = nil, green = nil, blue = nil, alpha = nil, gradients_to_apply = nil, full_gradient_to_apply = nil;

    
    if (parent_found == null) parent_found = nil;
    if (_user_proc == null) _user_proc = nil;
    
    switch (parent_found.$type().valueOf()) {
      case "shadow":
        
        shadows_to_apply = (new Map([["filter", []], ["boxShadow", []]]));
        $send(self.$shadow(), 'each', [], function $$13(shadow_id_found){var self = $$13.$$s == null ? this : $$13.$$s, shadow_found = nil, red = nil, green = nil, blue = nil, alpha = nil, left = nil, top = nil, blur = nil, inset = nil;

          
          if (shadow_id_found == null) shadow_id_found = nil;
          shadow_found = self.$grab(shadow_id_found);
          red = $rb_times(shadow_found.$red(), 255);
          green = $rb_times(shadow_found.$green(), 255);
          blue = $rb_times(shadow_found.$blue(), 255);
          alpha = shadow_found.$alpha();
          left = shadow_found.$left();
          top = shadow_found.$top();
          blur = shadow_found.$blur();
          if ($truthy(shadow_found.$invert())) {
            inset = "inset"
          };
          if ($eqeq(shadow_found.$option(), "natural")) {
            return shadows_to_apply['$[]']("filter")['$<<']("drop-shadow(" + (left) + "px " + (top) + "px " + (blur) + "px rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + "))")
          } else {
            return shadows_to_apply['$[]']("boxShadow")['$<<']("" + (left) + "px " + (top) + "px " + (blur) + "px rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ") " + (inset))
          };}, {$$s: self});
        drop_shadow = shadows_to_apply['$[]']("filter").$join(" ");
        box_shadow = shadows_to_apply['$[]']("boxShadow").$join(",");
        self.$html().$style("transform", "translate3d(0, 0, 0)");
        self.$html().$style("boxShadow", box_shadow);
        return self.$html().$style("filter", drop_shadow);
      case "color":
        
        red = $rb_times(parent_found.$red(), 255);
        green = $rb_times(parent_found.$green(), 255);
        blue = $rb_times(parent_found.$blue(), 255);
        alpha = parent_found.$alpha();
        return self.$html().$colorize_svg_data("rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ")");
      case "paint":
        
        gradients_to_apply = [];
        $send(self.$paint(), 'each', [], function $$14(paint_id){var self = $$14.$$s == null ? this : $$14.$$s, colors_to_apply = nil, paint_atome = nil, paint_diffusion = nil, paint_direction = nil, diffusion = nil, $ret_or_2 = nil, direction = nil;

          
          if (paint_id == null) paint_id = nil;
          colors_to_apply = [];
          paint_atome = self.$grab(paint_id);
          paint_diffusion = paint_atome.$diffusion();
          paint_direction = paint_atome.$direction();
          diffusion = ($truthy(($ret_or_2 = paint_diffusion)) ? ($ret_or_2) : ("linear"));
          if (($truthy(paint_direction) && ($eqeq(paint_direction, "linear")))) {
            direction = " to " + (self.$params()['$[]']("direction")) + ","
          } else if ($eqeq(diffusion, "linear")) {
            direction = " to bottom,"
          };
          if ($truthy(paint_atome.$rotate())) {
            direction = "" + (paint_atome.$rotate()) + "deg,"
          };
          $send(paint_atome.$gradient(), 'each', [], function $$15(color_id){var self = $$15.$$s == null ? this : $$15.$$s, color_found = nil;

            
            if (color_id == null) color_id = nil;
            color_found = self.$grab(color_id);
            red = $rb_times(color_found.$red(), 255);
            green = $rb_times(color_found.$green(), 255);
            blue = $rb_times(color_found.$blue(), 255);
            alpha = color_found.$alpha();
            return colors_to_apply['$<<']("rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ")");}, {$$s: self});
          colors_to_apply = colors_to_apply.$join(",");
          return gradients_to_apply['$<<']("" + (diffusion) + "-gradient(" + (direction) + " " + (colors_to_apply) + ")");}, {$$s: self});
        full_gradient_to_apply = gradients_to_apply.$last();
        return self.$html().$style("background", full_gradient_to_apply);
      default:
        return nil
    };}, {$$s: self});
};

Opal.modules["renderers/html/html"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $defs = Opal.defs, $def = Opal.def, $return_ivar = Opal.return_ivar, $send = Opal.send, $eqeq = Opal.eqeq, $to_ary = Opal.to_ary, $range = Opal.range, $thrower = Opal.thrower, $rb_times = Opal.rb_times, $rb_divide = Opal.rb_divide, $lambda = Opal.lambda, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $rb_lt = Opal.rb_lt, $eqeqeq = Opal.eqeqeq, $rb_ge = Opal.rb_ge, $rb_le = Opal.rb_le, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('[],global,empty?,has_key?,querySelector,nil?,to_a,querySelectorAll,getElementById,to_s,[]=,createTextNode,appendChild,<<,==,each,is_a?,join,add_css_to_atomic_style,map,split,match,to_proc,to_sym,to_i,scan,reject,with_index,select,odd?,strip,start_with?,end_with?,extract_properties,get_page_style,merge,chomp,grab,call,convert_to_css,css_to_data,eval,close,setAttribute,add,remove,attr,inspect,delete,check_double,markup,createElement,add_class,id,*,red,green,blue,alpha,createRange,selectNodeContents,getSelection,removeAllRanges,addRange,focus,length,createElementNS,gsub,sanitize_text,lambda,getElementsByClassName,removeChild,path,/,width,height,requestAnimationFrame,to_f,instance_exec,animation_frame_callback,currentTime,pause,instance_variable_get,play,last,matchMedia,addListener,addEventListener,Native,send,left,top,draggable,unset,on,allow_tool_operations=,+,instance_of?,to_px,compute,-,min,max,restrict_movement,dropzone,drop_action,resizable,between?,style,over_code,new,removeEventListener,!,edit_mode,tag,event_validation,host,puts,instance_variable_set,handle_input,keys,raise,animate,max_by,option,times,first,compact,each_with_index,set_td_style,values,fit,data,attach,downto,deleteRow,insertRow,insertCell,innerHTML=,zero?,insertBefore,firstChild,<,insert_cell,insert_row,insert_column,===,>=,<=,apply,apply_centering,private,calculate_position,chop');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'HTML');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.element = $proto.id = $proto.websocket = $proto.original_atome = $proto.element_type = $proto.over_enter = $proto.over_enter_callback = $proto.over_leave = $proto.over_leave_callback = $proto.touch_removed = $proto.input_listener = $proto.center_options = $proto.parent = nil;
    
    $defs(self, '$locate', function $$locate(selector, base_element) {
      var parent = nil, html_element = nil;

      
      if (base_element == null) base_element = $$('JS').$global()['$[]']("document")['$[]']("body");
      if ($truthy(selector['$empty?']())) {
        return base_element
      };
      if ($truthy(selector['$has_key?']("id"))) {
        return base_element.$querySelector("#" + (selector['$[]']("id")))
      } else if ($truthy(selector['$has_key?']("parent"))) {
        
        parent = base_element.$querySelector("#" + (selector['$[]']("parent")));
        if ($truthy(parent['$nil?']())) {
          return nil
        };
        return parent.$querySelectorAll("*").$to_a();
      } else if ($truthy(selector['$has_key?']("html"))) {
        
        html_element = selector['$[]']("html");
        if ($truthy(html_element['$nil?']())) {
          return nil
        };
        return html_element.$querySelectorAll("*").$to_a();
      } else {
        return nil
      };
    }, -2);
    
    $def(self, '$initialize', function $$initialize(id_found, current_atome) {
      var self = this, $ret_or_1 = nil;

      
      self.element = ($truthy(($ret_or_1 = self.element)) ? ($ret_or_1) : ($$('JS').$global()['$[]']("document").$getElementById(id_found.$to_s())));
      self.id = id_found;
      self.original_atome = current_atome;
      return (self.touch_removed = (new Map()));
    });
    
    $def(self, '$object', $return_ivar("element"));
    
    $def(self, '$hypertext', function $$hypertext(params) {
      var $a, self = this, current_div = nil;

      
      current_div = $$('JS').$global()['$[]']("document").$getElementById(self.id.$to_s());
      return ($a = ["innerHTML", params], $send(current_div, '[]=', $a), $a[$a.length - 1]);
    });
    
    $def(self, '$add_css_to_atomic_style', function $$add_css_to_atomic_style(css) {
      var style_element = nil, text_node = nil;

      
      style_element = $$('JS').$global()['$[]']("document").$getElementById("atomic_style");
      text_node = $$('JS').$global()['$[]']("document").$createTextNode(css);
      return style_element.$appendChild(text_node);
    });
    
    $def(self, '$convert_to_css', function $$convert_to_css(data) {
      var self = this, conditions = nil, apply = nil, condition_strings = nil, operator = nil, property_strings = nil, css = nil;

      
      conditions = data['$[]']("condition");
      apply = data['$[]']("alterations");
      condition_strings = [];
      if ($truthy(conditions['$[]']("max"))) {
        
        if ($truthy(conditions['$[]']("max")['$[]']("width"))) {
          condition_strings['$<<']("(max-width: " + (conditions['$[]']("max")['$[]']("width")) + "px)")
        };
        if ($truthy(conditions['$[]']("max")['$[]']("height"))) {
          condition_strings['$<<']("(max-height: " + (conditions['$[]']("max")['$[]']("height")) + "px)")
        };
      };
      if ($truthy(conditions['$[]']("min"))) {
        
        if ($truthy(conditions['$[]']("min")['$[]']("width"))) {
          condition_strings['$<<']("(min-width: " + (conditions['$[]']("min")['$[]']("width")) + "px)")
        };
        if ($truthy(conditions['$[]']("min")['$[]']("height"))) {
          condition_strings['$<<']("(min-height: " + (conditions['$[]']("min")['$[]']("height")) + "px)")
        };
      };
      operator = ($eqeq(conditions['$[]']("operator"), "and") ? ("and") : ("or"));
      property_strings = [];
      $send(apply, 'each', [], function $$1(key, values){var inner_properties = nil;

        
        if (key == null) key = nil;
        if (values == null) values = nil;
        inner_properties = [];
        $send(values, 'each', [], function $$2(property, value){
          
          if (property == null) property = nil;
          if (value == null) value = nil;
          if ($eqeq(property, "color")) {
            return inner_properties['$<<']("background-color: " + (value) + " !important;")
          } else {
            
            if ($truthy(value['$is_a?']($$('Integer')))) {
              inner_properties['$<<']("" + (property) + ": " + (value) + "px !important;")
            };
            if ($truthy(value['$is_a?']($$('Symbol')))) {
              return inner_properties['$<<']("" + (property) + ": " + (value) + " !important;")
            } else {
              return nil
            };
          };});
        return property_strings['$<<']("#" + (key) + " {\n" + (inner_properties.$join("\n")) + "\n}");});
      css = "@media " + (condition_strings.$join(" " + (operator) + " ")) + " {\n" + (property_strings.$join("\n")) + "\n}";
      self.$add_css_to_atomic_style(css);
      return css;
    });
    
    $def(self, '$css_to_data', function $$css_to_data(css) {
      var data = nil, media_conditions = nil;

      
      data = (new Map([["condition", (new Map())], ["apply", (new Map())]]));
      media_conditions = $send(css.$match(/@media ([^\{]+)/)['$[]'](1).$split(","), 'map', [], "strip".$to_proc());
      $send(media_conditions, 'each', [], function $$3(condition){var $a, type = nil, property = nil, value = nil, $logical_op_recvr_tmp_1 = nil, $ret_or_1 = nil;

        
        if (condition == null) condition = nil;
        type = condition.$match(/(max|min)-/)['$[]'](1).$to_sym();
        property = condition.$match(/(width|height)/)['$[]'](1).$to_sym();
        value = condition.$match(/(\d+)/)['$[]'](1).$to_i();
        
        $logical_op_recvr_tmp_1 = data['$[]']("condition");
        if ($truthy(($ret_or_1 = $logical_op_recvr_tmp_1['$[]'](type)))) {
          $ret_or_1
        } else {
          $logical_op_recvr_tmp_1['$[]='](type, (new Map()))
        };;
        return ($a = [property, value], $send(data['$[]']("condition")['$[]'](type), '[]=', $a), $a[$a.length - 1]);});
      $send(css.$scan(/(\w+) \{([^\}]+)\}/), 'each', [], function $$4(match){var key = nil, properties = nil, $logical_op_recvr_tmp_2 = nil, $ret_or_1 = nil;

        
        if (match == null) match = nil;
        key = match['$[]'](0).$to_sym();
        properties = $send($send(match['$[]'](1).$split(";"), 'map', [], "strip".$to_proc()), 'reject', [], "empty?".$to_proc());
        
        $logical_op_recvr_tmp_2 = data['$[]']("apply");
        if ($truthy(($ret_or_1 = $logical_op_recvr_tmp_2['$[]'](key)))) {
          $ret_or_1
        } else {
          $logical_op_recvr_tmp_2['$[]='](key, (new Map()))
        };;
        return $send(properties, 'each', [], function $$5(property){var $a, $b, prop = nil, value = nil;

          
          if (property == null) property = nil;
          $b = $send(property.$split(":"), 'map', [], "strip".$to_proc()), $a = $to_ary($b), (prop = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
          if ($eqeq(prop, "background-color")) {
            return ($a = ["color", value.$to_sym()], $send(data['$[]']("apply")['$[]'](key), '[]=', $a), $a[$a.length - 1])
          } else if ($eqeq(value['$[]']($range(-2, nil, false)), "px")) {
            return ($a = [prop.$to_sym(), value.$to_i()], $send(data['$[]']("apply")['$[]'](key), '[]=', $a), $a[$a.length - 1])
          } else {
            return ($a = [prop.$to_sym(), value.$to_sym()], $send(data['$[]']("apply")['$[]'](key), '[]=', $a), $a[$a.length - 1])
          };});});
      return data;
    });
    
    $def(self, '$extract_properties', function $$extract_properties(properties_string) {
      var properties_hash = nil, properties = nil;

      
      properties_hash = (new Map());
      properties = $send($send(properties_string.$split(";"), 'map', [], "strip".$to_proc()), 'reject', [], "empty?".$to_proc());
      $send(properties, 'each', [], function $$6(property){var $a, $b, key = nil, value = nil;

        
        if (property == null) property = nil;
        $b = $send(property.$split(":"), 'map', [], "strip".$to_proc()), $a = $to_ary($b), (key = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
        return ($a = [key, value], $send(properties_hash, '[]=', $a), $a[$a.length - 1]);});
      return properties_hash;
    });
    
    $def(self, '$get_page_style', function $$get_page_style() {
      var self = this, main_view = nil, main_view_content = nil, style_tags = nil, hash_result = nil, inside_media = nil, media_hash = nil;

      
      main_view = $$('JS').$global()['$[]']("document").$getElementById("view");
      main_view_content = main_view['$[]']("innerHTML").$to_s();
      style_tags = $send(main_view_content.$split(/<\/?style[^>]*>/i).$select(), 'with_index', [], function $$7(_, index){
        
        if (_ == null) _ = nil;
        if (index == null) index = nil;
        return index['$odd?']();});
      style_tags = style_tags.$join("");
      style_tags = style_tags.$split("\n");
      hash_result = (new Map());
      inside_media = false;
      media_hash = (new Map());
      $send(style_tags, 'each', [], function $$8(line){var $a, $b, $c, self = $$8.$$s == null ? this : $$8.$$s, selector = nil, properties = nil, media_content = nil, media_query = nil;

        
        if (line == null) line = nil;
        line = line.$strip();
        if (($truthy(line['$empty?']()) || ($truthy(line['$start_with?']("/*"))))) {
          return nil
        };
        if ($truthy(inside_media)) {
          
          if ($eqeq(line, "}")) {
            
            hash_result['$[]']("@media")['$<<'](media_hash);
            inside_media = false;
            return nil;
          };
          $b = $send(line.$split("{"), 'map', [], "strip".$to_proc()), $a = $to_ary($b), (selector = ($a[0] == null ? nil : $a[0])), (properties = ($a[1] == null ? nil : $a[1])), $b;
          if (!$truthy(($a = properties, ($a === nil || $a == null) ? nil : $a['$end_with?']("}")))) {
            return nil
          };
          properties = properties['$[]']($range(0, -1, true)).$strip();
          return ($b = [selector, self.$extract_properties(properties)], $send(media_hash, '[]=', $b), $b[$b.length - 1]);
        } else if ($truthy(line['$start_with?']("@media"))) {
          
          media_content = line.$match(/@media\s*\(([^)]+)\)\s*{/);
          if (!$truthy(media_content)) {
            return nil
          };
          media_query = media_content['$[]'](1);
          hash_result['$[]=']("@media", [media_query]);
          return (inside_media = true);
        } else {
          
          $c = $send(line.$split("{"), 'map', [], "strip".$to_proc()), $b = $to_ary($c), (selector = ($b[0] == null ? nil : $b[0])), (properties = ($b[1] == null ? nil : $b[1])), $c;
          if (!$truthy(($b = properties, ($b === nil || $b == null) ? nil : $b['$end_with?']("}")))) {
            return nil
          };
          properties = properties['$[]']($range(0, -1, true)).$strip();
          return ($c = [selector, self.$extract_properties(properties)], $send(hash_result, '[]=', $c), $c[$c.length - 1]);
        };}, {$$s: self});
      return hash_result;
    });
    
    $def(self, '$hyperedit', function $$hyperedit(params, usr_bloc) {
      var self = this, html_object = nil, particles_from_style = nil, classes_found = nil, particles_found = nil, style_found = nil, current_atome = nil;

      
      html_object = $$('JS').$global()['$[]']("document").$getElementById(params.$to_s());
      particles_from_style = (new Map());
      self.$get_page_style();
      if ($truthy(html_object['$[]']("className").$to_s())) {
        
        classes_found = html_object['$[]']("className").$to_s().$split(" ");
        $send(classes_found, 'each', [], function $$9(class_found){var self = $$9.$$s == null ? this : $$9.$$s;

          
          if (class_found == null) class_found = nil;
          if ($truthy(self.$get_page_style()['$[]']("." + (class_found)))) {
            return (particles_from_style = particles_from_style.$merge(self.$get_page_style()['$[]']("." + (class_found))))
          } else {
            return nil
          };}, {$$s: self});
      };
      particles_found = (new Map());
      particles_found['$[]=']("data", html_object['$[]']("innerText").$to_s().$chomp());
      particles_found['$[]=']("markup", html_object['$[]']("tagName").$to_s());
      style_found = html_object['$[]']("style")['$[]']("cssText").$to_s();
      $send(style_found.$split(";"), 'each', [], function $$10(pair){var $a, $b, key = nil, value = nil;

        
        if (pair == null) pair = nil;
        $b = $send(pair.$split(":"), 'map', [], "strip".$to_proc()), $a = $to_ary($b), (key = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
        if (($truthy(key) && ($truthy(value)))) {
          return ($a = [key.$to_sym(), value], $send(particles_from_style, '[]=', $a), $a[$a.length - 1])
        } else {
          return nil
        };});
      particles_found = particles_found.$merge(particles_from_style);
      current_atome = self.$grab(self.id);
      return usr_bloc.$call(particles_found);
    });
    
    $def(self, '$match', function $$match(params) {
      var self = this, css_converted = nil;

      
      css_converted = self.$convert_to_css(params);
      return self.$css_to_data(css_converted);
    });
    
    $def(self, '$connect', function $$connect(params) {try { 
      var bloc = $$connect.$$p || nil, type = nil, server = nil;

      $$connect.$$p = null;
      
      ;
      type = params['$[]']("type");
      server = params['$[]']("address");
      return $$('JS').$eval("atomeJS.connect('" + (type) + "','" + (server) + "')");} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$send_message', function $$send_message(message) {try { 
      
      return $$('JS').$eval("atomeJS.ws_sender('" + (message) + "')")} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$close_websocket', function $$close_websocket() {
      var self = this;

      return self.websocket.$close()
    });
    
    $def(self, '$attr', function $$attr(attribute, value) {
      var self = this;

      
      self.element.$setAttribute(attribute.$to_s(), value.$to_s());
      return self;
    });
    
    $def(self, '$add_class', function $$add_class(class_to_add) {
      var self = this;

      
      self.element['$[]']("classList").$add(class_to_add.$to_s());
      return self;
    });
    
    $def(self, '$remove_class', function $$remove_class(class_to_remove) {
      var self = this;

      
      self.element['$[]']("classList").$remove(class_to_remove.$to_s());
      return self;
    });
    
    $def(self, '$id', function $$id(id) {
      var self = this;

      
      self.$attr("id", id);
      return self;
    });
    
    $def(self, '$check_double', function $$check_double(id) {
      var self = this, element_to_delete = nil;

      
      element_to_delete = $$('JS').$global()['$[]']("document").$getElementById(id.$to_s());
      if ($eqeq(element_to_delete.$inspect(), "null")) {
        return nil
      } else {
        return self.$delete(id)
      };
    });
    
    $def(self, '$shape', function $$shape(id) {
      var self = this, markup_found = nil, $ret_or_1 = nil;

      
      self.$check_double(id);
      markup_found = ($truthy(($ret_or_1 = self.original_atome.$markup())) ? ($ret_or_1) : ("div"));
      self.element_type = markup_found.$to_s();
      self.element = $$('JS').$global()['$[]']("document").$createElement(self.element_type);
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      self.$add_class("atome");
      self.$id(id);
      return self;
    });
    
    $def(self, '$text', function $$text(id) {
      var self = this, markup_found = nil, $ret_or_1 = nil;

      
      self.$check_double(id);
      markup_found = ($truthy(($ret_or_1 = self.original_atome.$markup())) ? ($ret_or_1) : ("pre"));
      self.element_type = markup_found.$to_s();
      self.element = $$('JS').$global()['$[]']("document").$createElement(self.element_type);
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      self.$add_class("atome");
      self.$id(id);
      return self;
    });
    
    $def(self, '$select_text', function $$select_text(range) {
      var $a, self = this, back_color = nil, text_color = nil, back_color_rgba = nil, text_color_rgba = nil, selection = nil, style = nil;

      
      back_color = self.$grab("back_selection");
      text_color = self.$grab("text_selection");
      back_color_rgba = "rgba(" + ($rb_times(back_color.$red(), 255)) + "," + ($rb_times(back_color.$green(), 255)) + "," + ($rb_times(back_color.$blue(), 255)) + ", " + (back_color.$alpha()) + ")";
      text_color_rgba = "rgba(" + ($rb_times(text_color.$red(), 255)) + "," + ($rb_times(text_color.$green(), 255)) + "," + ($rb_times(text_color.$blue(), 255)) + ", " + (text_color.$alpha()) + ")";
      range = $$('JS').$global()['$[]']("document").$createRange();
      range.$selectNodeContents(self.element);
      selection = $$('JS').$global()['$[]']("window").$getSelection();
      selection.$removeAllRanges();
      selection.$addRange(range);
      self.element.$focus();
      style = $$('JS').$global()['$[]']("document").$createElement("style");
      style['$[]=']("innerHTML", "::selection { background-color: " + (back_color_rgba) + "; color: " + (text_color_rgba) + "; }");
      $$('JS').$global()['$[]']("document")['$[]']("head").$appendChild(style);
      if (!$eqeq(self.element['$[]']("innerText").$to_s().$length(), 1)) {
        return nil
      };
      return ($a = ["innerHTML", "&#8203;"], $send(self.element, '[]=', $a), $a[$a.length - 1]);
    });
    
    $def(self, '$image', function $$image(id) {
      var self = this, markup_found = nil, $ret_or_1 = nil;

      
      self.$check_double(id);
      markup_found = ($truthy(($ret_or_1 = self.original_atome.$markup())) ? ($ret_or_1) : ("img"));
      self.element_type = markup_found.$to_s();
      self.element = $$('JS').$global()['$[]']("document").$createElement(self.element_type);
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      self.$add_class("atome");
      self.$id(id);
      return self;
    });
    
    $def(self, '$video', function $$video(id) {
      var self = this, markup_found = nil, $ret_or_1 = nil;

      
      self.$check_double(id);
      markup_found = ($truthy(($ret_or_1 = self.original_atome.$markup())) ? ($ret_or_1) : ("video"));
      self.element_type = markup_found.$to_s();
      self.element = $$('JS').$global()['$[]']("document").$createElement(self.element_type);
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      self.$add_class("atome");
      self.$id(id);
      return self;
    });
    
    $def(self, '$www', function $$www(id) {
      var self = this, markup_found = nil, $ret_or_1 = nil;

      
      self.$check_double(id);
      markup_found = ($truthy(($ret_or_1 = self.original_atome.$markup())) ? ($ret_or_1) : ("iframe"));
      self.element_type = markup_found.$to_s();
      self.element = $$('JS').$global()['$[]']("document").$createElement(self.element_type);
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      self.$add_class("atome");
      self.element.$setAttribute("src", "https://www.youtube.com/embed/lLeQZ8Llkso?si=MMsGBEXELy9yBl9R");
      self.$id(id);
      return self;
    });
    
    $def(self, '$raw', function $$raw(id) {
      var self = this;

      
      self.$check_double(id);
      self.element = $$('JS').$global()['$[]']("document").$createElement("div");
      self.$add_class("atome");
      self.$id(id);
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      return self;
    });
    
    $def(self, '$svg', function $$svg(id) {
      var self = this, markup_found = nil, $ret_or_1 = nil, svg_ns = nil;

      
      self.$check_double(id);
      markup_found = ($truthy(($ret_or_1 = self.original_atome.$markup())) ? ($ret_or_1) : ("svg"));
      self.element_type = markup_found.$to_s();
      svg_ns = "http://www.w3.org/2000/svg";
      self.element = $$('JS').$global()['$[]']("document").$createElementNS(svg_ns, "svg");
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      self.element.$setAttribute("viewBox", "0 0 1024 1024");
      self.element.$setAttribute("version", "1.1");
      self.$add_class("atome");
      self.$id(id);
      return self;
    });
    
    $def(self, '$svg_data', function $$svg_data(all_datas) {
      var self = this;

      return $send(all_datas, 'each', [], function $$11(full_data){var self = $$11.$$s == null ? this : $$11.$$s;

        
        if (full_data == null) full_data = nil;
        return $send(full_data, 'each', [], function $$12(type_passed, datas){var self = $$12.$$s == null ? this : $$12.$$s, svg_ns = nil, new_path = nil;
          if (self.element == null) self.element = nil;

          
          if (type_passed == null) type_passed = nil;
          if (datas == null) datas = nil;
          svg_ns = "http://www.w3.org/2000/svg";
          new_path = $$('JS').$global()['$[]']("document").$createElementNS(svg_ns.$to_s(), type_passed.$to_s());
          $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(new_path);
          $send(datas, 'each', [], function $$13(property, value){
            
            if (property == null) property = nil;
            if (value == null) value = nil;
            return new_path.$setAttribute(property.$to_s(), value.$to_s());});
          return self.element.$appendChild(new_path);}, {$$s: self});}, {$$s: self})
    });
    
    $def(self, '$update_svg_data', function $$update_svg_data(data) {
      
      return $send(data, 'each', [], function $$14(type_passed, datas){var element_to_update = nil;

        
        if (type_passed == null) type_passed = nil;
        if (datas == null) datas = nil;
        element_to_update = $$('JS').$global()['$[]']("document").$getElementById(type_passed.$to_s());
        return $send(datas, 'each', [], function $$15(property, value){
          
          if (property == null) property = nil;
          if (value == null) value = nil;
          return element_to_update.$setAttribute(property.$to_s(), value.$to_s());});})
    });
    
    $def(self, '$colorize_svg_data', function $$colorize_svg_data(data) {try { 
      var self = this, command = nil;

      
      command = "       let svgElement = document.getElementById(\"" + (self.id) + "\");\n" + "      if (!svgElement) {\n" + "        return [];\n" + "      }\n" + "      var children = svgElement.children;\n" + "      var ids = [];\n" + "      for (var i = 0; i < children.length; i++) {\n" + "        var element = document.getElementById(children[i].id); // Récupérer l'élément par son ID\n" + "        if (element) {\n" + "            element.setAttribute('fill', '" + (data) + "'); // Modifier l'attribut fill\n" + "            element.setAttribute('stroke', '" + (data) + "'); // Modifier l'attribut stroke\n" + "        }\n" + "        ids.push(children[i].id);\n" + "      }\n" + "  return ids\n";
      return $$('JS').$eval(command);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$raw_data', function $$raw_data(html_string) {
      var $a, self = this;

      return ($a = ["innerHTML", html_string], $send(self.element, '[]=', $a), $a[$a.length - 1])
    });
    
    $def(self, '$video_path', function $$video_path(video_path, type) {
      var self = this, source = nil;

      
      if (type == null) type = "video/mp4";
      source = $$('JS').$global()['$[]']("document").$createElement("source");
      source.$setAttribute("src", video_path);
      source.$setAttribute("type", type);
      return self.element.$appendChild(source);
    }, -2);
    
    $def(self, '$sanitize_text', function $$sanitize_text(text) {
      
      return text.$to_s().$gsub("&", "&").$gsub("<", "<").$gsub(">", ">").$gsub("\"", "\"").$gsub("'", "'")
    });
    
    $def(self, '$innerText', function $$innerText(data) {
      var $a, self = this, sanitized_data = nil;

      
      sanitized_data = self.$sanitize_text(data.$to_s());
      return ($a = ["innerText", sanitized_data], $send(self.element, '[]=', $a), $a[$a.length - 1]);
    });
    
    $def(self, '$textContent', function $$textContent(data) {
      var $a, self = this;

      return ($a = ["textContent", data], $send(self.element, '[]=', $a), $a[$a.length - 1])
    });
    
    $def(self, '$path', function $$path(objet_path) {
      var $a, self = this;

      
      self.element.$setAttribute("src", objet_path);
      self.element['$[]=']("src", objet_path);
      return ($a = ["onload", $send(self, 'lambda', [], function $$16(_event){var self = $$16.$$s == null ? this : $$16.$$s;
        if (self.element == null) self.element = nil;

        
        if (_event == null) _event = nil;
        self.element['$[]']("width");
        return self.element['$[]']("height");}, {$$s: self})], $send(self.element, '[]=', $a), $a[$a.length - 1]);
    });
    
    $def(self, '$transform', function $$transform(property, value) {
      var $a, self = this, transform_needed = nil;

      
      if (value == null) value = nil;
      transform_needed = "" + (property) + "(" + (value) + "deg)";
      return ($a = ["transform", transform_needed.$to_s()], $send(self.element['$[]']("style"), '[]=', $a), $a[$a.length - 1]);
    }, -2);
    
    $def(self, '$style', function $$style(property, value) {try { 
      var $a, self = this, command = nil;

      
      if (value == null) value = nil;
      if ($truthy(value)) {
        return ($a = [property, value.$to_s()], $send(self.element['$[]']("style"), '[]=', $a), $a[$a.length - 1])
      } else if ($truthy(value['$nil?']())) {
        return self.element['$[]']("style")['$[]'](property)
      } else {
        
        command = "document.getElementById('" + (self.id) + "').style.removeProperty('" + (property) + "')";
        return $$('JS').$eval(command);
      };} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, -2);
    
    $def(self, '$fill', function $$fill(params) {
      var self = this, elements_to_remove = nil;

      
      elements_to_remove = self.element.$getElementsByClassName("background");
      elements_to_remove = elements_to_remove.$to_a();
      $send(elements_to_remove, 'each', [], function $$17(child){var self = $$17.$$s == null ? this : $$17.$$s;
        if (self.element == null) self.element = nil;

        
        if (child == null) child = nil;
        return self.element.$removeChild(child);}, {$$s: self});
      return $send(params, 'each', [], function $$18(param){var self = $$18.$$s == null ? this : $$18.$$s, background_layer = nil, atome_path = nil, img_width = nil, img_height = nil;
        if (self.original_atome == null) self.original_atome = nil;
        if (self.element == null) self.element = nil;

        
        if (param == null) param = nil;
        background_layer = $$('JS').$global()['$[]']("document").$createElement("div");
        background_layer['$[]']("style")['$[]=']("transform", "rotate(" + (param['$[]']("rotate")) + "deg)");
        background_layer['$[]']("style")['$[]=']("position", "absolute");
        if ($truthy(param['$[]']("position"))) {
          
          background_layer['$[]']("style")['$[]=']("top", "" + (param['$[]']("position")['$[]']("x")) + "px");
          background_layer['$[]']("style")['$[]=']("left", "" + (param['$[]']("position")['$[]']("y")) + "px");
        } else {
          
          background_layer['$[]']("style")['$[]=']("top", "0");
          background_layer['$[]']("style")['$[]=']("left", "0");
        };
        if ($truthy(param['$[]']("size"))) {
          
          background_layer['$[]']("style")['$[]=']("width", "" + (param['$[]']("size")['$[]']("x")) + "px");
          background_layer['$[]']("style")['$[]=']("height", "" + (param['$[]']("size")['$[]']("y")) + "px");
        } else {
          
          background_layer['$[]']("style")['$[]=']("width", "100%");
          background_layer['$[]']("style")['$[]=']("height", "100%");
        };
        atome_path = self.$grab(param['$[]']("atome")).$path();
        background_layer['$[]']("style")['$[]=']("backgroundImage", "url('" + (atome_path) + "')");
        background_layer['$[]']("style")['$[]=']("backgroundRepeat", "repeat");
        background_layer['$[]=']("className", "background");
        background_layer['$[]']("style")['$[]=']("opacity", param['$[]']("opacity"));
        if ($truthy(param['$[]']("repeat"))) {
          
          img_width = $rb_divide(self.original_atome.$width(), param['$[]']("repeat")['$[]']("x"));
          img_height = $rb_divide(self.original_atome.$height(), param['$[]']("repeat")['$[]']("y"));
          background_layer['$[]']("style")['$[]=']("backgroundSize", "" + (img_width) + "px " + (img_height) + "px");
        } else {
          background_layer['$[]']("style")['$[]=']("backgroundSize", "" + (param['$[]']("width")) + "px " + (param['$[]']("height")) + "px")
        };
        return self.element.$appendChild(background_layer);}, {$$s: self});
    });
    
    $def(self, '$filter', function $$filter(property, value) {
      var $a, self = this, filter_needed = nil;

      
      filter_needed = "" + (property) + "(" + (value) + ")";
      return ($a = ["filter", filter_needed], $send(self.element['$[]']("style"), '[]=', $a), $a[$a.length - 1]);
    });
    
    $def(self, '$backdropFilter', function $$backdropFilter(property, value) {
      var $a, self = this, filter_needed = nil;

      
      filter_needed = "" + (property) + "(" + (value) + ")";
      return ($a = ["-webkit-backdrop-filter", filter_needed], $send(self.element['$[]']("style"), '[]=', $a), $a[$a.length - 1]);
    });
    
    $def(self, '$currentTime', function $$currentTime(time) {
      var $a, self = this;

      return ($a = ["currentTime", time], $send(self.element, '[]=', $a), $a[$a.length - 1])
    });
    
    $def(self, '$animation_frame_callback', function $$animation_frame_callback(proc_pass, play_content) {
      var self = this;

      return $$('JS').$global()['$[]']("window").$requestAnimationFrame($lambda(function $$19(timestamp){var self = $$19.$$s == null ? this : $$19.$$s, current_time = nil, fps = nil, current_frame = nil;
        if (self.element == null) self.element = nil;
        if (self.original_atome == null) self.original_atome = nil;

        
        if (timestamp == null) timestamp = nil;
        current_time = self.element['$[]']("currentTime");
        fps = 30;
        current_frame = $rb_times(current_time.$to_f(), fps).$to_i();
        if ($truthy(proc_pass['$is_a?']($$('Proc')))) {
          $send(self.original_atome, 'instance_exec', [(new Map([["frame", current_frame], ["time", current_time]]))], proc_pass.$to_proc())
        };
        play_content['$[]=']("play", current_frame);
        return self.$animation_frame_callback(proc_pass, play_content);}, {$$s: self}))
    });
    
    $def(self, '$action', function $$action(_particle, action_found, option) {
      var self = this, proc_found = nil, play_content = nil;

      
      if (option == null) option = nil;
      if ($eqeq(action_found, "stop")) {
        
        self.$currentTime(option);
        return self.element.$pause();
      } else if ($eqeq(action_found, "pause")) {
        return self.element.$pause()
      } else {
        
        self.$currentTime(option);
        proc_found = self.original_atome.$instance_variable_get("@play_code")['$[]'](action_found);
        play_content = self.original_atome.$instance_variable_get("@play");
        self.$animation_frame_callback(proc_found, play_content);
        return self.element.$play();
      };
    }, -3);
    
    $def(self, '$append_to', function $$append_to(parent_id_found) {
      var self = this, parent_found = nil;

      
      parent_found = $$('JS').$global()['$[]']("document").$getElementById(parent_id_found.$to_s());
      parent_found.$appendChild(self.element);
      return self;
    });
    
    $def(self, '$delete', function $HTML_delete$20(id_to_delete) {
      var element_to_delete = nil;

      
      element_to_delete = $$('JS').$global()['$[]']("document").$getElementById(id_to_delete.$to_s());
      if ($truthy(element_to_delete)) {
        return element_to_delete.$remove()
      } else {
        return nil
      };
    });
    
    $def(self, '$append', function $$append(child_id_found) {
      var self = this, child_found = nil;

      
      child_found = $$('JS').$global()['$[]']("document").$getElementById(child_id_found.$to_s());
      self.element.$appendChild(child_found);
      return self;
    });
    
    $def(self, '$on', function $$on(property, _option) {
      var self = this, bloc = nil, media_query = nil, mql = nil, event_handler = nil;

      
      bloc = self.original_atome.$instance_variable_get("@on_code")['$[]']("view_resize");
      property = property.$to_s();
      if ($truthy(property['$start_with?']("media:"))) {
        
        media_query = property.$split(":", 2).$last();
        mql = $$('JS').$global()['$[]']("window").$matchMedia(media_query);
        event_handler = $lambda(function $$21(event){
          
          if (event == null) event = nil;
          if ($truthy(bloc['$is_a?']($$('Proc')))) {
            return bloc.$call((new Map([["matches", event['$[]']("matches")]])))
          } else {
            return nil
          };});
        return mql.$addListener(event_handler);
      } else if ($eqeq(property, "resize")) {
        
        event_handler = $lambda(function $$22(event){var width = nil, height = nil;

          
          if (event == null) event = nil;
          width = $$('JS').$global()['$[]']("window")['$[]']("innerWidth");
          height = $$('JS').$global()['$[]']("window")['$[]']("innerHeight");
          if ($truthy(bloc['$is_a?']($$('Proc')))) {
            return bloc.$call((new Map([["width", width], ["height", height]])))
          } else {
            return nil
          };});
        return $$('JS').$global()['$[]']("window").$addEventListener("resize", event_handler);
      } else {
        
        event_handler = $lambda(function $$23(event){
          
          if (event == null) event = nil;
          if ($truthy(bloc['$is_a?']($$('Proc')))) {
            return bloc.$call(event)
          } else {
            return nil
          };});
        return self.element.$addEventListener(property, event_handler);
      };
    });
    
    $def(self, '$keyboard_press', function $$keyboard_press(_option) {
      var self = this, keypress_handler = nil;

      
      self.keyboard_press = self.original_atome.$instance_variable_get("@keyboard_code")['$[]']("press");
      keypress_handler = $lambda(function $$24(native_event){var self = $$24.$$s == null ? this : $$24.$$s, event = nil;
        if (self.keyboard_press == null) self.keyboard_press = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        if ($truthy(self.keyboard_press['$is_a?']($$('Proc')))) {
          return self.keyboard_press.$call(event)
        } else {
          return nil
        };}, {$$s: self});
      return self.element.$addEventListener("keypress", keypress_handler);
    });
    
    $def(self, '$keyboard_down', function $$keyboard_down(_option) {
      var self = this, keypress_handler = nil;

      
      self.keyboard_down = self.original_atome.$instance_variable_get("@keyboard_code")['$[]']("down");
      keypress_handler = $lambda(function $$25(event){var self = $$25.$$s == null ? this : $$25.$$s;
        if (self.keyboard_down == null) self.keyboard_down = nil;

        
        if (event == null) event = nil;
        if ($truthy(self.keyboard_down['$is_a?']($$('Proc')))) {
          return self.keyboard_down.$call(event)
        } else {
          return nil
        };}, {$$s: self});
      return self.element.$addEventListener("keydown", keypress_handler);
    });
    
    $def(self, '$keyboard_up', function $$keyboard_up(_option) {
      var self = this, keypress_handler = nil;

      
      self.keyboard_up = self.original_atome.$instance_variable_get("@keyboard_code")['$[]']("up");
      keypress_handler = $lambda(function $$26(event){var self = $$26.$$s == null ? this : $$26.$$s;
        if (self.keyboard_up == null) self.keyboard_up = nil;

        
        if (event == null) event = nil;
        if ($truthy(self.keyboard_up['$is_a?']($$('Proc')))) {
          return self.keyboard_up.$call(event)
        } else {
          return nil
        };}, {$$s: self});
      return self.element.$addEventListener("keyup", keypress_handler);
    });
    
    $def(self, '$keyboard_remove', function $$keyboard_remove(option) {
      var self = this;

      
      switch (option.valueOf()) {
        case "down":
          return (self.keyboard_down = "")
        case "up":
          return (self.keyboard_up = "")
        case "down":
          return (self.keyboard_press = "")
        default:
          
          self.keyboard_down = "";
          self.keyboard_up = "";
          return (self.keyboard_press = "");
      }
    });
    
    $def(self, '$event', function $$event(action, variance, option) {
      var self = this;

      
      if (option == null) option = nil;
      return self.$send("" + (action) + "_" + (variance), option);
    }, -3);
    
    $def(self, '$restrict_movement', function $$restrict_movement(restricted_x, restricted_y) {
      var self = this;

      
      self.original_atome.$left(restricted_x);
      return self.original_atome.$top(restricted_y);
    });
    
    $def(self, '$drag_remove', function $$drag_remove(option) {try { 
      var self = this, interact = nil;

      
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      
      switch (option.valueOf()) {
        case "start":
          return (self.drag_start = "")
        case "end":
        case "stop":
          return (self.drag_end = "")
        case "move":
          
          interact.$draggable(false);
          interact.$unset();
          return (self.drag_move = nil);
        case "locked":
          return (self.drag_locked = "")
        case "restrict":
          return (self.drag_restrict = "")
        default:
          
          self.drag_start = "";
          self.drag_end = "";
          self.drag_locked = "";
          self.drag_restrict = "";
          self.drag_move = nil;
          interact.$draggable(false);
          return interact.$unset();
      };} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$drag_start', function $$drag_start(_option) {try { 
      var self = this, interact = nil;

      
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      self.drag_start = self.original_atome.$instance_variable_get("@drag_code")['$[]']("start");
      return $send(interact, 'on', ["dragstart"], function $$27(native_event){var self = $$27.$$s == null ? this : $$27.$$s, event = nil;
        if (self.drag_start == null) self.drag_start = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        if ($truthy(self.drag_start['$is_a?']($$('Proc')))) {
          return self.drag_start.$call(event)
        } else {
          return nil
        };}, {$$s: self});} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$drag_end', function $$drag_end(_option) {try { 
      var self = this, interact = nil;

      
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      self.drag_end = self.original_atome.$instance_variable_get("@drag_code")['$[]']("end");
      return $send(interact, 'on', ["dragend"], function $$28(native_event){var self = $$28.$$s == null ? this : $$28.$$s, event = nil;
        if (self.drag_end == null) self.drag_end = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        if ($truthy(self.drag_end['$is_a?']($$('Proc')))) {
          return self.drag_end.$call(event)
        } else {
          return nil
        };}, {$$s: self});} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$drag_move', function $$drag_move(_option) {try { 
      var self = this, interact = nil;

      
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      interact.$draggable((new Map([["drag", true], ["inertia", (new Map([["resistance", 12], ["minSpeed", 200], ["endSpeed", 100]]))]])));
      self.drag_move = self.original_atome.$instance_variable_get("@drag_code")['$[]']("move");
      return $send(interact, 'on', ["dragmove"], function $$29(native_event){var self = $$29.$$s == null ? this : $$29.$$s, event = nil, dx = nil, dy = nil, x = nil, $ret_or_1 = nil, y = nil;
        if (self.drag_move == null) self.drag_move = nil;
        if (self.original_atome == null) self.original_atome = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        if ($truthy(self.drag_move['$is_a?']($$('Proc')))) {
          self.drag_move.$call(event)
        };
        $$('Universe')['$allow_tool_operations='](false);
        dx = event['$[]']("dx");
        dy = event['$[]']("dy");
        x = $rb_plus(($truthy(($ret_or_1 = self.original_atome.$left())) ? ($ret_or_1) : (0)), dx.$to_f());
        y = $rb_plus(($truthy(($ret_or_1 = self.original_atome.$top())) ? ($ret_or_1) : (0)), dy.$to_f());
        self.original_atome.$left(x);
        return self.original_atome.$top(y);}, {$$s: self});} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$drag_restrict', function $$drag_restrict(option) {try { 
      var self = this, interact = nil, max_left = nil, max_top = nil, min_left = nil, min_top = nil, $ret_or_1 = nil, parent_found = nil, parent_width = nil, parent_height = nil, original_width = nil, original_height = nil;

      
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      interact.$draggable((new Map([["drag", true], ["inertia", (new Map([["resistance", 12], ["minSpeed", 200], ["endSpeed", 100]]))]])));
      self.drag_move = self.original_atome.$instance_variable_get("@drag_code")['$[]']("restrict");
      if ($truthy(option['$instance_of?']($$('Hash')))) {
        
        max_left = self.$grab("view").$to_px("width");
        max_top = self.$grab("view").$to_px("height");
        min_left = 0;
        min_top = 0;
        if ($truthy(option['$[]']("max"))) {
          
          max_left = ($truthy(($ret_or_1 = option['$[]']("max")['$[]']("left"))) ? ($ret_or_1) : (max_left));
          max_top = ($truthy(($ret_or_1 = option['$[]']("max")['$[]']("top"))) ? ($ret_or_1) : (max_top));
        } else {
          
          max_left;
          max_top;
        };
        if ($truthy(option['$[]']("min"))) {
          
          min_left = ($truthy(($ret_or_1 = option['$[]']("min")['$[]']("left"))) ? ($ret_or_1) : (min_left));
          min_top = ($truthy(($ret_or_1 = option['$[]']("min")['$[]']("top"))) ? ($ret_or_1) : (min_top));
        } else {
          
          min_left;
          min_top;
        };
      } else {
        
        parent_found = self.$grab(option);
        min_left = parent_found.$left();
        min_top = parent_found.$top();
        parent_width = parent_found.$compute((new Map([["particle", "width"]])))['$[]']("value");
        parent_height = parent_found.$compute((new Map([["particle", "height"]])))['$[]']("value");
        original_width = self.original_atome.$width();
        original_height = self.original_atome.$height();
        max_left = $rb_minus($rb_plus(min_left, parent_width), original_width);
        max_top = $rb_minus($rb_plus(min_top, parent_height), original_height);
      };
      return $send(interact, 'on', ["dragmove"], function $$30(native_event){var self = $$30.$$s == null ? this : $$30.$$s, event = nil, dx = nil, dy = nil, x = nil, y = nil, restricted_x = nil, restricted_y = nil;
        if (self.drag_move == null) self.drag_move = nil;
        if (self.original_atome == null) self.original_atome = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        if ($truthy(self.drag_move['$is_a?']($$('Proc')))) {
          self.drag_move.$call(event)
        };
        dx = event['$[]']("dx");
        dy = event['$[]']("dy");
        x = $rb_plus(($truthy(($ret_or_1 = self.original_atome.$left())) ? ($ret_or_1) : (0)), dx.$to_f());
        y = $rb_plus(($truthy(($ret_or_1 = self.original_atome.$top())) ? ($ret_or_1) : (0)), dy.$to_f());
        restricted_x = [[x, min_left].$max(), max_left].$min();
        restricted_y = [[y, min_top].$max(), max_top].$min();
        return self.$restrict_movement(restricted_x, restricted_y);}, {$$s: self});} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$drag_locked', function $$drag_locked(_option) {try { 
      var self = this, interact = nil;

      
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      interact.$draggable((new Map([["drag", true], ["inertia", (new Map([["resistance", 12], ["minSpeed", 200], ["endSpeed", 100]]))]])));
      self.drag_lock = self.original_atome.$instance_variable_get("@drag_code")['$[]']("locked");
      return $send(interact, 'on', ["dragmove"], function $$31(native_event){var self = $$31.$$s == null ? this : $$31.$$s, event = nil;
        if (self.drag_lock == null) self.drag_lock = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        if ($truthy(self.drag_lock['$is_a?']($$('Proc')))) {
          return self.drag_lock.$call(event)
        } else {
          return nil
        };}, {$$s: self});} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$drop_action', function $$drop_action(native_event, bloc) {
      var self = this, event = nil, draggable_element = nil, dropzone_element = nil;

      
      event = self.$Native(native_event);
      draggable_element = event['$[]']("relatedTarget")['$[]']("id").$to_s();
      dropzone_element = event['$[]']("target")['$[]']("id").$to_s();
      if ($truthy(bloc['$is_a?']($$('Proc')))) {
        return bloc.$call((new Map([["source", draggable_element], ["destination", dropzone_element]])))
      } else {
        return nil
      };
    });
    
    $def(self, '$drop_activate', function $$drop_activate(_option) {try { 
      var self = this, interact = nil;

      
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      self.drop_activate = self.original_atome.$instance_variable_get("@drop_code")['$[]']("activate");
      return interact.$dropzone((new Map([["accept", nil], ["overlap", 0.75], ["ondropactivate", $send(self, 'lambda', [], function $$32(native_event){var self = $$32.$$s == null ? this : $$32.$$s;
        if (self.drop_activate == null) self.drop_activate = nil;

        
        if (native_event == null) native_event = nil;
        return self.$drop_action(native_event, self.drop_activate);}, {$$s: self})]])));} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$drop_deactivate', function $$drop_deactivate(_option) {try { 
      var self = this, interact = nil;

      
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      self.drop_deactivate = self.original_atome.$instance_variable_get("@drop_code")['$[]']("deactivate");
      return interact.$dropzone((new Map([["ondropdeactivate", $send(self, 'lambda', [], function $$33(native_event){var self = $$33.$$s == null ? this : $$33.$$s;
        if (self.drop_deactivate == null) self.drop_deactivate = nil;

        
        if (native_event == null) native_event = nil;
        return self.$drop_action(native_event, self.drop_deactivate);}, {$$s: self})]])));} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$drop_dropped', function $$drop_dropped(_option) {try { 
      var self = this, interact = nil;

      
      self.drop_dropped = self.original_atome.$instance_variable_get("@drop_code")['$[]']("dropped");
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      return interact.$dropzone((new Map([["overlap", 0.75], ["ondrop", $send(self, 'lambda', [], function $$34(native_event){var self = $$34.$$s == null ? this : $$34.$$s;
        if (self.drop_dropped == null) self.drop_dropped = nil;

        
        if (native_event == null) native_event = nil;
        return self.$drop_action(native_event, self.drop_dropped);}, {$$s: self})]])));} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$drop_enter', function $$drop_enter(_option) {try { 
      var self = this, interact = nil;

      
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      self.drop_enter = self.original_atome.$instance_variable_get("@drop_code")['$[]']("enter");
      return interact.$dropzone((new Map([["overlap", 0.001], ["ondragenter", $send(self, 'lambda', [], function $$35(native_event){var self = $$35.$$s == null ? this : $$35.$$s;
        if (self.drop_enter == null) self.drop_enter = nil;

        
        if (native_event == null) native_event = nil;
        return self.$drop_action(native_event, self.drop_enter);}, {$$s: self})]])));} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$drop_leave', function $$drop_leave(_option) {try { 
      var self = this, interact = nil;

      
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      self.drop_leave = self.original_atome.$instance_variable_get("@drop_code")['$[]']("leave");
      return interact.$dropzone((new Map([["ondragleave", $send(self, 'lambda', [], function $$36(native_event){var self = $$36.$$s == null ? this : $$36.$$s;
        if (self.drop_leave == null) self.drop_leave = nil;

        
        if (native_event == null) native_event = nil;
        return self.$drop_action(native_event, self.drop_leave);}, {$$s: self})]])));} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$drop_remove', function $$drop_remove(option) {try { 
      var self = this, interact = nil;

      
      switch (option.valueOf()) {
        case "activate":
          return (self.drop_activate = "")
        case "deactivate":
          return (self.drop_deactivate = "")
        case "dropped":
          return (self.drop_dropped = "")
        case "enter":
          return (self.drop_enter = "")
        case "leave":
          return (self.drop_leave = "")
        default:
          
          interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
          interact.$unset();
          self.drop_activate = "";
          self.drop_deactivate = "";
          self.drop_dropped = "";
          self.drop_enter = "";
          return (self.drop_leave = "");
      }} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$resize', function $$resize(params, options) {try { 
      var self = this, interact = nil, min_width = nil, $ret_or_1 = nil, min_height = nil, max_width = nil, max_height = nil;

      
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      if ($eqeq(params, "remove")) {
        
        self.resize = "";
        return interact.$resizable(false);
      } else {
        
        min_width = ($truthy(($ret_or_1 = options['$[]']("min")['$[]']("width"))) ? ($ret_or_1) : (10));
        min_height = ($truthy(($ret_or_1 = options['$[]']("min")['$[]']("height"))) ? ($ret_or_1) : (10));
        max_width = ($truthy(($ret_or_1 = options['$[]']("max")['$[]']("width"))) ? ($ret_or_1) : (3000));
        max_height = ($truthy(($ret_or_1 = options['$[]']("max")['$[]']("height"))) ? ($ret_or_1) : (3000));
        self.resize = self.original_atome.$instance_variable_get("@resize_code")['$[]']("resize");
        return interact.$resizable((new Map([["edges", (new Map([["left", true], ["right", true], ["top", true], ["bottom", true]]))], ["inertia", true], ["modifiers", []], ["listeners", (new Map([["move", $send(self, 'lambda', [], function $$37(native_event){var self = $$37.$$s == null ? this : $$37.$$s, event = nil, x = nil, y = nil, width = nil, height = nil;
          if (self.resize == null) self.resize = nil;
          if (self.element == null) self.element = nil;
          if (self.original_atome == null) self.original_atome = nil;

          
          if (native_event == null) native_event = nil;
          $$('Universe')['$allow_tool_operations='](false);
          event = self.$Native(native_event);
          if ($truthy(self.resize['$is_a?']($$('Proc')))) {
            self.resize.$call(event)
          };
          x = ($truthy(($ret_or_1 = self.element['$[]']("offsetLeft").$to_i())) ? ($ret_or_1) : (0));
          y = ($truthy(($ret_or_1 = self.element['$[]']("offsetTop").$to_i())) ? ($ret_or_1) : (0));
          width = event['$[]']("rect")['$[]']("width");
          height = event['$[]']("rect")['$[]']("height");
          x = $rb_plus(x, event['$[]']("deltaRect")['$[]']("left").$to_f());
          y = $rb_plus(y, event['$[]']("deltaRect")['$[]']("top").$to_f());
          if ($truthy(width.$to_i()['$between?'](min_width, max_width))) {
            self.original_atome.$width(width.$to_i())
          };
          if ($truthy(height.$to_i()['$between?'](min_height, max_height))) {
            self.original_atome.$height(height.$to_i())
          };
          self.original_atome.$left(x);
          return self.original_atome.$top(y);}, {$$s: self})]]))]])));
      };} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$overflow', function $$overflow(params, bloc) {
      var self = this;

      
      self.$style("overflow", params);
      self.overflow = self.original_atome.$instance_variable_get("@overflow_code")['$[]']("overflow");
      return self.element.$addEventListener("scroll", $send(self, 'lambda', [], function $$38(event){var self = $$38.$$s == null ? this : $$38.$$s, scroll_top = nil, scroll_left = nil;
        if (self.element == null) self.element = nil;
        if (self.overflow == null) self.overflow = nil;

        
        if (event == null) event = nil;
        scroll_top = self.element['$[]']("scrollTop").$to_i();
        scroll_left = self.element['$[]']("scrollLeft").$to_i();
        if ($truthy(self.overflow['$is_a?']($$('Proc')))) {
          return self.overflow.$call((new Map([["left", scroll_left], ["top", scroll_top]])))
        } else {
          return nil
        };}, {$$s: self}));
    });
    
    $def(self, '$over_over', function $$over_over(_option) {try { 
      var self = this, interact = nil;

      
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      self.over_over = self.original_atome.$over_code()['$[]']("over");
      return $send(interact, 'on', ["mouseover"], function $$39(native_event){var self = $$39.$$s == null ? this : $$39.$$s, event = nil;
        if (self.id == null) self.id = nil;
        if (self.over_over == null) self.over_over = nil;

        
        if (native_event == null) native_event = nil;
        $$('JS').$global()['$[]=']("myRubyMouseOverCallback", $send($$('Proc'), 'new', [], function $$40(){var self = $$40.$$s == null ? this : $$40.$$s;
          if (self.original_atome == null) self.original_atome = nil;

          return self.original_atome.$over_code()['$[]']("over").$call()}, {$$s: self}));
        $$('JS').$eval("document.querySelector('#" + (self.id) + "').addEventListener('mouseleave', myRubyMouseOverCallback);");
        event = self.$Native(native_event);
        if ($truthy(self.over_over['$is_a?']($$('Proc')))) {
          return self.over_over.$call(event)
        } else {
          return nil
        };}, {$$s: self});} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$over_enter', function $$over_enter(_option) {
      var self = this;

      
      self.over_enter = self.original_atome.$instance_variable_get("@over_code")['$[]']("enter");
      if (!$truthy(self.over_enter)) {
        return nil
      };
      self.over_enter_callback = $send(self, 'lambda', [], function $$41(event){var self = $$41.$$s == null ? this : $$41.$$s;
        if (self.over_enter == null) self.over_enter = nil;

        
        if (event == null) event = nil;
        if ($truthy(self.over_enter['$is_a?']($$('Proc')))) {
          return self.over_enter.$call(event)
        } else {
          return nil
        };}, {$$s: self});
      return self.element.$addEventListener("mouseenter", self.over_enter_callback);
    });
    
    $def(self, '$over_leave', function $$over_leave(_option) {
      var self = this;

      
      self.over_leave = self.original_atome.$instance_variable_get("@over_code")['$[]']("leave");
      if (!$truthy(self.over_leave)) {
        return nil
      };
      self.over_leave_callback = $send(self, 'lambda', [], function $$42(event){var self = $$42.$$s == null ? this : $$42.$$s;
        if (self.over_leave == null) self.over_leave = nil;

        
        if (event == null) event = nil;
        if ($truthy(self.over_leave['$is_a?']($$('Proc')))) {
          return self.over_leave.$call(event)
        } else {
          return nil
        };}, {$$s: self});
      return self.element.$addEventListener("mouseleave", self.over_leave_callback);
    });
    
    $def(self, '$over_remove', function $$over_remove(option) {
      var self = this;

      
      switch (option.valueOf()) {
        case "enter":
          if ($truthy(self.over_enter_callback)) {
            
            self.element.$removeEventListener("mouseenter", self.over_enter_callback);
            self.over_enter_callback = nil;
            return (self.over_enter = nil);
          } else {
            return nil
          }
          break;
        case "leave":
          
          self.element.$removeEventListener("mouseleave", self.over_leave_callback);
          self.over_leave_callback = nil;
          return (self.over_leave = nil);
        case "over":
          return (self.over_over = "")
        default:
          
          self.element.$removeEventListener("mouseenter", self.over_enter_callback);
          self.over_enter_callback = nil;
          self.over_enter = nil;
          self.element.$removeEventListener("mouseleave", self.over_leave_callback);
          self.over_leave_callback = nil;
          self.over_leave = nil;
          return (self.over_over = "");
      }
    });
    
    $def(self, '$event_validation', function $$event_validation(action_proc) {
      var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

      if ($truthy(($ret_or_1 = action_proc['$is_a?']($$('Proc'))))) {
        
        if ($truthy(($ret_or_2 = $$('Universe').$edit_mode()['$!']()))) {
          return $ret_or_2
        } else {
          return self.original_atome.$tag()['$[]']("system")
        };
      } else {
        return $ret_or_1
      }
    });
    
    $def(self, '$touch_down', function $$touch_down(_option) {try { 
      var self = this, interact = nil;

      
      self.touch_down = self.original_atome.$instance_variable_get("@touch_code")['$[]']("down");
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      if ($truthy(self.touch_removed['$[]']("down"))) {
        return nil
      } else {
        return $send(interact, 'on', ["down"], function $$43(native_event){var self = $$43.$$s == null ? this : $$43.$$s, event = nil;
          if (self.touch_down == null) self.touch_down = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          if ($truthy(self.$event_validation(self.touch_down))) {
            return self.touch_down.$call(event)
          } else {
            return nil
          };}, {$$s: self})
      };} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$touch_tap', function $$touch_tap(_option) {try { 
      var self = this, interact = nil;

      
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      self.touch_tap = self.original_atome.$instance_variable_get("@touch_code")['$[]']("tap");
      if ($truthy(self.touch_removed['$[]']("tap"))) {
        return nil
      } else {
        return $send(interact, 'on', ["tap"], function $$44(native_event){var self = $$44.$$s == null ? this : $$44.$$s, event = nil;
          if (self.touch_tap == null) self.touch_tap = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          if ($truthy(self.$event_validation(self.touch_tap))) {
            return self.touch_tap.$call(event)
          } else {
            return nil
          };}, {$$s: self})
      };} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$touch_up', function $$touch_up(_option) {try { 
      var self = this, interact = nil;

      
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      self.touch_up = self.original_atome.$instance_variable_get("@touch_code")['$[]']("up");
      if ($truthy(self.touch_removed['$[]']("up"))) {
        return nil
      } else {
        return $send(interact, 'on', ["up"], function $$45(native_event){var self = $$45.$$s == null ? this : $$45.$$s, event = nil;
          if (self.touch_up == null) self.touch_up = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          if ($truthy(self.$event_validation(self.touch_up))) {
            return self.touch_up.$call(event)
          } else {
            return nil
          };}, {$$s: self})
      };} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$touch_double', function $$touch_double(_option) {try { 
      var self = this, interact = nil;

      
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      self.touch_double = self.original_atome.$instance_variable_get("@touch_code")['$[]']("double");
      if ($truthy(self.touch_removed['$[]']("double"))) {
        return nil
      } else {
        return $send(interact, 'on', ["doubletap"], function $$46(native_event){var self = $$46.$$s == null ? this : $$46.$$s, event = nil;
          if (self.touch_double == null) self.touch_double = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          if ($truthy(self.$event_validation(self.touch_double))) {
            return self.touch_double.$call(event)
          } else {
            return nil
          };}, {$$s: self})
      };} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$touch_long', function $$touch_long(_option) {try { 
      var self = this, interact = nil;

      
      self.touch_long = self.original_atome.$instance_variable_get("@touch_code")['$[]']("long");
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      if ($truthy(self.touch_removed['$[]']("long"))) {
        return nil
      } else {
        return $send(interact, 'on', ["hold"], function $$47(native_event){var self = $$47.$$s == null ? this : $$47.$$s, event = nil;
          if (self.touch_long == null) self.touch_long = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          if ($truthy(self.$event_validation(self.touch_long))) {
            return self.touch_long.$call(event)
          } else {
            return nil
          };}, {$$s: self})
      };} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$touch_remove', function $$touch_remove(option) {try { 
      var $a, self = this, interact = nil;

      
      switch (option.valueOf()) {
        case "double":
          
          self.touch_double = "";
          return ($a = ["double", true], $send(self.touch_removed, '[]=', $a), $a[$a.length - 1]);
        case "down":
          
          self.touch_down = "";
          return ($a = ["down", true], $send(self.touch_removed, '[]=', $a), $a[$a.length - 1]);
        case "long":
          
          self.touch_removed['$[]=']("long", true);
          return (self.touch_long = "");
        case "tap":
          
          self.touch_removed['$[]=']("tap", true);
          return (self.touch_tap = "");
        case "up":
          
          self.touch_removed['$[]=']("up", true);
          return (self.touch_up = "");
        default:
          
          self.touch_removed['$[]=']("double", true);
          self.touch_removed['$[]=']("down", true);
          self.touch_removed['$[]=']("long", true);
          self.touch_removed['$[]=']("tap", true);
          self.touch_removed['$[]=']("up", true);
          self.touch_double = "";
          self.touch_down = "";
          self.touch_long = "";
          self.touch_tap = "";
          self.touch_up = "";
          interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
          return interact.$unset();
      }} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$internet', function $$internet() {try { 
      
      return $$('JS').$eval("return navigator.onLine")} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$terminal', function $$terminal(id, cmd) {try { 
      
      if ($eqeq($$('Atome').$host(), "tauri")) {
        return $$('JS').$eval("terminal('" + (id) + "','" + (cmd) + "')")
      } else {
        return $$('JS').$eval("distant_terminal('" + (id) + "','" + (cmd) + "')")
      }} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$read', function $$read(id, file) {try { 
      var self = this;

      if ($eqeq($$('Atome').$host(), "tauri")) {
        return $$('JS').$eval("readFile('" + (id) + "','" + (file) + "')")
      } else {
        return self.$puts(" work in progress")
      }} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$browse', function $$browse(id, file) {try { 
      var self = this;

      if ($eqeq($$('Atome').$host(), "tauri")) {
        return $$('JS').$eval("browseFile('" + (id) + "','" + (file) + "')")
      } else {
        return self.$puts("work in progress")
      }} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$handle_input', function $$handle_input() {
      var self = this;

      return self.original_atome.$instance_variable_set("@data", self.element['$[]']("innerText").$to_s())
    });
    
    $def(self, '$update_data', function $$update_data(params) {
      var self = this, $ret_or_1 = nil;

      
      self.input_listener = ($truthy(($ret_or_1 = self.input_listener)) ? ($ret_or_1) : ($send(self, 'lambda', [], function $$48(event){var self = $$48.$$s == null ? this : $$48.$$s;

        
        if (event == null) event = nil;
        return self.$handle_input();}, {$$s: self})));
      if ($truthy(params)) {
        return $send(self.element, 'addEventListener', ["input"], self.input_listener.$to_proc())
      } else {
        return $send(self.element, 'removeEventListener', ["input"], self.input_listener.$to_proc())
      };
    });
    
    $def(self, '$animate', function $$animate(animation_properties) {try { 
      var self = this, command = nil;

      
      command = "    var target_div = document.getElementById('" + (self.id) + "');\n" + "    window.currentAnimation = popmotion.animate({\n" + "      from: " + (animation_properties['$[]']("from")) + ",\n" + "      to: " + (animation_properties['$[]']("to")) + ",\n" + "      duration: " + (animation_properties['$[]']("duration")) + ",\n" + "      onUpdate: function(v) {\n" + "rubyVMCallback(\"puts x= \"+v)\n" + "rubyVMCallback(\"grab('" + (self.id) + "').left(\"+v+\")\")\n" + "      },\n" + "      onComplete: function() {\n" + "        window.currentAnimation = null;\n" + "rubyVMCallback(\"puts :complete\")\n" + "      }\n" + "    });\n";
      return $$('JS').$eval(command);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$play_animation', function $$play_animation(properties) {
      var self = this, required_keys = nil;

      
      self.$puts("change for standard method : action");
      required_keys = ["from", "to", "duration"];
      if (!($truthy(properties['$is_a?']($$('Hash'))) && ($truthy($rb_minus(required_keys, properties.$keys())['$empty?']())))) {
        self.$raise($$('ArgumentError'), "Properties must be a hash with :from, :to, and :duration keys")
      };
      return self.$animate(properties);
    });
    
    $def(self, '$stop_animation', function $$stop_animation() {try { 
      
      return $$('JS').$eval("if (window.currentAnimation) window.currentAnimation.stop();")} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$table', function $$table(data) {
      var self = this, table_html = nil, thead = nil, max_length = nil, header_row = nil, tbody = nil;

      
      table_html = $$('JS').$global()['$[]']("document").$createElement("table");
      thead = $$('JS').$global()['$[]']("document").$createElement("thead");
      max_length = $send(data, 'max_by', [], function $$49(row){
        
        if (row == null) row = nil;
        return row.$keys().$length();}).$keys().$length();
      if ($truthy(self.original_atome.$option()['$[]']("header"))) {
        
        header_row = $$('JS').$global()['$[]']("document").$createElement("tr");
        $send(max_length, 'times', [], function $$50(i){var th = nil, $ret_or_1 = nil;

          
          if (i == null) i = nil;
          th = $$('JS').$global()['$[]']("document").$createElement("th");
          th['$[]=']("textContent", ($truthy(($ret_or_1 = $send(data, 'map', [], function $$51(row){
            
            if (row == null) row = nil;
            return row.$keys()['$[]'](i).$to_s();}).$compact().$first())) ? ($ret_or_1) : ("")));
          return header_row.$appendChild(th);});
        thead.$appendChild(header_row);
      };
      table_html.$appendChild(thead);
      tbody = $$('JS').$global()['$[]']("document").$createElement("tbody");
      $send(data, 'each_with_index', [], function $$52(row, row_index){var self = $$52.$$s == null ? this : $$52.$$s, tr = nil;

        
        if (row == null) row = nil;
        if (row_index == null) row_index = nil;
        tr = $$('JS').$global()['$[]']("document").$createElement("tr");
        $send(max_length, 'times', [], function $$53(cell_index){var self = $$53.$$s == null ? this : $$53.$$s, td = nil, cell_size = nil, cell_height = nil, cell_value = nil, html_element = nil;

          
          if (cell_index == null) cell_index = nil;
          td = $$('JS').$global()['$[]']("document").$createElement("td");
          cell_size = self.$set_td_style(td);
          cell_height = cell_size['$[]']("cell_height");
          cell_value = row.$values()['$[]'](cell_index);
          if ($truthy(cell_value['$instance_of?']($$('Atome')))) {
            
            cell_value.$fit(cell_height);
            html_element = $$('JS').$global()['$[]']("document").$getElementById(cell_value.$id().$to_s());
            td.$appendChild(html_element);
            html_element['$[]']("style")['$[]=']("transformOrigin", "top left");
            html_element['$[]']("style")['$[]=']("position", "relative");
            cell_value.$top(0);
            cell_value.$left(0);
          } else {
            td['$[]=']("textContent", cell_value.$to_s())
          };
          return tr.$appendChild(td);}, {$$s: self});
        return tbody.$appendChild(tr);}, {$$s: self});
      table_html.$appendChild(tbody);
      return $$('JS').$global()['$[]']("document").$querySelector("#" + (self.id)).$appendChild(table_html);
    });
    
    $def(self, '$refresh_table', function $$refresh_table(_params) {
      var self = this, data = nil, table_element = nil, max_cells = nil;

      
      data = self.original_atome.$data();
      $send(data, 'each', [], function $$54(row){
        
        if (row == null) row = nil;
        return $send(row, 'each', [], function $$55(k, v){
          
          if (k == null) k = nil;
          if (v == null) v = nil;
          if ($truthy(v['$instance_of?']($$('Atome')))) {
            return v.$attach("view")
          } else {
            return nil
          };});});
      table_element = $$('JS').$global()['$[]']("document").$querySelector("#" + (self.id) + " table");
      if ($truthy(table_element['$nil?']())) {
        
        self.$puts("Table not found");
        return nil;
      };
      $send($rb_minus(table_element['$[]']("rows").$to_a().$length(), 1), 'downto', [1], function $$56(i){
        
        if (i == null) i = nil;
        return table_element.$deleteRow(i);});
      max_cells = $send(data, 'map', [], function $$57(row){
        
        if (row == null) row = nil;
        return row.$keys().$length();}).$max();
      return $send(data, 'each', [], function $$58(row){var self = $$58.$$s == null ? this : $$58.$$s, new_row = nil;

        
        if (row == null) row = nil;
        new_row = table_element.$insertRow(-1);
        return $send(max_cells, 'times', [], function $$59(i){var self = $$59.$$s == null ? this : $$59.$$s, key = nil, value = nil, cell = nil, html_element = nil;

          
          if (i == null) i = nil;
          key = row.$keys()['$[]'](i);
          value = row['$[]'](key);
          cell = new_row.$insertCell(-1);
          if ($truthy(value['$instance_of?']($$('Atome')))) {
            
            html_element = $$('JS').$global()['$[]']("document").$getElementById(value.$id().$to_s());
            cell.$appendChild(html_element);
          } else {
            cell['$[]=']("textContent", value.$to_s())
          };
          return self.$set_td_style(cell);}, {$$s: self});}, {$$s: self});
    });
    
    $def(self, '$set_td_style', function $$set_td_style(td) {
      var cell_height = nil;

      
      cell_height = 50;
      td['$[]']("style")['$[]=']("border", "1px solid black");
      td['$[]']("style")['$[]=']("backgroundColor", "white");
      td['$[]']("style")['$[]=']("boxShadow", "10px 10px 5px #888888");
      td['$[]']("style")['$[]=']("width", "" + (cell_height) + "px");
      td['$[]']("style")['$[]=']("min-width", "" + (cell_height) + "px");
      td['$[]']("style")['$[]=']("max-width", "" + (cell_height) + "px");
      td['$[]']("style")['$[]=']("min-height", "" + (cell_height) + "px");
      td['$[]']("style")['$[]=']("max-height", "" + (cell_height) + "px");
      td['$[]']("style")['$[]=']("height", "" + (cell_height) + "px");
      td['$[]']("style")['$[]=']("overflow", "hidden");
      return (new Map([["cell_height", cell_height], ["cell_width", cell_height]]));
    });
    
    $def(self, '$insert_cell', function $$insert_cell(params) {
      var $a, $b, self = this, row_index = nil, cell_index = nil, new_content = nil, container = nil, table = nil, row = nil, cell = nil, html_element = nil;

      
      $b = params['$[]']("cell"), $a = $to_ary($b), (row_index = ($a[0] == null ? nil : $a[0])), (cell_index = ($a[1] == null ? nil : $a[1])), $b;
      new_content = params['$[]']("content");
      container = $$('JS').$global()['$[]']("document").$getElementById(self.id.$to_s());
      table = container.$querySelector("table");
      if ($truthy(table['$nil?']())) {
        
        self.$puts("No table found in the container");
        return nil;
      };
      row = table.$querySelectorAll("tr")['$[]'](row_index);
      if ($truthy(row['$nil?']())) {
        
        self.$puts("Row at index " + (row_index) + " not found");
        return nil;
      };
      cell = row.$querySelectorAll("td")['$[]'](cell_index);
      if ($truthy(cell['$nil?']())) {
        
        self.$puts("Cell at index " + (cell_index) + " in row " + (row_index) + " not found");
        return nil;
      };
      if ($truthy(new_content['$instance_of?']($$('Atome')))) {
        
        cell['$innerHTML=']("");
        html_element = $$('JS').$global()['$[]']("document").$getElementById(new_content.$id().$to_s());
        return cell.$appendChild(html_element);
      } else {
        return ($a = ["textContent", new_content.$to_s()], $send(cell, '[]=', $a), $a[$a.length - 1])
      };
    });
    
    $def(self, '$insert_row', function $$insert_row(params) {
      var self = this, insert_at_index = nil, table_element = nil, tbody = nil, header_row = nil, column_count = nil, new_row = nil, reference_row = nil;

      
      insert_at_index = params['$[]']("row");
      table_element = $$('JS').$global()['$[]']("document").$querySelector("#" + (self.id) + " table");
      if ($truthy(table_element['$nil?']())) {
        
        self.$puts("Tableau non trouvé");
        return nil;
      };
      tbody = table_element.$querySelector("tbody");
      header_row = table_element.$querySelector("thead tr");
      column_count = ($truthy(header_row) ? (header_row.$querySelectorAll("th").$to_a().$length()) : (0));
      new_row = $$('JS').$global()['$[]']("document").$createElement("tr");
      $send(column_count, 'times', [], function $$60(cell_index){var self = $$60.$$s == null ? this : $$60.$$s, td = nil;

        
        if (cell_index == null) cell_index = nil;
        td = $$('JS').$global()['$[]']("document").$createElement("td");
        self.$set_td_style(td);
        return new_row.$appendChild(td);}, {$$s: self});
      if ($truthy(insert_at_index['$zero?']())) {
        return tbody.$insertBefore(new_row, tbody.$firstChild())
      } else {
        
        reference_row = tbody.$querySelectorAll("tr").$to_a()['$[]'](insert_at_index);
        return tbody.$insertBefore(new_row, reference_row);
      };
    });
    
    $def(self, '$insert_column', function $$insert_column(params) {
      var self = this, insert_at_index = nil, table_element = nil, rows = nil;

      
      insert_at_index = params['$[]']("column");
      table_element = $$('JS').$global()['$[]']("document").$querySelector("#" + (self.id) + " table");
      if ($truthy(table_element['$nil?']())) {
        
        self.$puts("Table not found");
        return nil;
      };
      rows = table_element.$querySelectorAll("tr").$to_a();
      return $send(rows, 'each_with_index', [], function $$61(row, index){var self = $$61.$$s == null ? this : $$61.$$s, new_cell = nil, child_nodes = nil, reference_cell = nil;

        
        if (row == null) row = nil;
        if (index == null) index = nil;
        if ($eqeq(index, 0)) {
          return nil
        } else {
          
          new_cell = $$('JS').$global()['$[]']("document").$createElement("td");
          new_cell['$[]=']("innerText", "");
          self.$set_td_style(new_cell);
          if ($truthy(insert_at_index['$zero?']())) {
            return row.$insertBefore(new_cell, row.$firstChild())
          } else {
            
            child_nodes = row.$querySelectorAll("td").$to_a();
            if ($truthy($rb_lt(insert_at_index, child_nodes.$length()))) {
              
              reference_cell = child_nodes['$[]'](insert_at_index);
              return row.$insertBefore(new_cell, reference_cell);
            } else {
              return row.$appendChild(new_cell)
            };
          };
        };}, {$$s: self});
    });
    
    $def(self, '$table_insert', function $$table_insert(params) {
      var self = this;

      if ($truthy(params['$[]']("cell"))) {
        return self.$insert_cell(params)
      } else if ($truthy(params['$[]']("row"))) {
        return self.$insert_row(params)
      } else if ($truthy(params['$[]']("column"))) {
        return self.$insert_column(params)
      } else {
        return nil
      }
    });
    
    $def(self, '$remove', function $$remove(params) {try { var $t_return = $thrower('return'); 
      var self = this, $ret_or_1 = nil;

      if ($eqeqeq($$('Hash'), ($ret_or_1 = params))) {
        return $send(params, 'each', [], function $$62(k, v){var self = $$62.$$s == null ? this : $$62.$$s, row_index = nil, table_element = nil, rows = nil, row_to_remove = nil, column_index = nil;
          if (self.id == null) self.id = nil;

          
          if (k == null) k = nil;
          if (v == null) v = nil;
          
          switch (k.valueOf()) {
            case "row":
              
              row_index = params['$[]']("row");
              table_element = $$('JS').$global()['$[]']("document").$querySelector("#" + (self.id) + " table");
              if ($truthy(table_element['$nil?']())) {
                
                self.$puts("Table not found");
                $t_return.$throw(nil, $$62.$$is_lambda);
              };
              rows = table_element.$querySelectorAll("tbody tr").$to_a();
              if ($truthy($rb_ge(row_index, rows.$length()))) {
                
                self.$puts("row not found : " + (row_index));
                $t_return.$throw(nil, $$62.$$is_lambda);
              };
              row_to_remove = rows['$[]'](row_index);
              row_to_remove['$[]']("parentNode").$removeChild(row_to_remove);
              return $send(rows, 'each_with_index', [], function $$63(row, i){
                
                if (row == null) row = nil;
                if (i == null) i = nil;
                if ($truthy($rb_le(i, row_index))) {
                  return nil
                } else {
                  return nil
                };});
            case "column":
              
              column_index = params['$[]']("column");
              table_element = $$('JS').$global()['$[]']("document").$querySelector("#" + (self.id) + " table");
              if ($truthy(table_element['$nil?']())) {
                
                self.$puts("Table not found");
                $t_return.$throw(nil, $$62.$$is_lambda);
              };
              rows = table_element.$querySelectorAll("tbody tr").$to_a();
              return $send(rows, 'each', [], function $$64(row){var cells = nil, cell_to_remove = nil;

                
                if (row == null) row = nil;
                cells = row.$querySelectorAll("td").$to_a();
                if ($truthy($rb_lt(column_index, cells.$length()))) {
                  
                  cell_to_remove = cells['$[]'](column_index);
                  return cell_to_remove['$[]']("parentNode").$removeChild(cell_to_remove);
                } else {
                  return nil
                };});
            case "all":
              
              switch (v.valueOf()) {
                case "paint":
                  return self.$style("background", "none")
                case "color":
                  return nil
                case "shadow":
                  
                  self.$style("box-shadow", "none");
                  self.$style("text-shadow", "none");
                  return self.$style("filter", "none");
                default:
                  return nil
              }
              break;
            default:
              return nil
          };}, {$$s: self, $$ret: $t_return})
      } else {
        
        self.original_atome.$apply().$delete(params);
        self.$style("background", "none");
        self.$style("box-shadow", "none");
        self.$style("text-shadow", "none");
        self.$style("boxShadow", "none");
        self.$style("filter", "none");
        return self.original_atome.$apply(self.original_atome.$apply());
      }} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      } finally {$t_return.is_orphan = true;}
    });
    
    $def(self, '$table_remove', function $$table_remove(params) {
      
      if ($truthy(params['$[]']("row"))) {
        return nil
      } else if ($truthy(params['$[]']("column"))) {
        return nil
      } else {
        return nil
      }
    });
    
    $def(self, '$atomized', function $$atomized(html_object) {
      var self = this;

      
      if ($truthy(html_object['$instance_of?']($$('Array')))) {
        html_object = html_object['$[]'](0)
      };
      return (self.element = html_object);
    });
    
    $def(self, '$center', function $$center(options, attach) {
      var self = this, event_handler = nil;

      
      self.center_options = options;
      self.parent = self.$grab(attach);
      self.$apply_centering(self.center_options, self.parent);
      if ($truthy(self.center_options['$[]']("dynamic"))) {
        
        event_handler = $lambda(function $$65(event){var self = $$65.$$s == null ? this : $$65.$$s;
          if (self.center_options == null) self.center_options = nil;
          if (self.parent == null) self.parent = nil;

          
          if (event == null) event = nil;
          return self.$apply_centering(self.center_options, self.parent);}, {$$s: self});
        return $$('JS').$global()['$[]']("window").$addEventListener("resize", event_handler);
      } else {
        return nil
      };
    });
    self.$private();
    
    $def(self, '$apply_centering', function $$apply_centering(options, parent) {
      var self = this, x_position = nil, y_position = nil;

      
      if ($truthy(options['$[]']("x"))) {
        
        x_position = self.$calculate_position(options['$[]']("x"), parent.$to_px("width"), self.original_atome.$to_px("width"));
        self.original_atome.$left(x_position);
      };
      if ($truthy(options['$[]']("y"))) {
        
        y_position = self.$calculate_position(options['$[]']("y"), parent.$to_px("height"), self.original_atome.$to_px("height"));
        return self.original_atome.$top(y_position);
      } else {
        return nil
      };
    });
    return $def(self, '$calculate_position', function $$calculate_position(option, parent_dimension, self_dimension) {
      var percent = nil;

      if (($truthy(option['$is_a?']($$('String'))) && ($truthy(option['$end_with?']("%"))))) {
        
        percent = $rb_divide(option.$chop().$to_f(), 100.0);
        return $rb_times($rb_minus(parent_dimension, self_dimension), percent);
      } else if ($eqeq(option, 0)) {
        return $rb_divide($rb_minus(parent_dimension, self_dimension), 2.0)
      } else {
        return option
      }
    });
  })($nesting[0], null, $nesting)
};

Opal.modules["renderers/html/identity"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $return_val = Opal.return_val, $truthy = Opal.truthy, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,shape,html,svg,image,video,www,raw,text,add_class,[]=,[],int8,language,to_s,js,instance_of?,svg_data,each,send,update_svg_data,path,raw_data,table,atomized,alien,select_text');
  
  self.$new((new Map([["renderer", "html"], ["method", "id"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["renderer", "html"]]))], function $$1(_value, _user_proc){var self = $$1.$$s == null ? this : $$1.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$shape(self.id);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["renderer", "html"], ["specific", "vector"]]))], function $$2(_value, _user_proc){var self = $$2.$$s == null ? this : $$2.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$svg(self.id);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["renderer", "html"], ["specific", "image"]]))], function $$3(_value, _user_proc){var self = $$3.$$s == null ? this : $$3.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$image(self.id);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["renderer", "html"], ["specific", "video"]]))], function $$4(_value, _user_proc){var self = $$4.$$s == null ? this : $$4.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$video(self.id);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["renderer", "html"], ["specific", "www"]]))], function $$5(_value, _user_proc){var self = $$5.$$s == null ? this : $$5.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$www(self.id);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["renderer", "html"], ["specific", "raw"]]))], function $$6(_value, _user_proc){var self = $$6.$$s == null ? this : $$6.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$raw(self.id);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["specific", "shape"], ["renderer", "html"]]))], function $$7(_value, _user_proc){var self = $$7.$$s == null ? this : $$7.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$shape(self.id);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["specific", "text"], ["renderer", "html"]]))], function $$8(_value, _user_proc){var self = $$8.$$s == null ? this : $$8.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    self.$html().$text(self.id);
    return self.$html().$add_class("text");}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["specific", "paint"], ["renderer", "html"]]))], $return_val(nil));
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["specific", "color"], ["renderer", "html"]]))], $return_val(nil));
  $send(self, 'new', [(new Map([["method", "data"], ["type", "string"], ["specific", "text"], ["renderer", "html"]]))], function $$9(params){var $a, self = $$9.$$s == null ? this : $$9.$$s;

    
    if (params == null) params = nil;
    return ($a = ["innerHTML", ($truthy(self.$int8()['$[]'](self.$language())) ? (self.$int8()['$[]'](self.$language()).$to_s()) : (params.$to_s()))], $send(self.$js(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "data"], ["type", "string"], ["specific", "vector"], ["renderer", "html"]]))], function $$10(value){var self = $$10.$$s == null ? this : $$10.$$s;

    
    if (value == null) value = nil;
    if (!$truthy(value['$instance_of?']($$('Array')))) {
      value = [value]
    };
    return self.$html().$svg_data(value);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "component"], ["type", "hash"], ["specific", "text"], ["renderer", "html"]]))], function $$11(params, _user_proc){var self = $$11.$$s == null ? this : $$11.$$s;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    return $send(params, 'each', [], function $$12(prop, value){var self = $$12.$$s == null ? this : $$12.$$s;

      
      if (prop == null) prop = nil;
      if (value == null) value = nil;
      return self.$send("html_text_" + (prop), value);}, {$$s: self});}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "component"], ["type", "hash"], ["specific", "vector"], ["renderer", "html"]]))], function $$13(params, _user_proc){var self = $$13.$$s == null ? this : $$13.$$s;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$update_svg_data(params);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "path"], ["type", "string"], ["renderer", "html"]]))], function $$14(value, _user_proc){var self = $$14.$$s == null ? this : $$14.$$s;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$path(value);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "path"], ["type", "string"], ["renderer", "html"], ["specific", "image"]]))], function $$15(value, _user_proc){var self = $$15.$$s == null ? this : $$15.$$s;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$path(value);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "path"], ["type", "string"], ["renderer", "html"], ["specific", "www"]]))], function $$16(value, _user_proc){var self = $$16.$$s == null ? this : $$16.$$s;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$path(value);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "data"], ["type", "string"], ["renderer", "html"], ["specific", "raw"]]))], function $$17(value, _user_proc){var self = $$17.$$s == null ? this : $$17.$$s;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$raw_data(value);}, {$$s: self});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "category"], ["type", "symbol"]]))], function $$18(category_names){var self = $$18.$$s == null ? this : $$18.$$s;

    
    if (category_names == null) category_names = nil;
    return $send(category_names, 'each', [], function $$19(category_name){var self = $$19.$$s == null ? this : $$19.$$s;

      
      if (category_name == null) category_name = nil;
      return self.$html().$add_class(category_name);}, {$$s: self});}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "data"], ["type", "string"], ["specific", "matrix"], ["renderer", "html"]]))], function $$20(value, _user_proc){var self = $$20.$$s == null ? this : $$20.$$s;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$table(value);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "hash"], ["specific", "atomized"], ["renderer", "html"]]))], function $$21(value, _user_proc){var self = $$21.$$s == null ? this : $$21.$$s;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$atomized(self.$alien());}, {$$s: self});
  return $send(self, 'new', [(new Map([["renderer", "html"], ["method", "selected"], ["specific", "text"]]))], function $$22(value){var bloc = $$22.$$p || nil, self = $$22.$$s == null ? this : $$22.$$s;

    $$22.$$p = null;
    
    ;
    if (value == null) value = nil;
    return self.$html().$select_text(value);}, {$$s: self});
};

Opal.modules["renderers/html/material"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,overflow,html,instance_of?,each,remove_class,send,[],remove,grab,type,==,color,style,delete,apply,gradient,fill');
  
  $send(self, 'new', [(new Map([["method", "overflow"], ["renderer", "html"], ["type", "string"]]))], function $$1(params, bloc){var self = $$1.$$s == null ? this : $$1.$$s;

    
    if (params == null) params = nil;
    if (bloc == null) bloc = nil;
    return self.$html().$overflow(params, bloc);}, {$$s: self});
  self.$new((new Map([["method", "gradient"], ["renderer", "html"], ["type", "hash"]])));
  $send(self, 'new', [(new Map([["method", "remove"], ["renderer", "html"], ["type", "string"]]))], function $$2(object_id_to_remove, bloc){var self = $$2.$$s == null ? this : $$2.$$s, atome_to_remove = nil, atome_type_found = nil;
    if (self.apply == null) self.apply = nil;

    
    if (object_id_to_remove == null) object_id_to_remove = nil;
    if (bloc == null) bloc = nil;
    if ($truthy(object_id_to_remove['$instance_of?']($$('Hash')))) {
      return $send(object_id_to_remove, 'each', [], function $$3(particle, value){var self = $$3.$$s == null ? this : $$3.$$s, atome_ids_found = nil;

        
        if (particle == null) particle = nil;
        if (value == null) value = nil;
        
        switch (particle.valueOf()) {
          case "category":
            return self.$html().$remove_class(value)
          default:
            
            atome_ids_found = self.$send(object_id_to_remove['$[]']("all"));
            return $send(atome_ids_found, 'each', [], function $$4(atome_id){var self = $$4.$$s == null ? this : $$4.$$s;

              
              if (atome_id == null) atome_id = nil;
              return self.$remove(atome_id);}, {$$s: self});
        };}, {$$s: self})
    } else {
      
      atome_to_remove = self.$grab(object_id_to_remove);
      atome_type_found = atome_to_remove.$type();
      
      switch (atome_type_found.valueOf()) {
        case "color":
          if ($eqeq(self.$color(), [])) {
            return self.$html().$style("backgroundColor", "black")
          } else {
            
            self.$html().$style("background", "");
            self.$html().$style("backgroundColor", "");
            self.apply.$delete(object_id_to_remove);
            return self.$apply(self.apply);
          }
          break;
        case "shadow":
          
          self.$html().$style("boxShadow", "none");
          self.$html().$style("filter", "none");
          self.apply.$delete(object_id_to_remove);
          return self.$apply(self.apply);
        case "paint":
          
          atome_to_remove = self.$grab(object_id_to_remove);
          $send(atome_to_remove.$gradient(), 'each', [], function $$5(color_id){var self = $$5.$$s == null ? this : $$5.$$s;
            if (self.apply == null) self.apply = nil;

            
            if (color_id == null) color_id = nil;
            self.$html().$style("background", "");
            self.$html().$style("backgroundColor", "");
            return self.apply.$delete(color_id);}, {$$s: self});
          self.apply.$delete(object_id_to_remove);
          return self.$apply(self.apply);
        default:
          return nil
      };
    };}, {$$s: self});
  self.$new((new Map([["method", "thickness"], ["type", "integer"], ["renderer", "html"]])));
  self.$new((new Map([["method", "pattern"], ["type", "integer"], ["renderer", "html"]])));
  $send(self, 'new', [(new Map([["method", "fill"], ["renderer", "html"]]))], function $$6(params){var self = $$6.$$s == null ? this : $$6.$$s;

    
    if (params == null) params = nil;
    return self.$html().$fill(params);}, {$$s: self});
  return $send(self, 'new', [(new Map([["method", "opacity"], ["type", "integer"], ["renderer", "html"]]))], function $$7(value){var self = $$7.$$s == null ? this : $$7.$$s;

    
    if (value == null) value = nil;
    return self.$html().$style("opacity", value);}, {$$s: self});
};

Opal.modules["renderers/html/property"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('new,attr,html,update_data,table_clean,table_insert,remove,refresh_table,each,affect,style,grab');
  
  self.$new((new Map([["renderer", "html"], ["method", "diffusion"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["method", "red"], ["type", "integer"], ["specific", "color"], ["renderer", "html"]]))], function $$1(value, _user_proc){
    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return nil;});
  $send(self, 'new', [(new Map([["method", "green"], ["type", "integer"], ["specific", "color"], ["renderer", "html"]]))], function $$2(value, _user_proc){
    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return nil;});
  $send(self, 'new', [(new Map([["method", "blue"], ["type", "integer"], ["specific", "color"], ["renderer", "html"]]))], function $$3(value, _user_proc){
    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return nil;});
  $send(self, 'new', [(new Map([["method", "alpha"], ["type", "integer"], ["specific", "color"], ["renderer", "html"]]))], function $$4(value, _user_proc){
    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return nil;});
  self.$new((new Map([["renderer", "html"], ["method", "diffusion"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "edit"]]))], function $$5(params){var self = $$5.$$s == null ? this : $$5.$$s;

    
    if (params == null) params = nil;
    self.$html().$attr("contenteditable", params);
    return self.$html().$update_data(params);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "clean"], ["renderer", "html"], ["type", "hash"]]))], function $$6(params){var self = $$6.$$s == null ? this : $$6.$$s;

    
    if (params == null) params = nil;
    return self.$html().$table_clean(params);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "insert"], ["renderer", "html"], ["type", "hash"]]))], function $$7(params){var self = $$7.$$s == null ? this : $$7.$$s;

    
    if (params == null) params = nil;
    return self.$html().$table_insert(params);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "remove"], ["renderer", "html"], ["type", "hash"]]))], function $$8(params){var self = $$8.$$s == null ? this : $$8.$$s;

    
    if (params == null) params = nil;
    return self.$html().$remove(params);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "sort"], ["renderer", "html"], ["type", "hash"]]))], function $$9(params){var self = $$9.$$s == null ? this : $$9.$$s;

    
    if (params == null) params = nil;
    return self.$html().$refresh_table(params);}, {$$s: self});
  return $send(self, 'new', [(new Map([["method", "inside"], ["renderer", "html"]]))], function $$10(params){var self = $$10.$$s == null ? this : $$10.$$s;

    
    if (params == null) params = nil;
    if ($truthy(params)) {
      return $send(self.$affect(), 'each', [], function $$11(at_found){var self = $$11.$$s == null ? this : $$11.$$s;

        
        if (at_found == null) at_found = nil;
        return self.$grab(at_found).$html().$style("box-sizing", "border-box");}, {$$s: self})
    } else {
      return self.$html().$style("boxSizing", " content-box")
    };}, {$$s: self});
};

Opal.modules["renderers/html/security"] = Opal.return_val(Opal.nil); /* Generated by Opal 1.8.2 */

Opal.modules["renderers/html/spatial"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,is_a?,[],[]=,js,affect,transform,html,style,center,attach');
  
  $send(self, 'new', [(new Map([["method", "left"], ["type", "integer"], ["renderer", "html"]]))], function $$1(params){var $a, self = $$1.$$s == null ? this : $$1.$$s, unit = nil, $ret_or_1 = nil;
    if (self.unit == null) self.unit = nil;

    
    if (params == null) params = nil;
    if ($truthy(params['$is_a?']($$('Numeric')))) {
      unit = ($truthy(($ret_or_1 = self.unit['$[]']("left"))) ? ($ret_or_1) : ("px"))
    };
    return ($a = ["left", "" + (params) + (unit)], $send(self.$js()['$[]']("style"), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "top"], ["type", "integer"], ["renderer", "html"]]))], function $$2(params){var $a, self = $$2.$$s == null ? this : $$2.$$s, unit = nil, $ret_or_1 = nil;
    if (self.unit == null) self.unit = nil;

    
    if (params == null) params = nil;
    if ($truthy(params['$is_a?']($$('Numeric')))) {
      unit = ($truthy(($ret_or_1 = self.unit['$[]']("top"))) ? ($ret_or_1) : ("px"))
    };
    return ($a = ["top", "" + (params) + (unit)], $send(self.$js()['$[]']("style"), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "bottom"], ["type", "integer"], ["renderer", "html"]]))], function $$3(params){var $a, self = $$3.$$s == null ? this : $$3.$$s, unit = nil, $ret_or_1 = nil;
    if (self.unit == null) self.unit = nil;

    
    if (params == null) params = nil;
    if ($truthy(params['$is_a?']($$('Numeric')))) {
      unit = ($truthy(($ret_or_1 = self.unit['$[]']("bottom"))) ? ($ret_or_1) : ("px"))
    };
    return ($a = ["bottom", "" + (params) + (unit)], $send(self.$js()['$[]']("style"), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "right"], ["type", "integer"], ["renderer", "html"]]))], function $$4(params){var $a, self = $$4.$$s == null ? this : $$4.$$s, unit = nil, $ret_or_1 = nil;
    if (self.unit == null) self.unit = nil;

    
    if (params == null) params = nil;
    if ($truthy(params['$is_a?']($$('Numeric')))) {
      unit = ($truthy(($ret_or_1 = self.unit['$[]']("right"))) ? ($ret_or_1) : ("px"))
    };
    return ($a = ["right", "" + (params) + (unit)], $send(self.$js()['$[]']("style"), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "top"], ["type", "integer"], ["renderer", "html"], ["specific", "shadow"]]))], function $$5(){var self = $$5.$$s == null ? this : $$5.$$s;

    return self.$affect(self.$affect())}, {$$s: self});
  self.$new((new Map([["method", "left"], ["type", "integer"], ["specific", "color"], ["renderer", "html"]])));
  $send(self, 'new', [(new Map([["method", "left"], ["type", "integer"], ["renderer", "html"], ["specific", "shadow"]]))], function $$6(){var self = $$6.$$s == null ? this : $$6.$$s;

    return self.$affect(self.$affect())}, {$$s: self});
  self.$new((new Map([["method", "top"], ["type", "integer"], ["specific", "color"], ["renderer", "html"]])));
  $send(self, 'new', [(new Map([["method", "rotate"], ["type", "integer"], ["renderer", "html"]]))], function $$7(params){var self = $$7.$$s == null ? this : $$7.$$s;

    
    if (params == null) params = nil;
    return self.$html().$transform("rotate", params);}, {$$s: self});
  self.$new((new Map([["method", "rotate"], ["type", "integer"], ["renderer", "html"], ["specific", "paint"]])));
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "position"]]))], function $$8(params){var self = $$8.$$s == null ? this : $$8.$$s;

    
    if (params == null) params = nil;
    return self.$html().$style("position", params);}, {$$s: self});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "depth"]]))], function $$9(params){var self = $$9.$$s == null ? this : $$9.$$s;

    
    if (params == null) params = nil;
    return self.$html().$style("z-index", params);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "organise"], ["renderer", "html"]]))], function $$10(params){var self = $$10.$$s == null ? this : $$10.$$s;

    
    if (params == null) params = nil;
    return self.$html().$style("gridTemplateColumns", params);}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "spacing"], ["renderer", "html"]]))], function $$11(params){var self = $$11.$$s == null ? this : $$11.$$s;

    
    if (params == null) params = nil;
    return self.$html().$style("gap", "" + (params) + "px");}, {$$s: self});
  $send(self, 'new', [(new Map([["method", "display"], ["renderer", "html"]]))], function $$12(params){var self = $$12.$$s == null ? this : $$12.$$s;

    
    if (params == null) params = nil;
    return self.$html().$style("display", params);}, {$$s: self});
  return $send(self, 'new', [(new Map([["renderer", "html"], ["method", "center"]]))], function $$13(params){var self = $$13.$$s == null ? this : $$13.$$s;

    
    if (params == null) params = nil;
    return self.$html().$center(params, self.$attach());}, {$$s: self});
};

Opal.modules["renderers/html/time"] = Opal.return_val(Opal.nil); /* Generated by Opal 1.8.2 */

Opal.modules["renderers/html/utility"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $eqeqeq = Opal.eqeqeq, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $def = Opal.def, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,delete,html,id,hypertext,hyperedit,read,browse,terminal,===,call,merge,match,==,host,file_for_opal,getElementById,[],global,to_s,createElement,[]=,addEventListener,Native,puts,file_handler,readAsText,click,appendChild,create_file_browser,getBoundingClientRect,to_f');
  
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "web"]]))], function $$1(params){var user_proc = $$1.$$p || nil;

    $$1.$$p = null;
    
    ;
    if (params == null) params = nil;
    return params;});
  self.$new((new Map([["renderer", "html"], ["method", "renderers"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "delete"], ["type", "string"]]))], function $$3(params){var self = $$3.$$s == null ? this : $$3.$$s;

    
    if (params == null) params = nil;
    return self.$html().$delete(self.$id());}, {$$s: self});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "hypertext"]]))], function $$4(params){var self = $$4.$$s == null ? this : $$4.$$s;

    
    if (params == null) params = nil;
    return self.$html().$hypertext(params);}, {$$s: self});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "hyperedit"]]))], function $$5(params, usr_proc){var self = $$5.$$s == null ? this : $$5.$$s;

    
    if (params == null) params = nil;
    if (usr_proc == null) usr_proc = nil;
    return self.$html().$hyperedit(params, usr_proc);}, {$$s: self});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "read"], ["type", "string"]]))], function $$6(value){var bloc = $$6.$$p || nil, self = $$6.$$s == null ? this : $$6.$$s;

    $$6.$$p = null;
    
    ;
    if (value == null) value = nil;
    return self.$html().$read(self.$id(), value);}, {$$s: self});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "browse"], ["type", "string"]]))], function $$7(value){var bloc = $$7.$$p || nil, self = $$7.$$s == null ? this : $$7.$$s;

    $$7.$$p = null;
    
    ;
    if (value == null) value = nil;
    return self.$html().$browse(self.$id(), value);}, {$$s: self});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "terminal"], ["type", "string"]]))], function $$8(value){var bloc = $$8.$$p || nil, self = $$8.$$s == null ? this : $$8.$$s;

    $$8.$$p = null;
    
    ;
    if (value == null) value = nil;
    return self.$html().$terminal(self.$id(), value);}, {$$s: self});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "match"]]))], function $$9(params, bloc){var self = $$9.$$s == null ? this : $$9.$$s, $ret_or_2 = nil, $ret_or_1 = nil, result = nil;

    
    if (params == null) params = nil;
    if (bloc == null) bloc = nil;
    if ($eqeqeq(($truthy(($ret_or_2 = "atome")) ? ($ret_or_2) : ("view")), ($ret_or_1 = self.$id()))) {
      
      result = bloc.$call();
      result = (new Map([["alterations", result]]));
      params = params.$merge(result);
      return self.$html().$match(params);
    } else {
      return nil
    };}, {$$s: self});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "import"], ["type", "blob"]]))], function $$10(_params, bloc){var self = $$10.$$s == null ? this : $$10.$$s;
    if (self.id == null) self.id = nil;

    
    if (_params == null) _params = nil;
    if (bloc == null) bloc = nil;
    if ($eqeq($$('Atome').$host(), "web-opal")) {
      return $send(self, 'file_for_opal', [self.id, bloc], function $$11(file_content){
        
        if (file_content == null) file_content = nil;
        return bloc.$call(file_content);})
    } else {
      
      
      $def(self, '$create_file_browser', function $$create_file_browser(_options) {
        var bloc = $$create_file_browser.$$p || nil, self = this, div_element = nil, input_element = nil;
        if (self.id == null) self.id = nil;

        $$create_file_browser.$$p = null;
        
        ;
        if (_options == null) _options = "";
        div_element = $$('JS').$global()['$[]']("document").$getElementById(self.id.$to_s());
        input_element = $$('JS').$global()['$[]']("document").$createElement("input");
        input_element['$[]=']("type", "file");
        input_element['$[]']("style")['$[]=']("position", "absolute");
        input_element['$[]']("style")['$[]=']("display", "none");
        input_element['$[]']("style")['$[]=']("width", "0px");
        input_element['$[]']("style")['$[]=']("height", "0px");
        $send(input_element, 'addEventListener', ["change"], function $$12(native_event){var self = $$12.$$s == null ? this : $$12.$$s, event = nil, file = nil, file_reader = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          file = event['$[]']("target")['$[]']("files")['$[]'](0);
          if ($truthy(file)) {
            
            self.$puts("file requested: " + (file['$[]']("name")));
            file_reader = $$('JS').$global()['$[]']("FileReader").$new();
            $send(file_reader, 'addEventListener', ["load"], function $$13(load_event){var self = $$13.$$s == null ? this : $$13.$$s, file_content = nil;
              if (self.id == null) self.id = nil;

              
              if (load_event == null) load_event = nil;
              file_content = load_event['$[]']("target")['$[]']("result");
              return $$('Atome').$file_handler(self.id, file_content, bloc);}, {$$s: self});
            return file_reader.$readAsText(file);
          } else {
            return nil
          };}, {$$s: self});
        $send(div_element, 'addEventListener', ["mousedown"], function $$14(event){
          
          if (event == null) event = nil;
          return input_element.$click();});
        return div_element.$appendChild(input_element);
      }, -1);
      return $send(self, 'create_file_browser', ["options"], function $$15(file_content){
        
        if (file_content == null) file_content = nil;
        return bloc.$call(file_content);});
    };}, {$$s: self});
  return $send(self, 'new', [(new Map([["method", "compute"], ["type", "hash"], ["renderer", "html"]]))], function $$16(params){var $a, self = $$16.$$s == null ? this : $$16.$$s, element = nil, bounding_box = nil, top = nil, left = nil, width = nil, height = nil, value_found = nil, $ret_or_1 = nil;
    if (self.id == null) self.id = nil;
    if (self.compute == null) self.compute = nil;

    
    if (params == null) params = nil;
    element = $$('JS').$global()['$[]']("document").$getElementById(self.id.$to_s());
    bounding_box = element.$getBoundingClientRect();
    top = bounding_box['$[]']("top");
    left = bounding_box['$[]']("left");
    width = bounding_box['$[]']("width");
    height = bounding_box['$[]']("height");
    value_found = ($eqeqeq("left", ($ret_or_1 = params['$[]']("particle"))) ? (left.$to_f()) : ($eqeqeq("top", $ret_or_1) ? (top.$to_f()) : ($eqeqeq("width", $ret_or_1) ? (width.$to_f()) : ($eqeqeq("height", $ret_or_1) ? (height.$to_f()) : (nil)))));
    return ($a = ["value", value_found], $send(self.compute, '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
};

Opal.modules["renderers/html/index"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  
  self.$require("renderers/html/atome");
  self.$require("renderers/html/atome_html");
  self.$require("renderers/html/communication");
  self.$require("renderers/html/effect");
  self.$require("renderers/html/event");
  self.$require("renderers/html/geometry");
  self.$require("renderers/html/hierarchy");
  self.$require("renderers/html/html");
  self.$require("renderers/html/identity");
  self.$require("renderers/html/material");
  self.$require("renderers/html/property");
  self.$require("renderers/html//security");
  self.$require("renderers/html/spatial");
  self.$require("renderers/html//time");
  return self.$require("renderers/html/utility");
};

Opal.modules["renderers/headless/utility"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('build_render');
  
  $$('Genesis').$build_render("headless_schedule");
  return $$('Genesis').$build_render("headless_reader");
};

Opal.modules["renderers/headless/headless"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $nesting = [], nil = Opal.nil;

  
  (function($base, $super) {
    var self = $klass($base, $super, 'Atome');

    
    return $def(self, '$headless', function $$headless(_val) {
      
      
      if (_val == null) _val = nil;
      return nil;
    }, -1)
  })($nesting[0], null);
  return (function($base, $super) {
    var self = $klass($base, $super, 'Headless');

    var $proto = self.$$prototype;

    $proto.element = nil;
    return $def(self, '$initialize', function $$initialize(id_found, current_atome) {
      var self = this, $ret_or_1 = nil;

      
      self.element = ($truthy(($ret_or_1 = self.element)) ? ($ret_or_1) : (self));
      self.id = id_found;
      return (self.original_atome = current_atome);
    })
  })($nesting[0], null);
};

Opal.modules["renderers/headless/index"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  
  self.$require("renderers/headless/utility");
  return self.$require("renderers/headless/headless");
};

Opal.modules["renderers/server/utility"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('build_render');
  
  $$('Genesis').$build_render("server_schedule");
  return $$('Genesis').$build_render("server_reader");
};

Opal.modules["renderers/server/index"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  return self.$require("renderers/server/utility")
};

Opal.modules["atome/utilities/sanitizer"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $rb_divide = Opal.rb_divide, $def = Opal.def, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('private,css_rgb,[],split,gsub,sub,/,to_f');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$private();
    return $def(self, '$create_color_hash', function $$create_color_hash(params) {
      var rgb_color = nil, split_data = nil;

      
      rgb_color = $$$($$('Color'), 'CSS')['$[]'](params).$css_rgb();
      split_data = rgb_color.$sub("rgb(", "").$sub(")", "").$gsub(",", "").$split("%");
      return (new Map([["red", $rb_divide(split_data['$[]'](0).$to_f(), 100)], ["green", $rb_divide(split_data['$[]'](1).$to_f(), 100)], ["blue", $rb_divide(split_data['$[]'](2).$to_f(), 100)]]));
    });
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/genesis/presets"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('new,atome_common,preset_common,to_proc');
  
  $send(self, 'new', [(new Map([["preset", "box"]]))], function $$1(params){var bloc = $$1.$$p || nil, self = $$1.$$s == null ? this : $$1.$$s, atome_preset = nil;

    $$1.$$p = null;
    
    ;
    if (params == null) params = (new Map());
    atome_preset = "box";
    params = self.$atome_common(atome_preset, params);
    return $send(self, 'preset_common', [params], bloc.$to_proc());}, {$$arity: -1, $$s: self});
  return $send(self, 'new', [(new Map([["preset", "circle"]]))], function $$3(params){var bloc = $$3.$$p || nil, self = $$3.$$s == null ? this : $$3.$$s, atome_preset = nil;

    $$3.$$p = null;
    
    ;
    if (params == null) params = (new Map());
    atome_preset = "circle";
    params = self.$atome_common(atome_preset, params);
    return $send(self, 'preset_common', [params], bloc.$to_proc());}, {$$arity: -1, $$s: self});
};

Opal.modules["atome/genesis/sparkle"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $const_set = Opal.const_set, $def = Opal.def, $send = Opal.send, $truthy = Opal.truthy, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, default_render = nil, machine_id = nil, machine_password = nil, user_password = nil;

  Opal.add_stubs('[],default_params,new,human,identity_generator,current_machine=,puts,aui,app_identity,host,engine,users,current_user,current_machine,connected,example,text,touch,delete,help,atome_infos,current_server,start_with?,connected=,server,init_websocket,allow_sync=,sync,database_ready=,==,particle_list,each,send_localstorage_content,password,touch_allow');
  
  default_render = $$('Essentials').$default_params()['$[]']("render_engines");
  $$('Atome').$new((new Map([["renderers", []], ["aid", "eDen"], ["type", "element"], ["tag", (new Map([["system", true]]))]])));
  $$('Atome').$new((new Map([["renderers", []], ["aid", "user_view"], ["type", "element"], ["tag", (new Map([["system", true]]))], ["attach", "eDen"]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", "view_color"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0.15], ["green", 0.15], ["blue", 0.15], ["alpha", 1], ["top", 12], ["left", 12], ["diffusion", "linear"]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", "shape_color"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0.4], ["green", 0.4], ["blue", 0.4], ["alpha", 1]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", "box_color"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0.5], ["green", 0.5], ["blue", 0.5], ["alpha", 1]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", "invisible_color"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 1]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", "text_color"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0.9], ["green", 0.9], ["blue", 0.9], ["alpha", 1]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", "circle_color"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0.6], ["green", 0.6], ["blue", 0.6], ["alpha", 1]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", "back_selection"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0.6], ["green", 0.6], ["blue", 0.1], ["alpha", 0.7]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", "text_selection"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0.3], ["green", 0.3], ["blue", 0.3], ["alpha", 0.9]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["aid", "black_matter"], ["type", "shape"], ["attach", "user_view"], ["left", 0], ["right", 0], ["top", 0], ["bottom", 0], ["width", 0], ["height", 0], ["overflow", "hidden"], ["tag", (new Map([["system", true]]))]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["aid", "view"], ["type", "shape"], ["attach", "user_view"], ["apply", ["view_color"]], ["tag", (new Map([["system", true]]))], ["left", 0], ["right", 0], ["top", 0], ["bottom", 0], ["width", "auto"], ["height", "auto"], ["overflow", "auto"]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["aid", "intuition"], ["type", "shape"], ["attach", "user_view"], ["data", (new Map())], ["tag", (new Map([["system", true]]))], ["left", 0], ["top", 0], ["bottom", 0], ["width", 0], ["height", "auto"], ["overflow", "visible"]])));
  machine_id = "dummy_machine";
  machine_password = (new Map([["read", (new Map([["atome", "star_wars"]]))], ["write", (new Map([["atome", "star_wars"]]))]]));
  $$('Atome').$new((new Map([["renderers", ["html"]], ["aid", "copy"], ["collect", []], ["type", "group"], ["tag", (new Map([["system", true]]))]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", machine_id], ["type", "machine"], ["password", machine_password], ["name", "macAir"], ["data", (new Map([["date", "10090717"]]))], ["tag", (new Map([["system", true]]))]])));
  user_password = (new Map([["global", "star_win"], ["read", (new Map([["atome", "star_wars"]]))], ["write", (new Map([["atome", "star_wars"]]))]]));
  self.$human((new Map([["id", self.$identity_generator()], ["login", true], ["password", user_password], ["data", (new Map([["birthday", "10/05/1996"]]))], ["selection", []], ["attach", "user_view"]])));
  $$('Universe')['$current_machine='](machine_id);
  $const_set($nesting[0], 'A', $$('Atome').$new((new Map([["renderers", default_render], ["id", "atome"], ["type", "element"], ["tag", (new Map([["system", true]]))]]))));
  $$('Atome').$new((new Map([["renderers", ["html"]], ["aid", "selector"], ["collect", []], ["type", "group"], ["tag", (new Map([["system", true]]))]])));
  
  $def(self, '$atome_infos', function $$atome_infos() {
    var self = this;

    
    self.$puts("atome version: " + ($$$($$('Atome'), 'VERSION')));
    self.$puts("device identity: " + ($$('Atome').$aui()));
    self.$puts("application identity: " + ($$('Universe').$app_identity()));
    self.$puts("host framework: " + ($$('Atome').$host()));
    self.$puts("engine: " + ($$('Universe').$engine()));
    self.$puts("users: " + ($$('Universe').$users()));
    self.$puts("current user: " + ($$('Universe').$current_user()));
    self.$puts("machine: " + ($$('Universe').$current_machine()));
    return self.$puts("connected: " + ($$('Universe').$connected()));
  });
  $send($$('A'), 'example', ["left"], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s, english = nil, french = nil, code = nil, example = nil, code_text = nil;

    
    english = "here is an example, touch me to get some help, or click the code to exec";
    french = "voici un example, click moi pour de l'aide, ou  clicker le code pour l'executer";
    code = "b=box\n" + "puts b.left\n" + "b.left(155)\n" + "puts b.left\n";
    example = self.$text((new Map([["int8", (new Map([["english", english], ["french", french]]))], ["language", "english"], ["width", 666]])));
    code_text = self.$text((new Map([["int8", (new Map([["english", code]]))], ["language", "english"], ["width", 666], ["top", 33]])));
    $send(example, 'touch', [true], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

      
      example.$delete(true);
      return self.$help("left");}, {$$s: self});
    return $send(code_text, 'touch', [true], function $$3(){var $a, self = $$3.$$s == null ? this : $$3.$$s;

      return ($a = code, typeof Opal.compile === 'function' ? eval(Opal.compile($a, {scope_variables: ["english", "french", "code", "example", "code_text", "default_render", "machine_id", "machine_password", "user_password"], arity_check: false, file: '(eval)', eval: true})) : self.$eval($a))}, {$$s: self});}, {$$s: self});
  
  $def(self, '$atome_genesis', function $$atome_genesis() {
    var $a, self = this, server = nil, $ret_or_1 = nil;

    
    self.$atome_infos();
    server = $$('Universe').$current_server();
    server = ($truthy(($ret_or_1 = server)) ? ($ret_or_1) : ("disconnected"));
    self.$puts("server: " + (server));
    if ($truthy(server['$start_with?']("http"))) {
      
      $$('Universe')['$connected='](true);
      $$('A').$server((new Map([["address", "localhost:9292"], ["type", "ws"]])));
      $send($$('A'), 'init_websocket', [], function $$4(msg){var self = $$4.$$s == null ? this : $$4.$$s;

        
        if (msg == null) msg = nil;
        return self.$puts("websocket initialised " + (msg));}, {$$s: self});
      return ($a = [true], $send($$('Universe'), 'allow_sync=', $a), $a[$a.length - 1]);
    } else {
      return nil
    };
  });
  
  $def(self, '$init_database', function $$init_database() {
    var self = this, particles = nil;

    
    $send($$('A'), 'sync', [(new Map([["action", "init_db"], ["data", (new Map([["database", "eDen"]]))]]))], function $$5(data){var $a;

      
      if (data == null) data = nil;
      return ($a = [data['$[]']("data")['$[]']("message")['$==']("database_ready")], $send($$('Universe'), 'database_ready=', $a), $a[$a.length - 1]);});
    particles = $$('Universe').$particle_list();
    $send($$('A'), 'sync', [(new Map([["action", "crate_db_table"], ["data", (new Map([["table", "user"], ["type", "string"]]))]]))], function $$6(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;});
    $send($$('A'), 'sync', [(new Map([["action", "create_db_column"], ["data", (new Map([["table", "user"], ["column", "email"], ["type", "string"], ["unique", true]]))]]))], function $$7(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;});
    $send($$('A'), 'sync', [(new Map([["action", "create_db_column"], ["data", (new Map([["table", "user"], ["column", "password"], ["type", "string"]]))]]))], function $$8(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;});
    $send($$('A'), 'sync', [(new Map([["action", "crate_db_table"], ["data", (new Map([["table", "history"]]))]]))], function $$9(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;});
    $send($$('A'), 'sync', [(new Map([["action", "create_db_column"], ["data", (new Map([["table", "history"], ["column", "aid"], ["type", "string"]]))]]))], function $$10(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;});
    $send($$('A'), 'sync', [(new Map([["action", "create_db_column"], ["data", (new Map([["table", "history"], ["column", "particle"], ["type", "string"]]))]]))], function $$11(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;});
    $send($$('A'), 'sync', [(new Map([["action", "create_db_column"], ["data", (new Map([["table", "history"], ["column", "value"], ["type", "string"]]))]]))], function $$12(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;});
    $send($$('A'), 'sync', [(new Map([["action", "create_db_column"], ["data", (new Map([["table", "history"], ["column", "date"], ["type", "datetime"]]))]]))], function $$13(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;});
    $send($$('A'), 'sync', [(new Map([["action", "crate_db_table"], ["data", (new Map([["table", "atome"]]))]]))], function $$14(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;});
    $send(particles, 'each', [], function $$15(particle, infos){var type = nil;

      
      if (particle == null) particle = nil;
      if (infos == null) infos = nil;
      type = infos['$[]']("type");
      return $send($$('A'), 'sync', [(new Map([["action", "create_db_column"], ["data", (new Map([["table", "atome"], ["column", particle], ["type", type]]))]]))], function $$16(_db_state){
        
        if (_db_state == null) _db_state = nil;
        return nil;});});
    self.$puts("sending localstorage");
    return $$('Atome').$send_localstorage_content();
  });
  
  $def(self, '$user_login', function $$user_login() {
    var self = this, password = nil;

    
    password = $$('Black_matter').$password();
    $send(self, 'sync', [(new Map([["action", "authentication"], ["data", (new Map([["email", "jeezs@atome.one"]]))]]))], function $$17(email){var self = $$17.$$s == null ? this : $$17.$$s;

      
      if (email == null) email = nil;
      return self.$puts("email received : " + (email));}, {$$s: self});
    return $send(self, 'sync', [(new Map([["action", "authorization"], ["data", (new Map([["password", password]]))]]))], function $$18(pass){var self = $$18.$$s == null ? this : $$18.$$s;

      
      if (pass == null) pass = nil;
      return self.$puts("password received : " + (pass));}, {$$s: self});
  });
  return self.$touch_allow(false);
};

Opal.modules["molecules/init"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $truthy = Opal.truthy, $find_super = Opal.find_super, $send2 = Opal.send2, $def = Opal.def, $klass = Opal.klass, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('[],grab,clear,box,color,include');
  
  (function($base) {
    var self = $module($base, 'Molecule');

    
    return $def(self, '$new', function $Molecule_new$1(params) {
      var bloc = $Molecule_new$1.$$p || nil, self = this, site_found = nil, page_id = nil, footer_header_size = nil, footer_header_color = nil, top = nil, header = nil, bottom = nil;

      $Molecule_new$1.$$p = null;
      
      ;
      if ($truthy(params['$[]']("page"))) {
        
        site_found = self.$grab(params['$[]']("page")['$[]']("application"));
        site_found.$clear(true);
        page_id = params['$[]']("page")['$[]']("name");
        site_found.$box((new Map([["id", page_id]])));
      } else if ($truthy(params['$[]']("application"))) {
        
        footer_header_size = 33;
        footer_header_color = self.$color((new Map([["red", 0], ["green", 0], ["blue", 0], ["id", "footer_header_color"]])));
        if ($truthy(params['$[]']("header"))) {
          
          top = footer_header_size;
          header = self.$box((new Map([["left", 0], ["right", 0], ["width", "auto"], ["top", 0], ["height", top], ["id", "header"]])));
        } else {
          top = 0
        };
        if ($truthy(params['$[]']("footer"))) {
          
          bottom = footer_header_size;
          self.$box((new Map([["left", 0], ["right", 0], ["width", "auto"], ["top", "auto"], ["bottom", 0], ["height", bottom], ["id", "footer"]])));
        } else {
          bottom = 0
        };
        self.$box((new Map([["left", 0], ["right", 0], ["width", "auto"], ["top", top], ["bottom", bottom], ["height", "auto"], ["id", params['$[]']("application")]])));
      } else if ($truthy(params['$[]']("module"))) {
      };
      if ($truthy(((self, $find_super(self, 'new', $Molecule_new$1, true, false)) != null ? "super" : nil))) {
        return $send2(self, $find_super(self, 'new', $Molecule_new$1, false, true), 'new', [params], bloc)
      } else {
        return nil
      };
    })
  })($nesting[0]);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return self.$include($$('Molecule'))
  })($nesting[0], null, $nesting);
};

Opal.modules["molecules/intuition/utillities"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $rb_divide = Opal.rb_divide, $rb_times = Opal.rb_times, $eqeq = Opal.eqeq, $rb_gt = Opal.rb_gt, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $rb_lt = Opal.rb_lt, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,[],[]=,delete,identity_generator,instance_of?,id,renderers,grab,/,*,touch,tick,edit,==,component,keyboard,Native,to_s,call,data,preventDefault,>,length,data=,each,send,holder,width,merge,each_with_index,top,+,box,shadow,apply,color,-,lambda,<,left,smooth,to_f,instance_variable_set,height,behavior,round,clamp,drag,value,%');
  
  $send(self, 'new', [(new Map([["molecule", "input"]]))], function $$1(params, bloc){var self = $$1.$$s == null ? this : $$1.$$s, $ret_or_1 = nil, new_id = nil, trigger = nil, limit = nil, back_col = nil, text_col = nil, default_text = nil, default_parent = nil, attach_to = nil, renderer_found = nil, input_back = nil, text_input = nil;

    
    if (params == null) params = nil;
    if (bloc == null) bloc = nil;
    if ($truthy(($ret_or_1 = params['$[]']("height")))) {
      $ret_or_1
    } else {
      params['$[]=']("height", 15)
    };
    if ($truthy(($ret_or_1 = params['$[]']("width")))) {
      $ret_or_1
    } else {
      params['$[]=']("width", 222)
    };
    new_id = ($truthy(($ret_or_1 = params.$delete("id"))) ? ($ret_or_1) : (self.$identity_generator()));
    trigger = params.$delete("trigger");
    trigger = ($truthy(($ret_or_1 = trigger)) ? ($ret_or_1) : ("return"));
    limit = params.$delete("limit");
    limit = ($truthy(($ret_or_1 = limit)) ? ($ret_or_1) : (15));
    back_col = params.$delete("back");
    back_col = ($truthy(($ret_or_1 = back_col)) ? ($ret_or_1) : ("grey"));
    text_col = params.$delete("text");
    text_col = ($truthy(($ret_or_1 = text_col)) ? ($ret_or_1) : ("black"));
    default_text = params.$delete("default");
    default_text = ($truthy(($ret_or_1 = default_text)) ? ($ret_or_1) : ("input"));
    default_parent = ($truthy(self['$instance_of?']($$('Atome'))) ? (self.$id()) : ("view"));
    attach_to = ($truthy(($ret_or_1 = params['$[]']("attach"))) ? ($ret_or_1) : (default_parent));
    renderer_found = self.$grab(attach_to).$renderers();
    input_back = $$('Atome').$new((new Map([["renderers", renderer_found], ["id", new_id], ["type", "shape"], ["color", back_col], ["left", 0], ["top", 0], ["data", ""], ["attach", attach_to], ["smooth", 6], ["overflow", "hidden"]])));
    text_input = $$('Atome').$new((new Map([["renderers", ["html"]], ["type", "text"], ["color", text_col], ["component", (new Map([["size", params['$[]']("height")]]))], ["data", default_text], ["left", $rb_divide($rb_times(params['$[]']("height"), 20), 100)], ["top", 0], ["edit", true], ["attach", input_back.$id()], ["height", params['$[]']("height")], ["position", "absolute"]])));
    $send(text_input, 'touch', ["down"], function $$2(){
      
      input_back.$tick("input");
      return text_input.$edit(true);});
    $send(input_back, 'touch', ["up"], function $$3(){
      if ($eqeq(input_back.$tick()['$[]']("input"), 1)) {
        return text_input.$component((new Map([["selected", true]])))
      } else {
        return nil
      }});
    $send(text_input, 'keyboard', ["down"], function $$4(native_event){var self = $$4.$$s == null ? this : $$4.$$s, event = nil;

      
      if (native_event == null) native_event = nil;
      event = self.$Native(native_event);
      if (!($eqeq(event['$[]']("keyCode").$to_s(), "8") || ($eqeq(event['$[]']("keyCode").$to_s(), "46")))) {
        if ($eqeq(event['$[]']("keyCode").$to_s(), "13")) {
          
          if ($eqeq(trigger, "return")) {
            bloc.$call(text_input.$data())
          };
          text_input.$edit(false);
          event.$preventDefault();
        } else if ($truthy($rb_gt(text_input.$data().$length(), limit))) {
          event.$preventDefault()
        }
      };
      if ($eqeq(trigger, "down")) {
        return bloc.$call(text_input.$data())
      } else {
        return nil
      };}, {$$s: self});
    $send(text_input, 'keyboard', ["up"], function $$5(native_event){
      
      if (native_event == null) native_event = nil;
      input_back['$data='](text_input.$data());
      if ($eqeq(trigger, "up")) {
        return bloc.$call(text_input.$data())
      } else {
        return nil
      };});
    $send(params, 'each', [], function $$6(part_f, val_f){
      
      if (part_f == null) part_f = nil;
      if (val_f == null) val_f = nil;
      return input_back.$send(part_f, val_f);});
    input_back.$holder(text_input);
    return input_back;}, {$$s: self});
  $send(self, 'new', [(new Map([["molecule", "list"]]))], function $$7(params, _bloc){var self = $$7.$$s == null ? this : $$7.$$s, styles_found = nil, element = nil, listing = nil, new_id = nil, $ret_or_1 = nil, margin = nil, height_found = nil, default_parent = nil, attach_to = nil, renderer_found = nil, list = nil;

    
    if (params == null) params = nil;
    if (_bloc == null) _bloc = nil;
    styles_found = params.$delete("styles");
    element = params.$delete("element");
    listing = params.$delete("listing");
    new_id = ($truthy(($ret_or_1 = params.$delete("id"))) ? ($ret_or_1) : (self.$identity_generator()));
    styles_found = ($truthy(($ret_or_1 = styles_found)) ? ($ret_or_1) : ((new Map([["width", 99], ["height", 33], ["margin", 6], ["shadow", (new Map([["blur", 9], ["left", 3], ["top", 3], ["id", "cell_shadow"], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0.6]]))], ["left", 0], ["color", "yellowgreen"]]))));
    element = ($truthy(($ret_or_1 = element)) ? ($ret_or_1) : ((new Map([["width", 33], ["height", 33], ["left", "center"], ["top", "center"], ["color", "orange"], ["type", "text"]]))));
    if (!$truthy(params['$[]']("width"))) {
      params['$[]=']("width", styles_found['$[]']("width"))
    };
    if (!$truthy(element['$[]']("width"))) {
      element['$[]=']("width", styles_found['$[]'](self.$width()))
    };
    margin = styles_found['$[]']("margin");
    height_found = styles_found['$[]']("height");
    default_parent = ($truthy(self['$instance_of?']($$('Atome'))) ? (self.$id()) : ("view"));
    attach_to = ($truthy(($ret_or_1 = params['$[]']("attach"))) ? ($ret_or_1) : (default_parent));
    renderer_found = self.$grab(attach_to).$renderers();
    list = $$('Atome').$new((new Map([["renderers", renderer_found], ["id", new_id], ["type", "shape"], ["color", (new Map([["alpha", 0]]))], ["attach", attach_to]])).$merge(params));
    $send(listing, 'each_with_index', [], function $$8(data, index){var new_atome = nil, el = nil;

      
      if (data == null) data = nil;
      if (index == null) index = nil;
      new_atome = (new Map([["renderers", renderer_found], ["attach", list.$id()]])).$merge(styles_found).$merge((new Map([["type", "shape"]])));
      el = $$('Atome').$new(new_atome);
      el.$top($rb_times($rb_plus(height_found, margin), index));
      return $$('Atome').$new((new Map([["renderers", renderer_found], ["attach", el.$id()]])).$merge(element).$merge(data));});
    return list;}, {$$s: self});
  $send(self, 'new', [(new Map([["molecule", "slider"]]))], function $$9(params, bloc){var $a, self = $$9.$$s == null ? this : $$9.$$s, default_value = nil, $ret_or_1 = nil, orientation = nil, range_found = nil, min_value = nil, max_value = nil, color_found = nil, new_id = nil, default_smooth = nil, default_slider_particles = nil, default_cursor_particles = nil, cursor_found = nil, slider_particle = nil, slider = nil, slider_shadow = nil, range = nil, cursor_particle = nil, cursor = nil, cursor_left = nil, cursor_top = nil, my_behavior = nil, update_value = nil, cursor_top_initial = nil, cursor_left_initial = nil;

    
    if (params == null) params = nil;
    if (bloc == null) bloc = nil;
    default_value = ($truthy(($ret_or_1 = params['$[]']("value"))) ? ($ret_or_1) : (($a = ["value", 0], $send(params, '[]=', $a), $a[$a.length - 1])));
    orientation = ($truthy(($ret_or_1 = params.$delete("orientation"))) ? ($ret_or_1) : ("horizontal"));
    range_found = params.$delete("range");
    min_value = ($truthy(($ret_or_1 = params.$delete("min"))) ? ($ret_or_1) : (0));
    max_value = ($truthy(($ret_or_1 = params.$delete("max"))) ? ($ret_or_1) : (100));
    color_found = ($truthy(($ret_or_1 = params['$[]']("color"))) ? ($ret_or_1) : (($a = ["color", "gray"], $send(params, '[]=', $a), $a[$a.length - 1])));
    new_id = ($truthy(($ret_or_1 = params.$delete("id"))) ? ($ret_or_1) : (self.$identity_generator()));
    default_smooth = 9;
    default_slider_particles = (new Map([["id", new_id], ["color", color_found], ["width", 333], ["height", 33], ["left", 0], ["top", 0], ["smooth", default_smooth]]));
    default_cursor_particles = (new Map([["color", color_found], ["width", 29], ["height", 29], ["left", 0], ["smooth", "100%"]]));
    cursor_found = params.$delete("cursor");
    slider_particle = default_slider_particles.$merge(params);
    slider = self.$box(slider_particle);
    slider_shadow = slider.$shadow((new Map([["id", "s2"], ["left", 3], ["top", 3], ["blur", 9], ["invert", true], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0.7]])));
    range = slider.$box((new Map([["id", "" + (slider.$id()) + "_range"], ["top", "auto"], ["bottom", 0]])));
    if ($truthy(range_found)) {
      
      range.$apply(slider_shadow.$id());
      $send(range_found, 'each', [], function $$10(part, val){
        
        if (part == null) part = nil;
        if (val == null) val = nil;
        return range.$send(part, val);});
    } else {
      range.$color((new Map([["alpha", 0]])))
    };
    cursor_particle = default_cursor_particles.$merge(cursor_found).$merge((new Map([["id", "" + (slider.$id()) + "_cursor"]])));
    cursor = slider.$box(cursor_particle);
    cursor_left = $rb_divide($rb_minus(slider_particle['$[]']("width"), cursor_particle['$[]']("width")), 2.0);
    cursor_top = $rb_divide($rb_minus(slider_particle['$[]']("height"), cursor_particle['$[]']("height")), 2.0);
    my_behavior = $send(self, 'lambda', [], function $$11(new_value){var cursor_top_initial = nil, cursor_left_initial = nil;

      
      if (new_value == null) new_value = nil;
      if ($eqeq(orientation, "vertical")) {
        
        if ($truthy($rb_lt(cursor.$width(), slider.$width()))) {
          
          range.$width(cursor.$width());
          range.$left(cursor_left);
        } else {
          
          range.$width(slider.$width());
          range.$smooth(default_smooth);
        };
        cursor_top_initial = $rb_times($rb_divide($rb_minus(max_value, new_value).$to_f(), $rb_minus(max_value, min_value)), $rb_minus(slider_particle['$[]']("height"), cursor_particle['$[]']("height")));
        bloc.$call(new_value);
        slider.$instance_variable_set("@value", new_value);
        cursor.$top(cursor_top_initial);
        cursor.$left(cursor_left);
        return range.$height($rb_minus($rb_minus(slider.$height(), cursor.$top()), $rb_divide(cursor.$height(), 2)));
      } else {
        
        if ($truthy($rb_lt(cursor.$height(), slider.$height()))) {
          
          range.$height(cursor.$height());
          range.$top(cursor_top);
        } else {
          
          range.$height(slider.$height());
          range.$smooth(default_smooth);
        };
        cursor_left_initial = $rb_times($rb_divide($rb_minus(new_value, min_value).$to_f(), $rb_minus(max_value, min_value)), $rb_minus(slider_particle['$[]']("width"), cursor_particle['$[]']("width")));
        bloc.$call(new_value);
        slider.$instance_variable_set("@value", new_value);
        cursor.$left(cursor_left_initial);
        cursor.$top(cursor_top);
        return range.$width($rb_plus(cursor.$left(), $rb_divide(cursor.$width(), 2)));
      };});
    slider.$behavior((new Map([["value", my_behavior]])));
    update_value = $send(self, 'lambda', [], function $$12(cursor_position, cursor_size, slider_size, orientation){var effective_slider_size = nil, percentage = nil, value_range = nil, calculated_value = nil;

      
      if (cursor_position == null) cursor_position = nil;
      if (cursor_size == null) cursor_size = nil;
      if (slider_size == null) slider_size = nil;
      if (orientation == null) orientation = nil;
      effective_slider_size = $rb_minus(slider_size, cursor_size);
      if ($eqeq(orientation, "vertical")) {
        percentage = $rb_minus(1.0, $rb_divide(cursor_position.$to_f(), effective_slider_size))
      } else {
        percentage = $rb_divide(cursor_position.$to_f(), effective_slider_size)
      };
      value_range = $rb_minus(max_value, min_value);
      calculated_value = $rb_plus(min_value, $rb_times(value_range, percentage).$round());
      return calculated_value.$clamp(min_value, max_value);});
    if ($eqeq(orientation, "vertical")) {
      
      if ($truthy($rb_lt(cursor.$width(), slider.$width()))) {
        
        range.$width(cursor.$width());
        range.$left(cursor_left);
      } else {
        
        range.$width(slider.$width());
        range.$smooth(default_smooth);
      };
      cursor_top_initial = $rb_times($rb_divide($rb_minus(max_value, default_value).$to_f(), $rb_minus(max_value, min_value)), $rb_minus(slider_particle['$[]']("height"), cursor_particle['$[]']("height")));
      bloc.$call(default_value);
      cursor.$top(cursor_top_initial);
      cursor.$left(cursor_left);
      range.$height($rb_minus($rb_minus(slider.$height(), cursor.$top()), $rb_divide(cursor.$height(), 2)));
      $send(cursor, 'drag', [(new Map([["restrict", (new Map([["max", (new Map([["top", $rb_minus(slider_particle['$[]']("height"), cursor_particle['$[]']("height"))], ["left", cursor_left]]))], ["min", (new Map([["left", cursor_left]]))]]))]]))], function $$13(event){var value = nil;

        
        if (event == null) event = nil;
        value = update_value.$call(cursor.$top(), cursor_particle['$[]']("height"), slider_particle['$[]']("height"), orientation);
        range.$height($rb_minus($rb_minus(slider.$height(), cursor.$top()), $rb_divide(cursor.$height(), 2)));
        bloc.$call(value);
        return slider.$instance_variable_set("@value", value);});
    } else {
      
      if ($truthy($rb_lt(cursor.$height(), slider.$height()))) {
        
        range.$height(cursor.$height());
        range.$top(cursor_top);
      } else {
        
        range.$height(slider.$height());
        range.$smooth(default_smooth);
      };
      cursor_left_initial = $rb_times($rb_divide($rb_minus(default_value, min_value).$to_f(), $rb_minus(max_value, min_value)), $rb_minus(slider_particle['$[]']("width"), cursor_particle['$[]']("width")));
      bloc.$call(default_value);
      cursor.$left(cursor_left_initial);
      cursor.$top(cursor_top);
      range.$width($rb_plus(cursor.$left(), $rb_divide(cursor.$width(), 2)));
      $send(cursor, 'drag', [(new Map([["restrict", (new Map([["max", (new Map([["left", $rb_minus(slider_particle['$[]']("width"), cursor_particle['$[]']("width"))], ["top", cursor_top]]))], ["min", (new Map([["top", cursor_top]]))]]))]]))], function $$14(event){var value = nil;

        
        if (event == null) event = nil;
        value = update_value.$call(cursor.$left(), cursor_particle['$[]']("width"), slider_particle['$[]']("width"), orientation);
        range.$width($rb_plus(cursor.$left(), $rb_divide(cursor.$width(), 2)));
        bloc.$call(value);
        return slider.$instance_variable_set("@value", value);});
    };
    $send(cursor, 'touch', ["double"], function $$15(){
      return slider.$value(default_value)});
    cursor.$shadow((new Map([["id", "s4"], ["left", 1], ["top", 1], ["blur", 3], ["option", "natural"], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0.6]])));
    return slider;}, {$$s: self});
  return $send(self, 'new', [(new Map([["molecule", "button"]]))], function $$16(params, bloc){var self = $$16.$$s == null ? this : $$16.$$s, $ret_or_1 = nil, states = nil, new_id = nil, back_col = nil, default_parent = nil, attach_to = nil, renderer_found = nil, button = nil;

    
    if (params == null) params = nil;
    if (bloc == null) bloc = nil;
    if ($truthy(($ret_or_1 = params['$[]']("height")))) {
      $ret_or_1
    } else {
      params['$[]=']("height", 25)
    };
    if ($truthy(($ret_or_1 = params['$[]']("width")))) {
      $ret_or_1
    } else {
      params['$[]=']("width", 25)
    };
    states = ($truthy(($ret_or_1 = params.$delete("states"))) ? ($ret_or_1) : (1));
    new_id = ($truthy(($ret_or_1 = params.$delete("id"))) ? ($ret_or_1) : (self.$identity_generator()));
    back_col = params.$delete("back");
    back_col = ($truthy(($ret_or_1 = back_col)) ? ($ret_or_1) : ("grey"));
    default_parent = ($truthy(self['$instance_of?']($$('Atome'))) ? (self.$id()) : ("view"));
    attach_to = ($truthy(($ret_or_1 = params['$[]']("attach"))) ? ($ret_or_1) : (default_parent));
    renderer_found = self.$grab(attach_to).$renderers();
    button = self.$box((new Map([["renderers", renderer_found], ["id", new_id], ["type", "shape"], ["color", back_col], ["left", 0], ["top", 0], ["data", ""], ["attach", attach_to], ["smooth", 3], ["overflow", "hidden"]])));
    $send(button, 'touch', ["down"], function $$17(){
      
      button.$tick("button");
      return bloc.$call($rb_minus(button.$tick()['$[]']("button"), 1)['$%'](states));});
    $send(params, 'each', [], function $$18(part_f, val_f){
      
      if (part_f == null) part_f = nil;
      if (val_f == null) val_f = nil;
      return button.$send(part_f, val_f);});
    return button;}, {$$s: self});
};

Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  
  self.$require("fileutils");
  self.$require("securerandom");
  self.$require("atome/version");
  self.$require("atome/genesis/genesis");
  self.$require("atome/kernel/black_matter");
  self.$require("atome/kernel/universe");
  self.$require("atome/utilities/essentials");
  self.$require("renderers/renderer");
  self.$require("atome/utilities/color_helper/color");
  self.$require("atome/extensions/atome");
  self.$require("atome/extensions/mathematics");
  self.$require("atome/atome");
  self.$require("atome/genesis/atomes");
  self.$require("atome/presets/atome");
  self.$require("atome/utilities/utilities");
  self.$require("atome/genesis/particles/atome");
  self.$require("atome/genesis/particles/communication");
  self.$require("atome/genesis/particles/effect");
  self.$require("atome/genesis/particles/event");
  self.$require("atome/genesis/particles/geometry");
  self.$require("atome/genesis/particles/hierarchy");
  self.$require("atome/genesis/particles/identity");
  self.$require("atome/genesis/particles/material");
  self.$require("atome/genesis/particles/property");
  self.$require("atome/genesis/particles/security");
  self.$require("atome/genesis/particles/spatial");
  self.$require("atome/genesis/particles/time");
  self.$require("atome/genesis/particles/utility");
  self.$require("atome/utilities/security");
  self.$require("renderers/html/index");
  self.$require("renderers/headless/index");
  self.$require("renderers/server/index");
  self.$require("atome/utilities/sanitizer");
  self.$require("atome/genesis/presets");
  self.$require("atome/genesis/sparkle");
  self.$require("molecules/init");
  return self.$require("molecules/intuition/utillities");
});
