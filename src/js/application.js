Opal.modules["templates/templat_manager"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $defs = Opal.defs, $truthy = Opal.truthy, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('getItem,[],global,setItem,anonymous_id,clear,set_anonymous_id,set_current_user,set_is_logged,current_user,is_logged');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'TemplateManager');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$anonymous_id', function $$anonymous_id() {
      
      return $$('JS').$global()['$[]']("localStorage").$getItem("anonymous_id")
    });
    $defs(self, '$current_user', function $$current_user() {
      
      return $$('JS').$global()['$[]']("localStorage").$getItem("current_user")
    });
    $defs(self, '$set_current_user', function $$set_current_user(user_id) {
      
      return $$('JS').$global()['$[]']("localStorage").$setItem("current_user", user_id)
    });
    $defs(self, '$set_anonymous_id', function $$set_anonymous_id(anonymous_id) {
      
      return $$('JS').$global()['$[]']("localStorage").$setItem("anonymous_id", anonymous_id)
    });
    $defs(self, '$is_logged', function $$is_logged() {
      
      return $$('JS').$global()['$[]']("localStorage").$getItem("logged")
    });
    $defs(self, '$set_is_logged', function $$set_is_logged() {
      
      return $$('JS').$global()['$[]']("localStorage").$setItem("logged", "false")
    });
    $defs(self, '$reset_to_anonymous', function $$reset_to_anonymous() {
      var self = this, anonymous_id = nil;

      
      anonymous_id = self.$anonymous_id();
      $$('JS').$global()['$[]']("localStorage").$clear();
      self.$set_anonymous_id(anonymous_id);
      self.$set_current_user(anonymous_id);
      return self.$set_is_logged();
    });
    return $defs(self, '$initialize_user', function $$initialize_user() {
      var self = this, anonymous_id = nil, current_user = nil;

      
      if (!$truthy(self.$anonymous_id())) {
        
        anonymous_id = $$('Universe').$current_user();
        $$('JS').$global()['$[]']("localStorage").$setItem("anonymous_id", anonymous_id);
      };
      if (!$truthy(self.$current_user())) {
        
        current_user = $$('Universe').$current_user();
        self.$set_current_user(current_user);
      };
      if ($truthy(self.$is_logged())) {
        return nil
      } else {
        return self.$set_is_logged()
      };
    });
  })($nesting[0], null, $nesting)
};

Opal.modules["authentication/auth_manager"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $defs = Opal.defs, $class_variable_set = Opal.class_variable_set, $class_variable_get = Opal.class_variable_get, $send = Opal.send, $eqeq = Opal.eqeq, $truthy = Opal.truthy, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('match?,db_access,[],sanitized_email,first,where,!,nil?,message,puts,==,key?,setItem,global');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AuthManager');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$valid_email_format?', function $AuthManager_valid_email_format$ques$1(mail) {
      var email_pattern = nil;

      
      email_pattern = /^[\w+\-.]+@[a-z\d\-.]+\.[a-z]+$/i;
      return email_pattern['$match?'](mail);
    });
    $defs(self, '$email_exist?', function $AuthManager_email_exist$ques$2(mail) {
      var self = this, user_table = nil, sanitized_email = nil, user = nil;

      
      $class_variable_set($nesting[0], '@@db', self.$db_access());
      user_table = $class_variable_get($nesting[0], '@@db', false)['$[]']("user");
      sanitized_email = self.$sanitized_email(mail);
      user = user_table.$where((new Map([["email", sanitized_email]]))).$first();
      return user['$nil?']()['$!']();
    });
    return $defs(self, '$connect', function $$connect(mail, pass) {
      var $yield = $$connect.$$p || nil, self = this;

      $$connect.$$p = null;
      
      $send($$('A'), 'message', [(new Map([["action", "authentication"], ["data", (new Map([["table", "user"], ["particles", (new Map([["email", mail]]))]]))]]))], function $$3(response){var self = $$3.$$s == null ? this : $$3.$$s, mail_message = nil, mail_response = nil, user_id = nil, user_items = nil;

        
        if (response == null) response = nil;
        self.$puts("on est dans le connect");
        if (($truthy(response['$key?']("mail_authorized")) && ($eqeq(response['$[]']("mail_authorized"), true)))) {
          
          self.$puts("response mail authorized: " + (response['$[]']("mail_authorized")));
          mail_message = $$('JS').$global()['$[]']("localStorage").$setItem("logged", response['$[]']("mail_authorized"));
          mail_response = response['$[]']("mail_authorized");
          self.$puts("mail_response : " + (mail_response));
          $$('JS').$global()['$[]']("localStorage").$setItem("current_user", response['$[]']("user_id"));
          self.$puts("Rcupration des items du user");
          user_id = response['$[]']("user_id");
          self.$puts("user_id: " + (user_id));
          user_items = $class_variable_get($nesting[0], '@@db', false)['$[]']("atome").$where((new Map([["creator", user_id]])));
          return self.$puts(" user_items: " + (user_items));
        } else if ($truthy(response['$[]']("error"))) {
          
          if (($yield !== nil)) {
            Opal.yield1($yield, response['$[]']("message"))
          };
          self.$puts("response[:error]");
          return self.$puts(response['$[]']("error"));
        } else {
          return nil
        };}, {$$s: self});
      return $send($$('A'), 'message', [(new Map([["action", "authorization"], ["data", (new Map([["table", "user"], ["particles", (new Map([["password", pass]]))]]))]]))], function $$4(response){var self = $$4.$$s == null ? this : $$4.$$s, authorized = nil, $ret_or_1 = nil, password_message = nil, password_response = nil, user_id = nil;

        
        if (response == null) response = nil;
        self.$puts("authorization : " + (response));
        if ($truthy(response['$key?']("password_authorized"))) {
          
          authorized = ($truthy(($ret_or_1 = response['$[]']("password_authorized"))) && ($ret_or_1));
          self.$puts("response password : " + (response['$[]']("password_authorized")));
          password_message = $$('JS').$global()['$[]']("localStorage").$setItem("logged", response['$[]']("password_authorized"));
          password_response = response['$[]']("password_authorized");
          self.$puts("password_response : " + (password_response));
          $$('JS').$global()['$[]']("localStorage").$setItem("current_user", response['$[]']("user_id"));
          self.$puts("Rcupration des items du user");
          user_id = response['$[]']("user_id");
          self.$puts("user_id: " + (user_id));
          return self.$puts("user_items : " + (response['$[]']("user_items")));
        } else {
          return nil
        };}, {$$s: self});
    });
  })($nesting[0], null, $nesting)
};

Opal.modules["authentication/auth_interface"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def, $send = Opal.send, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus, $not = Opal.not, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,create_view,connection,account_creation,box,touch,delete,input,border,text,data=,empty?,strip,data,nil?,puts,+,encode,connect,!,valid_email_format?,message,[],is_a?,getItem,global,setItem,identity_generator,inspect');
  
  self.$require("authentication/auth_manager");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AuthInterface');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.view = $proto.form = $proto.cancel = $proto.email_box = $proto.password_box = $proto.connection = $proto.creation = nil;
    
    $const_set($nesting[0], 'DARK_GREY_TRANSPARENT', (new Map([["red", 0.125], ["green", 0.125], ["blue", 0.125], ["alpha", 0.7]])));
    $const_set($nesting[0], 'GREY', (new Map([["red", 0.208], ["green", 0.208], ["blue", 0.208]])));
    $const_set($nesting[0], 'EASTERN_BLUE', (new Map([["red", 0.118], ["green", 0.596], ["blue", 0.596]])));
    
    $def(self, '$initialize', function $$initialize() {
      var self = this;

      
      self.$create_view();
      self.$connection();
      return self.$account_creation();
    });
    
    $def(self, '$create_view', function $$create_view() {
      var self = this;

      
      self.view = self.$box((new Map([["id", "poipoi"], ["left", 0], ["right", 0], ["top", 0], ["bottom", 0], ["height", "auto"], ["width", "auto"], ["color", $$('DARK_GREY_TRANSPARENT')]])));
      self.form = self.view.$box((new Map([["width", 500], ["height", 350], ["center", true], ["color", $$('GREY')], ["smooth", 10]])));
      self.cancel = self.form.$box((new Map([["width", 25], ["height", 25], ["top", 25], ["left", 450]])));
      $send(self.cancel, 'touch', [true], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;
        if (self.view == null) self.view = nil;
        if (self.connection == null) self.connection = nil;
        if (self.creation == null) self.creation = nil;

        
        self.view.$delete(true);
        self.connection.$delete(true);
        return self.creation.$delete(true);}, {$$s: self});
      self.email_box = self.form.$input((new Map([["width", 400], ["height", 50], ["top", 50], ["left", 10], ["color", $$('GREY')], ["smooth", 0], ["text", "white"], ["default", "Email"]])));
      self.email_box.$border((new Map([["thickness", 2], ["red", 0.1], ["green", 0.8], ["blue", 0.8], ["alpha", 1], ["pattern", "solid"]])));
      self.email_error_message = self.form.$text((new Map([["data", ""], ["left", 20], ["top", 115], ["color", "red"]])));
      self.password_box = self.form.$input((new Map([["width", 400], ["height", 50], ["top", 150], ["left", 10], ["position", "absolute"], ["color", $$('GREY')], ["smooth", 0], ["text", "white"], ["default", "Password"]])));
      self.password_box.$border((new Map([["thickness", 2], ["red", 0.1], ["green", 0.8], ["blue", 0.8], ["alpha", 1], ["pattern", "solid"]])));
      self.password_error_message = self.form.$text((new Map([["data", ""], ["left", 10], ["top", 210], ["color", "red"]])));
      self.global_message = self.form.$text((new Map([["data", ""], ["left", 10], ["top", 230], ["color", "red"]])));
      self.connection = self.form.$box((new Map([["width", 100], ["height", 50], ["left", 50], ["top", 250], ["color", "white"], ["smooth", 5], ["border", (new Map([["thickness", 2], ["color", $$('EASTERN_BLUE')], ["pattern", "solid"]]))], ["text", (new Map([["int8", (new Map([["francais", "Se connecter"], ["english", "Login"]]))], ["color", "black"], ["center", (new Map([["x", 30], ["y", -1]]))]]))], ["id", "connection_btn"]])));
      return (self.creation = self.form.$box((new Map([["width", 110], ["height", 50], ["left", 340], ["top", 250], ["color", $$('GREY')], ["smooth", 5], ["border", (new Map([["thickness", 2], ["color", $$('EASTERN_BLUE')], ["pattern", "solid"]]))], ["text", (new Map([["int8", (new Map([["francais", "Crer un compte"], ["english", "Create account"]]))], ["left", 10], ["color", "white"]]))], ["id", "creation_btn"]]))));
    });
    
    $def(self, '$connection', function $$connection() {
      var self = this;

      return $send(self.connection, 'touch', [true], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s, mail = nil, pass = nil, mail_message = nil, mail_response = nil, password_message = nil, password_response = nil;
        if (self.email_error_message == null) self.email_error_message = nil;
        if (self.password_error_message == null) self.password_error_message = nil;
        if (self.global_message == null) self.global_message = nil;
        if (self.password_box == null) self.password_box = nil;
        if (self.email_box == null) self.email_box = nil;

        
        self.email_error_message['$data=']("");
        self.password_error_message['$data=']("");
        self.global_message['$data=']("");
        if ((($truthy(self.email_box.$data()['$nil?']()) || ($truthy(self.email_box.$data().$strip()['$empty?']()))) && (($truthy(self.password_box.$data()['$nil?']()) || ($truthy(self.password_box.$data().$strip()['$empty?']())))))) {
          
          self.email_error_message['$data=']("Veuillez renseigner votre adresse email");
          self.password_error_message['$data=']("Veuillez renseigner votre mot de passe");
          return self.$puts("Veuillez renseigner votre adresse email et votre mot de passe.");
        } else if (($truthy(self.email_box.$data()['$nil?']()) || ($truthy(self.email_box.$data().$strip()['$empty?']())))) {
          
          self.email_error_message['$data=']("Veuillez renseigner votre adresse email");
          return self.$puts("Veuillez renseigner votre adresse email.");
        } else if (($truthy(self.password_box.$data()['$nil?']()) || ($truthy(self.password_box.$data().$strip()['$empty?']())))) {
          
          self.password_error_message['$data=']("Veuillez renseigner votre mot de passe");
          return self.$puts("Veuillez renseigner votre mot de passe.");
        } else {
          
          mail = self.email_box.$data();
          self.$puts($rb_plus("mail : ", mail));
          pass = $$('Black_matter').$encode(self.password_box.$data());
          self.$puts($rb_plus("pass : ", pass));
          mail_message = false;
          mail_response = nil;
          password_message = false;
          password_response = nil;
          return $send($$('AuthManager'), 'connect', [mail, pass], function $$3(error_message){var $a, self = $$3.$$s == null ? this : $$3.$$s;
            if (self.global_message == null) self.global_message = nil;

            
            if (error_message == null) error_message = nil;
            if ($truthy(error_message)) {
              return ($a = [error_message], $send(self.global_message, 'data=', $a), $a[$a.length - 1])
            } else {
              return nil
            };}, {$$s: self});
        };}, {$$s: self})
    });
    return $def(self, '$account_creation', function $$account_creation() {
      var self = this;

      return $send(self.creation, 'touch', [true], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s, mail = nil;
        if (self.email_error_message == null) self.email_error_message = nil;
        if (self.password_error_message == null) self.password_error_message = nil;
        if (self.password_box == null) self.password_box = nil;
        if (self.email_box == null) self.email_box = nil;

        
        self.email_error_message['$data=']("");
        self.password_error_message['$data=']("");
        if ((($truthy(self.email_box.$data()['$nil?']()) || ($truthy(self.email_box.$data().$strip()['$empty?']()))) && (($truthy(self.password_box.$data()['$nil?']()) || ($truthy(self.password_box.$data().$strip()['$empty?']())))))) {
          
          self.email_error_message['$data=']("Veuillez renseigner votre adresse email");
          self.password_error_message['$data=']("Veuillez renseigner votre mot de passe");
          return self.$puts("Veuillez renseigner votre adresse email et votre mot de passe.");
        } else if (($truthy(self.email_box.$data()['$nil?']()) || ($truthy(self.email_box.$data().$strip()['$empty?']())))) {
          
          self.email_error_message['$data=']("Veuillez renseigner votre adresse email");
          return self.$puts("Veuillez renseigner votre adresse email.");
        } else if (($truthy(self.password_box.$data()['$nil?']()) || ($truthy(self.password_box.$data().$strip()['$empty?']())))) {
          
          self.password_error_message['$data=']("Veuillez renseigner votre mot de passe");
          return self.$puts("Veuillez renseigner votre mot de passe.");
        } else {
          
          mail = self.email_box.$data();
          self.$puts($rb_plus("mail : ", mail));
          if ($not($$('AuthManager')['$valid_email_format?'](mail))) {
            
            self.email_error_message['$data=']("L'adresse email n'est pas valide");
            return self.$puts("L'adresse email n'est pas valide.");
          } else {
            return $send($$('A'), 'message', [(new Map([["action", "email_exist"], ["data", (new Map([["email", mail]]))]]))], function $$5(response){var self = $$5.$$s == null ? this : $$5.$$s, pass = nil, anon_id = nil, e = nil;
              if (self.password_box == null) self.password_box = nil;

              
              if (response == null) response = nil;
              try {
                
                self.$puts("response['data']['email_exist'] : " + (response['$[]']("data")['$[]']("email_exist")));
                if ($truthy(response['$is_a?']($$('Hash')))) {
                  
                  self.$puts(" hi ");
                  pass = $$('Black_matter').$encode(self.password_box.$data());
                  self.$puts($rb_plus(" pass : ", pass));
                  anon_id = $$('JS').$global()['$[]']("localStorage").$getItem("anonymous_id");
                  
                  try {
                    
                    $$('A').$message((new Map([["action", "insert"], ["data", (new Map([["table", "user"], ["particles", (new Map([["email", mail], ["password", pass], ["user_id", anon_id]]))]]))]])));
                    $$('AuthManager').$connect(mail, pass);
                    return $$('JS').$global()['$[]']("localStorage").$setItem("anonymous_id", self.$identity_generator());
                  } catch ($err) {
                    if (Opal.rescue($err, [$$$($$('Sequel'), 'UniqueConstraintViolation')])) {
                      try {
                        return self.$puts("Erreur: L'email existe dj.")
                      } finally { Opal.pop_exception($err); }
                    } else { throw $err; }
                  };;
                } else {
                  return self.$puts("Rponse inattendue du serveur : " + (response.$inspect()))
                };
              } catch ($err) {
                if (Opal.rescue($err, [$$('StandardError')])) {(e = $err)
                  try {
                    return self.$puts("Une erreur est survenue lors de la vrification de l'email : " + (e.$message()))
                  } finally { Opal.pop_exception($err); }
                } else { throw $err; }
              };}, {$$s: self})
          };
        };}, {$$s: self})
    });
  })($nesting[0], null, $nesting);
};

Opal.modules["templates/templat_interface"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $rb_plus = Opal.rb_plus, $eqeq = Opal.eqeq, $def = Opal.def, $send = Opal.send, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,initialize_user,puts,+,is_logged,==,create_ui_elements,create_user_view,create_anonymous_box,create_second_box,create_navigation_button,create_logout_button,box,current_user,center,text,touch,color,creator,circle,message,top,left,width,height,box1,new,reset_to_anonymous');
  
  self.$require("templates/templat_manager");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'TemplateInterface');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$initialize', function $$initialize() {
      var self = this;

      
      $$('TemplateManager').$initialize_user();
      self.$puts($rb_plus("is_logged :", $$('TemplateManager').$is_logged()));
      if ($eqeq($$('TemplateManager').$is_logged(), "false")) {
        
        self.$puts($rb_plus("is_logged false :", $$('TemplateManager').$is_logged()));
        return self.$create_ui_elements();
      } else if ($eqeq($$('TemplateManager').$is_logged(), "true")) {
        
        self.$puts($rb_plus("is_logged true :", $$('TemplateManager').$is_logged()));
        return self.$create_user_view();
      } else {
        return self.$puts("Rien  afficher")
      };
    });
    
    $def(self, '$create_ui_elements', function $$create_ui_elements() {
      var self = this;

      
      self.$create_anonymous_box();
      self.$create_second_box();
      return self.$create_navigation_button();
    });
    
    $def(self, '$create_user_view', function $$create_user_view() {
      var self = this;

      
      self.$create_anonymous_box();
      self.$create_second_box();
      self.$create_navigation_button();
      return self.$create_logout_button();
    });
    
    $def(self, '$create_anonymous_box', function $$create_anonymous_box() {
      var self = this, box1 = nil;

      
      box1 = self.$box((new Map([["creator", $$('TemplateManager').$current_user()], ["width", 300], ["height", 100], ["color", "green"]])));
      box1.$text("Creer un atome").$center(true);
      return $send(box1, 'touch', [true], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s, current_user = nil, c = nil;

        
        box1.$color("red");
        current_user = box1.$creator();
        c = self.$circle((new Map([["creator", $$('TemplateManager').$current_user()], ["color", "green"], ["top", 200], ["left", 200], ["width", 250], ["height", 80]])));
        c.$text($rb_plus("creator : ", $$('TemplateManager').$current_user()));
        if ($eqeq($$('TemplateManager').$is_logged(), "true")) {
          
          self.$puts("is_logged ok, on envoie les donnes de l'objet en base");
          return $$('A').$message((new Map([["action", "insert"], ["data", (new Map([["table", "atome"], ["particles", (new Map([["creator", c.$creator()], ["top", c.$top()], ["left", c.$left()], ["width", c.$width()], ["height", c.$height()]]))]]))]])));
        } else {
          return nil
        };}, {$$s: self});
    });
    
    $def(self, '$create_second_box', function $$create_second_box() {
      var self = this, box2 = nil;

      
      box2 = self.$box((new Map([["creator", $$('TemplateManager').$current_user()], ["width", 200], ["left", 350]])));
      return $send(box2, 'touch', [true], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s, b = nil, current_user = nil;

        
        box2.$color("red");
        b = self.$box((new Map([["top", 400], ["left", 200]])));
        current_user = self.$box1().$creator();
        b.$text($rb_plus("creator : ", current_user));
        if ($eqeq($$('TemplateManager').$is_logged(), "true")) {
          return $$('A').$message((new Map([["action", "insert"], ["data", (new Map([["table", "atome"], ["particles", (new Map([["creator", b.$creator()], ["top", b.$top()], ["left", b.$left()], ["width", b.$width()], ["height", b.$height()]]))]]))]])))
        } else {
          return nil
        };}, {$$s: self});
    });
    
    $def(self, '$create_navigation_button', function $$create_navigation_button() {
      var self = this, navigation_button = nil;

      
      navigation_button = self.$box((new Map([["creator", $$('TemplateManager').$current_user()], ["width", 300], ["height", 100], ["top", 500], ["left", 50]])));
      navigation_button.$text("Aller au formulaire d'inscription").$center(true);
      return $send(navigation_button, 'touch', [true], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s, auth_interface = nil;

        
        self.$require("authentication/auth_manager");
        self.$require("authentication/auth_interface");
        return (auth_interface = $$('AuthInterface').$new());}, {$$s: self});
    });
    return $def(self, '$create_logout_button', function $$create_logout_button() {
      var self = this, logout_button = nil;

      
      logout_button = self.$box((new Map([["width", 150], ["height", 80], ["top", 50], ["left", 500], ["color", "red"]])));
      logout_button.$text((new Map([["text", "Log out"], ["color", "black"]])));
      return $send(logout_button, 'touch', [true], function $$4(){
        return $$('TemplateManager').$reset_to_anonymous()});
    });
  })($nesting[0], null, $nesting);
};

Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, template_interface = nil;

  Opal.add_stubs('require,new');
  
  self.$require("templates/templat_manager");
  self.$require("templates/templat_interface");
  return (template_interface = $$('TemplateInterface').$new());
});
